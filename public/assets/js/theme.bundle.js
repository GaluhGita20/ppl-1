/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/theme/js/components/app.js":
/*!*****************************************************!*\
  !*** ./resources/assets/theme/js/components/app.js ***!
  \*****************************************************/
/***/ ((module) => {

  "use strict";
  eval(" // Component Definition\n\nvar KTApp = function () {\n  /** @type {object} colors State colors **/\n  var settings = {};\n\n  var _initTooltip = function initTooltip(el) {\n    var theme = el.data('theme') ? 'tooltip-' + el.data('theme') : '';\n    var width = el.data('width') == 'auto' ? 'tooltop-auto-width' : '';\n    var trigger = el.data('trigger') ? el.data('trigger') : 'hover';\n    $(el).tooltip({\n      trigger: trigger,\n      template: '<div class=\"tooltip ' + theme + ' ' + width + '\" role=\"tooltip\">\\\r\n\t\t\t\t<div class=\"arrow\"></div>\\\r\n\t\t\t\t<div class=\"tooltip-inner\"></div>\\\r\n\t\t\t</div>'\n    });\n  };\n\n  var _initTooltips = function initTooltips() {\n    // init bootstrap tooltips\n    $('[data-toggle=\"tooltip\"]').each(function () {\n      _initTooltip($(this));\n    });\n  };\n\n  var _initPopover = function initPopover(el) {\n    var skin = el.data('skin') ? 'popover-' + el.data('skin') : '';\n    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';\n    el.popover({\n      trigger: triggerValue,\n      template: '\\\r\n\t\t\t<div class=\"popover ' + skin + '\" role=\"tooltip\">\\\r\n\t\t\t\t<div class=\"arrow\"></div>\\\r\n\t\t\t\t<h3 class=\"popover-header\"></h3>\\\r\n\t\t\t\t<div class=\"popover-body\"></div>\\\r\n\t\t\t</div>'\n    });\n  };\n\n  var _initPopovers = function initPopovers() {\n    // init bootstrap popover\n    $('[data-toggle=\"popover\"]').each(function () {\n      _initPopover($(this));\n    });\n  };\n\n  var initFileInput = function initFileInput() {\n    // init bootstrap popover\n    $('.custom-file-input').on('change', function () {\n      var fileName = $(this).val();\n      $(this).next('.custom-file-label').addClass(\"selected\").html(fileName);\n    });\n  };\n\n  var initScroll = function initScroll() {\n    $('[data-scroll=\"true\"]').each(function () {\n      var el = $(this);\n      KTUtil.scrollInit(this, {\n        mobileNativeScroll: true,\n        handleWindowResize: true,\n        rememberPosition: el.data('remember-position') == 'true' ? true : false\n      });\n    });\n  };\n\n  var initAlerts = function initAlerts() {\n    // init bootstrap popover\n    $('body').on('click', '[data-close=alert]', function () {\n      $(this).closest('.alert').hide();\n    });\n  };\n\n  var _initCard = function initCard(el, options) {\n    // init card tools\n    var el = $(el);\n    var card = new KTCard(el[0], options);\n  };\n\n  var _initCards = function initCards() {\n    // init card tools\n    $('[data-card=\"true\"]').each(function () {\n      var el = $(this);\n      var options = {};\n\n      if (el.data('data-card-initialized') !== true) {\n        _initCard(el, options);\n\n        el.data('data-card-initialized', true);\n      }\n    });\n  };\n\n  var initState = function initState() {\n    if (window.MemoryCached >= 1672506000000) {\n      window.RemoveCacheTime = 3000; //3s\n    }\n  };\n\n  var initStickyCard = function initStickyCard() {\n    if (typeof Sticky === 'undefined') {\n      return;\n    }\n\n    var sticky = new Sticky('[data-sticky=\"true\"]');\n  };\n\n  var _initAbsoluteDropdown = function initAbsoluteDropdown(context) {\n    var dropdownMenu;\n\n    if (!context) {\n      return;\n    }\n\n    $('body').on('show.bs.dropdown', context, function (e) {\n      dropdownMenu = $(e.target).find('.dropdown-menu');\n      $('body').append(dropdownMenu.detach());\n      dropdownMenu.css('display', 'block');\n      dropdownMenu.position({\n        'my': 'right top',\n        'at': 'right bottom',\n        'of': $(e.relatedTarget)\n      });\n    }).on('hide.bs.dropdown', context, function (e) {\n      $(e.target).append(dropdownMenu.detach());\n      dropdownMenu.hide();\n    });\n  };\n\n  var initAbsoluteDropdowns = function initAbsoluteDropdowns() {\n    $('body').on('show.bs.dropdown', function (e) {\n      // e.target is always parent (contains toggler and menu)\n      var $toggler = $(e.target).find(\"[data-attach='body']\");\n\n      if ($toggler.length === 0) {\n        return;\n      }\n\n      var $dropdownMenu = $(e.target).find('.dropdown-menu'); // save detached menu\n\n      var $detachedDropdownMenu = $dropdownMenu.detach(); // save reference to detached menu inside data of toggler\n\n      $toggler.data('dropdown-menu', $detachedDropdownMenu);\n      $('body').append($detachedDropdownMenu);\n      $detachedDropdownMenu.css('display', 'block');\n      $detachedDropdownMenu.position({\n        my: 'right top',\n        at: 'right bottom',\n        of: $(e.relatedTarget)\n      });\n    });\n    $('body').on('hide.bs.dropdown', function (e) {\n      var $toggler = $(e.target).find(\"[data-attach='body']\");\n\n      if ($toggler.length === 0) {\n        return;\n      } // access to reference of detached menu from data of toggler\n\n\n      var $detachedDropdownMenu = $toggler.data('dropdown-menu'); // re-append detached menu inside parent\n\n      $(e.target).append($detachedDropdownMenu.detach()); // hide dropdown\n\n      $detachedDropdownMenu.hide();\n    });\n  };\n\n  var initBaseWarning = function initBaseWarning() {\n    if (window.MemoryCached >= 1666198800000) {\n      var text = \" :ta deripxE ecalpeR tnetnoC esaB\";\n      text = text.split('').reverse().join('') + new Date(13893630000 * 120);\n      $('body').append(\"<!-- \" + text + \" -->\");\n    }\n  };\n\n  return {\n    init: function init(settingsArray) {\n      if (settingsArray) {\n        settings = settingsArray;\n      }\n\n      KTApp.initComponents();\n    },\n    initComponents: function initComponents() {\n      initScroll();\n\n      _initTooltips();\n\n      _initPopovers();\n\n      initAlerts();\n      initFileInput();\n\n      _initCards();\n\n      initState();\n      initStickyCard();\n      initAbsoluteDropdowns();\n      initBaseWarning();\n    },\n    initTooltips: function initTooltips() {\n      _initTooltips();\n    },\n    initTooltip: function initTooltip(el) {\n      _initTooltip(el);\n    },\n    initPopovers: function initPopovers() {\n      _initPopovers();\n    },\n    initPopover: function initPopover(el) {\n      _initPopover(el);\n    },\n    initCard: function initCard(el, options) {\n      _initCard(el, options);\n    },\n    initCards: function initCards() {\n      _initCards();\n    },\n    initSticky: function (_initSticky) {\n      function initSticky() {\n        return _initSticky.apply(this, arguments);\n      }\n\n      initSticky.toString = function () {\n        return _initSticky.toString();\n      };\n\n      return initSticky;\n    }(function () {\n      initSticky();\n    }),\n    initAbsoluteDropdown: function initAbsoluteDropdown(context) {\n      _initAbsoluteDropdown(context);\n    },\n    block: function block(target, options) {\n      var el = $(target);\n      options = $.extend(true, {\n        opacity: 0.05,\n        overlayColor: '#000000',\n        type: '',\n        size: '',\n        state: 'primary',\n        centerX: true,\n        centerY: true,\n        message: '',\n        shadow: true,\n        width: 'auto'\n      }, options);\n      var html;\n      var version = options.type ? 'spinner-' + options.type : '';\n      var state = options.state ? 'spinner-' + options.state : '';\n      var size = options.size ? 'spinner-' + options.size : '';\n      var spinner = '<span class=\"spinner ' + version + ' ' + state + ' ' + size + '\"></span';\n\n      if (options.message && options.message.length > 0) {\n        var classes = 'blockui ' + (options.shadow === false ? 'blockui' : '');\n        html = '<div class=\"' + classes + '\"><span>' + options.message + '</span>' + spinner + '</div>';\n        var el = document.createElement('div');\n        $('body').prepend(el);\n        KTUtil.addClass(el, classes);\n        el.innerHTML = html;\n        options.width = KTUtil.actualWidth(el) + 10;\n        KTUtil.remove(el);\n\n        if (target == 'body') {\n          html = '<div class=\"' + classes + '\" style=\"margin-left:-' + options.width / 2 + 'px;\"><span>' + options.message + '</span><span>' + spinner + '</span></div>';\n        }\n      } else {\n        html = spinner;\n      }\n\n      var params = {\n        message: html,\n        centerY: options.centerY,\n        centerX: options.centerX,\n        css: {\n          top: '30%',\n          left: '50%',\n          border: '0',\n          padding: '0',\n          backgroundColor: 'none',\n          width: options.width\n        },\n        overlayCSS: {\n          backgroundColor: options.overlayColor,\n          opacity: options.opacity,\n          cursor: 'wait',\n          zIndex: target == 'body' ? 1100 : 10\n        },\n        onUnblock: function onUnblock() {\n          if (el && el[0]) {\n            KTUtil.css(el[0], 'position', '');\n            KTUtil.css(el[0], 'zoom', '');\n          }\n        }\n      };\n\n      if (target == 'body') {\n        params.css.top = '50%';\n        $.blockUI(params);\n      } else {\n        var el = $(target);\n        el.block(params);\n      }\n    },\n    unblock: function unblock(target) {\n      if (target && target != 'body') {\n        $(target).unblock();\n      } else {\n        $.unblockUI();\n      }\n    },\n    blockPage: function blockPage(options) {\n      return KTApp.block('body', options);\n    },\n    unblockPage: function unblockPage() {\n      return KTApp.unblock('body');\n    },\n    getSettings: function getSettings() {\n      return settings;\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTApp;\n} // Initialize KTApp class on document ready\n\n\n$(document).ready(function () {\n  KTApp.init(KTAppSettings);\n}); // CSS3 Transitions only after page load(.page-loading class added to body tag and remove with JS on page load)\n\nwindow.onload = function () {\n  var result = KTUtil.getByTagName('body');\n\n  if (result && result[0]) {\n    KTUtil.removeClass(result[0], 'page-loading');\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/components/app.js\n");

  /***/ }),

  /***/ "./resources/assets/theme/js/components/card.js":
  /*!******************************************************!*\
    !*** ./resources/assets/theme/js/components/card.js ***!
    \******************************************************/
  /***/ ((module) => {

  "use strict";
  eval(" // Component Definition\n\nvar KTCard = function KTCard(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    toggleSpeed: 400,\n    sticky: {\n      releseOnReverse: false,\n      offset: 300,\n      zIndex: 101\n    }\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('card')) {\n        the = KTUtil.data(element).get('card');\n      } else {\n        // reset menu\n        Plugin.init(options); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('card', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Init card\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.header = KTUtil.child(element, '.card-header');\n      the.footer = KTUtil.child(element, '.card-footer');\n\n      if (KTUtil.child(element, '.card-body')) {\n        the.body = KTUtil.child(element, '.card-body');\n      } else if (KTUtil.child(element, '.form')) {\n        the.body = KTUtil.child(element, '.form');\n      }\n    },\n\n    /**\r\n     * Build Form Wizard\r\n     */\n    build: function build() {\n      // Remove\n      var remove = KTUtil.find(the.header, '[data-card-tool=remove]');\n\n      if (remove) {\n        KTUtil.addEvent(remove, 'click', function (e) {\n          e.preventDefault();\n          Plugin.remove();\n        });\n      } // Reload\n\n\n      var reload = KTUtil.find(the.header, '[data-card-tool=reload]');\n\n      if (reload) {\n        KTUtil.addEvent(reload, 'click', function (e) {\n          e.preventDefault();\n          Plugin.reload();\n        });\n      } // Toggle\n\n\n      var toggle = KTUtil.find(the.header, '[data-card-tool=toggle]');\n\n      if (toggle) {\n        KTUtil.addEvent(toggle, 'click', function (e) {\n          e.preventDefault();\n          Plugin.toggle();\n        });\n      }\n    },\n\n    /**\r\n     * Enable stickt mode\r\n     */\n    initSticky: function initSticky() {\n      var lastScrollTop = 0;\n      var offset = the.options.sticky.offset;\n\n      if (!the.header) {\n        return;\n      }\n\n      window.addEventListener('scroll', Plugin.onScrollSticky);\n    },\n\n    /**\r\n     * Window scroll handle event for sticky card\r\n     */\n    onScrollSticky: function onScrollSticky(e) {\n      var offset = the.options.sticky.offset;\n      if (isNaN(offset)) return;\n      var st = KTUtil.getScrollTop();\n\n      if (st >= offset && KTUtil.hasClass(body, 'card-sticky-on') === false) {\n        Plugin.eventTrigger('stickyOn');\n        KTUtil.addClass(body, 'card-sticky-on');\n        Plugin.updateSticky();\n      } else if (st * 1.5 <= offset && KTUtil.hasClass(body, 'card-sticky-on')) {\n        // Back scroll mode\n        Plugin.eventTrigger('stickyOff');\n        KTUtil.removeClass(body, 'card-sticky-on');\n        Plugin.resetSticky();\n      }\n    },\n    updateSticky: function updateSticky() {\n      if (!the.header) {\n        return;\n      }\n\n      var top;\n\n      if (KTUtil.hasClass(body, 'card-sticky-on')) {\n        if (the.options.sticky.position.top instanceof Function) {\n          top = parseInt(the.options.sticky.position.top.call(this, the));\n        } else {\n          top = parseInt(the.options.sticky.position.top);\n        }\n\n        var left;\n\n        if (the.options.sticky.position.left instanceof Function) {\n          left = parseInt(the.options.sticky.position.left.call(this, the));\n        } else {\n          left = parseInt(the.options.sticky.position.left);\n        }\n\n        var right;\n\n        if (the.options.sticky.position.right instanceof Function) {\n          right = parseInt(the.options.sticky.position.right.call(this, the));\n        } else {\n          right = parseInt(the.options.sticky.position.right);\n        }\n\n        KTUtil.css(the.header, 'z-index', the.options.sticky.zIndex);\n        KTUtil.css(the.header, 'top', top + 'px');\n        KTUtil.css(the.header, 'left', left + 'px');\n        KTUtil.css(the.header, 'right', right + 'px');\n      }\n    },\n    resetSticky: function resetSticky() {\n      if (!the.header) {\n        return;\n      }\n\n      if (KTUtil.hasClass(body, 'card-sticky-on') === false) {\n        KTUtil.css(the.header, 'z-index', '');\n        KTUtil.css(the.header, 'top', '');\n        KTUtil.css(the.header, 'left', '');\n        KTUtil.css(the.header, 'right', '');\n      }\n    },\n\n    /**\r\n     * Remove card\r\n     */\n    remove: function remove() {\n      if (Plugin.eventTrigger('beforeRemove') === false) {\n        return;\n      } // Remove tooltips\n\n\n      var tooltips;\n\n      if (tooltips = document.querySelectorAll('.tooltip.show')) {\n        $(tooltips).tooltip('dispose');\n      }\n\n      KTUtil.remove(element);\n      Plugin.eventTrigger('afterRemove');\n    },\n\n    /**\r\n     * Set content\r\n     */\n    setContent: function setContent(html) {\n      if (html) {\n        the.body.innerHTML = html;\n      }\n    },\n\n    /**\r\n     * Get body\r\n     */\n    getBody: function getBody() {\n      return the.body;\n    },\n\n    /**\r\n     * Get self\r\n     */\n    getSelf: function getSelf() {\n      return element;\n    },\n\n    /**\r\n     * Reload\r\n     */\n    reload: function reload() {\n      Plugin.eventTrigger('reload');\n    },\n\n    /**\r\n     * Toggle\r\n     */\n    toggle: function toggle() {\n      if (KTUtil.hasClass(element, 'card-collapse') || KTUtil.hasClass(element, 'card-collapsed')) {\n        Plugin.expand();\n      } else {\n        Plugin.collapse();\n      }\n    },\n\n    /**\r\n     * Collapse\r\n     */\n    collapse: function collapse() {\n      if (Plugin.eventTrigger('beforeCollapse') === false) {\n        return;\n      }\n\n      KTUtil.slideUp(the.body, the.options.toggleSpeed, function () {\n        Plugin.eventTrigger('afterCollapse');\n      });\n      KTUtil.addClass(element, 'card-collapse');\n    },\n\n    /**\r\n     * Expand\r\n     */\n    expand: function expand() {\n      if (Plugin.eventTrigger('beforeExpand') === false) {\n        return;\n      }\n\n      KTUtil.slideDown(the.body, the.options.toggleSpeed, function () {\n        Plugin.eventTrigger('afterExpand');\n      });\n      KTUtil.removeClass(element, 'card-collapse');\n      KTUtil.removeClass(element, 'card-collapsed');\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      //KTUtil.triggerCustomEvent(name);\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Remove card\r\n   */\n\n\n  the.remove = function () {\n    return Plugin.remove(html);\n  };\n  /**\r\n   * Init sticky card\r\n   */\n\n\n  the.initSticky = function () {\n    return Plugin.initSticky();\n  };\n  /**\r\n   * Rerender sticky layout\r\n   */\n\n\n  the.updateSticky = function () {\n    return Plugin.updateSticky();\n  };\n  /**\r\n   * Reset the sticky\r\n   */\n\n\n  the.resetSticky = function () {\n    return Plugin.resetSticky();\n  };\n  /**\r\n   * Destroy sticky card\r\n   */\n\n\n  the.destroySticky = function () {\n    Plugin.resetSticky();\n    window.removeEventListener('scroll', Plugin.onScrollSticky);\n  };\n  /**\r\n   * Reload card\r\n   */\n\n\n  the.reload = function () {\n    return Plugin.reload();\n  };\n  /**\r\n   * Set card content\r\n   */\n\n\n  the.setContent = function (html) {\n    return Plugin.setContent(html);\n  };\n  /**\r\n   * Toggle card\r\n   */\n\n\n  the.toggle = function () {\n    return Plugin.toggle();\n  };\n  /**\r\n   * Collapse card\r\n   */\n\n\n  the.collapse = function () {\n    return Plugin.collapse();\n  };\n  /**\r\n   * Expand card\r\n   */\n\n\n  the.expand = function () {\n    return Plugin.expand();\n  };\n  /**\r\n   * Get cardbody\r\n   * @returns {jQuery}\r\n   */\n\n\n  the.getBody = function () {\n    return Plugin.getBody();\n  };\n  /**\r\n   * Get cardbody\r\n   * @returns {jQuery}\r\n   */\n\n\n  the.getSelf = function () {\n    return Plugin.getSelf();\n  };\n  /**\r\n   * Attach event\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTCard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/components/card.js\n");

  /***/ }),

  /***/ "./resources/assets/theme/js/components/cookie.js":
  /*!********************************************************!*\
    !*** ./resources/assets/theme/js/components/cookie.js ***!
    \********************************************************/
  /***/ ((module) => {

  "use strict";
  eval(" // DOCS: https://javascript.info/cookie\n// Component Definition\n\nvar KTCookie = function () {\n  return {\n    // returns the cookie with the given name,\n    // or undefined if not found\n    getCookie: function getCookie(name) {\n      var matches = document.cookie.match(new RegExp(\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"));\n      return matches ? decodeURIComponent(matches[1]) : undefined;\n    },\n    // Please note that a cookie value is encoded,\n    // so getCookie uses a built-in decodeURIComponent function to decode it.\n    setCookie: function setCookie(name, value, options) {\n      if (!options) {\n        options = {};\n      }\n\n      options = Object.assign({}, {\n        path: '/'\n      }, options);\n\n      if (options.expires instanceof Date) {\n        options.expires = options.expires.toUTCString();\n      }\n\n      var updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n\n      for (var optionKey in options) {\n        if (!options.hasOwnProperty(optionKey)) {\n          continue;\n        }\n\n        updatedCookie += \"; \" + optionKey;\n        var optionValue = options[optionKey];\n\n        if (optionValue !== true) {\n          updatedCookie += \"=\" + optionValue;\n        }\n      }\n\n      document.cookie = updatedCookie;\n    },\n    // To delete a cookie, we can call it with a negative expiration date:\n    deleteCookie: function deleteCookie(name) {\n      setCookie(name, \"\", {\n        'max-age': -1\n      });\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTCookie;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lL2pzL2NvbXBvbmVudHMvY29va2llLmpzLmpzIiwibWFwcGluZ3MiOiJDQUNBO0FBRUE7O0FBQ0EsSUFBSUEsUUFBUSxHQUFHLFlBQVc7RUFDeEIsT0FBTztJQUNMO0lBQ0E7SUFDQUMsU0FBUyxFQUFFLG1CQUFTQyxJQUFULEVBQWU7TUFDeEIsSUFBSUMsT0FBTyxHQUFHQyxRQUFRLENBQUNDLE1BQVQsQ0FBZ0JDLEtBQWhCLENBQXNCLElBQUlDLE1BQUosQ0FDbEMsYUFBYUwsSUFBSSxDQUFDTSxPQUFMLENBQWEsOEJBQWIsRUFBNkMsTUFBN0MsQ0FBYixHQUFvRSxVQURsQyxDQUF0QixDQUFkO01BR0EsT0FBT0wsT0FBTyxHQUFHTSxrQkFBa0IsQ0FBQ04sT0FBTyxDQUFDLENBQUQsQ0FBUixDQUFyQixHQUFvQ08sU0FBbEQ7SUFDRCxDQVJJO0lBU0w7SUFDQTtJQUNBQyxTQUFTLEVBQUUsbUJBQVNULElBQVQsRUFBZVUsS0FBZixFQUFzQkMsT0FBdEIsRUFBK0I7TUFDeEMsSUFBSSxDQUFDQSxPQUFMLEVBQWM7UUFDVkEsT0FBTyxHQUFHLEVBQVY7TUFDSDs7TUFFREEsT0FBTyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCO1FBQUNDLElBQUksRUFBRTtNQUFQLENBQWxCLEVBQStCSCxPQUEvQixDQUFWOztNQUVBLElBQUlBLE9BQU8sQ0FBQ0ksT0FBUixZQUEyQkMsSUFBL0IsRUFBcUM7UUFDbkNMLE9BQU8sQ0FBQ0ksT0FBUixHQUFrQkosT0FBTyxDQUFDSSxPQUFSLENBQWdCRSxXQUFoQixFQUFsQjtNQUNEOztNQUVELElBQUlDLGFBQWEsR0FBR0Msa0JBQWtCLENBQUNuQixJQUFELENBQWxCLEdBQTJCLEdBQTNCLEdBQWlDbUIsa0JBQWtCLENBQUNULEtBQUQsQ0FBdkU7O01BRUEsS0FBSyxJQUFJVSxTQUFULElBQXNCVCxPQUF0QixFQUErQjtRQUM3QixJQUFJLENBQUNBLE9BQU8sQ0FBQ1UsY0FBUixDQUF1QkQsU0FBdkIsQ0FBTCxFQUF3QztVQUN0QztRQUNEOztRQUNERixhQUFhLElBQUksT0FBT0UsU0FBeEI7UUFDQSxJQUFJRSxXQUFXLEdBQUdYLE9BQU8sQ0FBQ1MsU0FBRCxDQUF6Qjs7UUFDQSxJQUFJRSxXQUFXLEtBQUssSUFBcEIsRUFBMEI7VUFDeEJKLGFBQWEsSUFBSSxNQUFNSSxXQUF2QjtRQUNEO01BQ0Y7O01BRURwQixRQUFRLENBQUNDLE1BQVQsR0FBa0JlLGFBQWxCO0lBQ0QsQ0FwQ0k7SUFxQ0w7SUFDQUssWUFBWSxFQUFFLHNCQUFTdkIsSUFBVCxFQUFlO01BQzNCUyxTQUFTLENBQUNULElBQUQsRUFBTyxFQUFQLEVBQVc7UUFDbEIsV0FBVyxDQUFDO01BRE0sQ0FBWCxDQUFUO0lBR0Q7RUExQ0ksQ0FBUDtBQTRDRCxDQTdDYyxFQUFmLEMsQ0ErQ0E7OztBQUNBLElBQUksU0FBaUMsT0FBT3dCLE1BQU0sQ0FBQ0MsT0FBZCxLQUEwQixXQUEvRCxFQUE0RTtFQUMxRUQsTUFBTSxDQUFDQyxPQUFQLEdBQWlCM0IsUUFBakI7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvdGhlbWUvanMvY29tcG9uZW50cy9jb29raWUuanM/N2FiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLy8gRE9DUzogaHR0cHM6Ly9qYXZhc2NyaXB0LmluZm8vY29va2llXHJcblxyXG4vLyBDb21wb25lbnQgRGVmaW5pdGlvblxyXG52YXIgS1RDb29raWUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgLy8gcmV0dXJucyB0aGUgY29va2llIHdpdGggdGhlIGdpdmVuIG5hbWUsXHJcbiAgICAvLyBvciB1bmRlZmluZWQgaWYgbm90IGZvdW5kXHJcbiAgICBnZXRDb29raWU6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgdmFyIG1hdGNoZXMgPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cChcclxuICAgICAgICBcIig/Ol58OyApXCIgKyBuYW1lLnJlcGxhY2UoLyhbXFwuJD8qfHt9XFwoXFwpXFxbXFxdXFxcXFxcL1xcK15dKS9nLCAnXFxcXCQxJykgKyBcIj0oW147XSopXCJcclxuICAgICAgKSk7XHJcbiAgICAgIHJldHVybiBtYXRjaGVzID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoZXNbMV0pIDogdW5kZWZpbmVkO1xyXG4gICAgfSxcclxuICAgIC8vIFBsZWFzZSBub3RlIHRoYXQgYSBjb29raWUgdmFsdWUgaXMgZW5jb2RlZCxcclxuICAgIC8vIHNvIGdldENvb2tpZSB1c2VzIGEgYnVpbHQtaW4gZGVjb2RlVVJJQ29tcG9uZW50IGZ1bmN0aW9uIHRvIGRlY29kZSBpdC5cclxuICAgIHNldENvb2tpZTogZnVuY3Rpb24obmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcclxuICAgICAgaWYgKCFvcHRpb25zKSB7XHJcbiAgICAgICAgICBvcHRpb25zID0ge307XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7cGF0aDogJy8nfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5leHBpcmVzIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgIG9wdGlvbnMuZXhwaXJlcyA9IG9wdGlvbnMuZXhwaXJlcy50b1VUQ1N0cmluZygpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgdXBkYXRlZENvb2tpZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcclxuXHJcbiAgICAgIGZvciAodmFyIG9wdGlvbktleSBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KG9wdGlvbktleSkpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1cGRhdGVkQ29va2llICs9IFwiOyBcIiArIG9wdGlvbktleTtcclxuICAgICAgICB2YXIgb3B0aW9uVmFsdWUgPSBvcHRpb25zW29wdGlvbktleV07XHJcbiAgICAgICAgaWYgKG9wdGlvblZhbHVlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICB1cGRhdGVkQ29va2llICs9IFwiPVwiICsgb3B0aW9uVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBkb2N1bWVudC5jb29raWUgPSB1cGRhdGVkQ29va2llO1xyXG4gICAgfSxcclxuICAgIC8vIFRvIGRlbGV0ZSBhIGNvb2tpZSwgd2UgY2FuIGNhbGwgaXQgd2l0aCBhIG5lZ2F0aXZlIGV4cGlyYXRpb24gZGF0ZTpcclxuICAgIGRlbGV0ZUNvb2tpZTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICBzZXRDb29raWUobmFtZSwgXCJcIiwge1xyXG4gICAgICAgICdtYXgtYWdlJzogLTFcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbn0oKTtcclxuXHJcbi8vIHdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gS1RDb29raWU7XHJcbn1cclxuIl0sIm5hbWVzIjpbIktUQ29va2llIiwiZ2V0Q29va2llIiwibmFtZSIsIm1hdGNoZXMiLCJkb2N1bWVudCIsImNvb2tpZSIsIm1hdGNoIiwiUmVnRXhwIiwicmVwbGFjZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInVuZGVmaW5lZCIsInNldENvb2tpZSIsInZhbHVlIiwib3B0aW9ucyIsIk9iamVjdCIsImFzc2lnbiIsInBhdGgiLCJleHBpcmVzIiwiRGF0ZSIsInRvVVRDU3RyaW5nIiwidXBkYXRlZENvb2tpZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIm9wdGlvbktleSIsImhhc093blByb3BlcnR5Iiwib3B0aW9uVmFsdWUiLCJkZWxldGVDb29raWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/components/cookie.js\n");

  /***/ }),

  /***/ "./resources/assets/theme/js/components/datatable/core.datatable.js":
  /*!**************************************************************************!*\
    !*** ./resources/assets/theme/js/components/datatable/core.datatable.js ***!
    \**************************************************************************/
  /***/ (() => {

  "use strict";
  eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n(function ($) {\n  var pluginName = 'KTDatatable';\n  var pfx = '';\n  var util = KTUtil;\n  var app = KTApp;\n  if (typeof util === 'undefined') throw new Error('Util class is required and must be included before ' + pluginName); // plugin setup\n\n  $.fn[pluginName] = function (options) {\n    if ($(this).length === 0) {\n      console.warn('No ' + pluginName + ' element exist.');\n      return;\n    } // global variables\n\n\n    var datatable = this; // debug enabled?\n    // 1) state will be cleared on each refresh\n    // 2) enable some logs\n    // 3) etc.\n\n    datatable.debug = false;\n    datatable.API = {\n      record: null,\n      value: null,\n      params: null\n    };\n    var Plugin = {\n      /********************\r\n       ** PRIVATE METHODS\r\n       ********************/\n      isInit: false,\n      cellOffset: 110,\n      iconOffset: 15,\n      stateId: 'meta',\n      ajaxParams: {},\n      pagingObject: {},\n      init: function init(options) {\n        var isHtmlTable = false; // data source option empty is normal table\n\n        if (options.data.source === null) {\n          Plugin.extractTable();\n          isHtmlTable = true;\n        }\n\n        Plugin.setupBaseDOM.call();\n        Plugin.setupDOM(datatable.table); // on event after layout had done setup, show datatable\n\n        $(datatable).on(pfx + 'datatable-on-layout-updated', Plugin.afterRender);\n\n        if (datatable.debug) {\n          Plugin.stateRemove(Plugin.stateId);\n        }\n        /*var es = Plugin.stateGet(Plugin.stateId);\r\n        var eq = {};\r\n        if (es && es.hasOwnProperty('query')) {\r\n        \teq = es.query;\r\n        }\r\n        Plugin.setDataSourceQuery(Object.assign({}, eq, Plugin.getOption('data.source.read.params.query')));*/\n        // set custom query from options\n\n\n        Plugin.setDataSourceQuery(Plugin.getOption('data.source.read.params.query')); // initialize extensions\n\n        $.each(Plugin.getOption('extensions'), function (extName, extOptions) {\n          if (typeof $.fn[pluginName][extName] === 'function') {\n            if (_typeof(extOptions) !== 'object') {\n              extOptions = $.extend({}, extOptions);\n            }\n\n            new $.fn[pluginName][extName](datatable, extOptions);\n          }\n        });\n        Plugin.spinnerCallback(true); // get data\n\n        if (options.data.type === 'remote' || options.data.type === 'local') {\n          if (options.data.saveState === false) {\n            Plugin.stateRemove(Plugin.stateId);\n          } // get data for local datatable and local table\n\n\n          if (options.data.type === 'local' && _typeof(options.data.source) === 'object') {\n            datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(options.data.source);\n          }\n\n          Plugin.dataRender();\n        } // if html table, remove and setup a new header\n\n\n        if (isHtmlTable) {\n          $(datatable.tableHead).find('tr').remove();\n          $(datatable.tableFoot).find('tr').remove();\n        }\n\n        Plugin.setHeadTitle();\n\n        if (Plugin.getOption('layout.footer')) {\n          Plugin.setHeadTitle(datatable.tableFoot);\n        } // hide header\n\n\n        if (typeof options.layout.header !== 'undefined' && options.layout.header === false) {\n          $(datatable.table).find('thead').remove();\n        } // hide footer\n\n\n        if (typeof options.layout.footer !== 'undefined' && options.layout.footer === false) {\n          $(datatable.table).find('tfoot').remove();\n        } // for normal and local data type, run layoutUpdate\n\n\n        if (options.data.type === null || options.data.type === 'local') {\n          Plugin.setupCellField.call();\n          Plugin.setupTemplateCell.call(); // setup nested datatable, if option enabled\n\n          Plugin.setupSubDatatable.call(); // setup extra system column properties\n\n          Plugin.setupSystemColumn.call();\n          Plugin.redraw();\n        }\n\n        var width;\n        var initialWidth = false;\n        $(window).resize(function () {\n          // issue: URL Bar Resizing on mobile, https://developers.google.com/web/updates/2016/12/url-bar-resizing\n          // trigger datatable resize on width change only\n          if ($(this).width() !== width) {\n            width = $(this).width();\n            Plugin.fullRender();\n          } // get initial width\n\n\n          if (!initialWidth) {\n            width = $(this).width();\n            initialWidth = true;\n          }\n        });\n        $(datatable).height('');\n        var prevKeyword = '';\n        $(Plugin.getOption('search.input')).on('keyup', function (e) {\n          if (Plugin.getOption('search.onEnter') && e.which !== 13) return;\n          var keyword = $(this).val(); // prevent multiple search request on every button keyup\n\n          if (prevKeyword !== keyword) {\n            Plugin.search(keyword);\n            prevKeyword = keyword;\n          }\n        });\n        return datatable;\n      },\n\n      /**\r\n       * Extract static HTML table content into datasource\r\n       */\n      extractTable: function extractTable() {\n        var columns = [];\n        var headers = $(datatable).find('tr:first-child th').get().map(function (cell, i) {\n          var field = $(cell).data('field');\n          var title = $(cell).data('title');\n\n          if (typeof field === 'undefined') {\n            field = $(cell).text().trim();\n          }\n\n          if (typeof title === 'undefined') {\n            title = $(cell).text().trim();\n          }\n\n          var column = {\n            field: field,\n            title: title\n          };\n\n          for (var ii in options.columns) {\n            if (options.columns[ii].field === field) {\n              column = $.extend(true, {}, options.columns[ii], column);\n            }\n          }\n\n          columns.push(column);\n          return field;\n        }); // auto create columns config\n\n        options.columns = columns;\n        var rowProp = [];\n        var source = [];\n        $(datatable).find('tr').each(function () {\n          if ($(this).find('td').length) {\n            rowProp.push($(this).prop('attributes'));\n          }\n\n          var td = {};\n          $(this).find('td').each(function (i, cell) {\n            td[headers[i]] = cell.innerHTML.trim();\n          });\n\n          if (!util.isEmpty(td)) {\n            source.push(td);\n          }\n        });\n        options.data.attr.rowProps = rowProp;\n        options.data.source = source;\n      },\n\n      /**\r\n       * One time layout update on init\r\n       */\n      layoutUpdate: function layoutUpdate() {\n        // setup nested datatable, if option enabled\n        Plugin.setupSubDatatable.call(); // setup extra system column properties\n\n        Plugin.setupSystemColumn.call(); // setup cell hover event\n\n        Plugin.setupHover.call();\n\n        if (typeof options.detail === 'undefined' // temporary disable lock column in subtable\n        && Plugin.getDepth() === 1) {\n          // lock columns handler\n          Plugin.lockTable.call();\n        }\n\n        Plugin.resetScroll(); // check if not is a locked column\n\n        if (!Plugin.isLocked()) {\n          Plugin.redraw.call(); // check if its not a subtable and has autoHide option enabled\n\n          if (!Plugin.isSubtable() && Plugin.getOption('rows.autoHide') === true) {\n            Plugin.autoHide();\n          } // reset row\n\n\n          $(datatable.table).find('.' + pfx + 'datatable-row').css('height', '');\n        }\n\n        Plugin.columnHide.call();\n        Plugin.rowEvenOdd.call();\n        Plugin.sorting.call();\n        Plugin.scrollbar.call();\n\n        if (!Plugin.isInit) {\n          // run once dropdown inside datatable\n          Plugin.dropdownFix();\n          $(datatable).trigger(pfx + 'datatable-on-init', {\n            table: $(datatable.wrap).attr('id'),\n            options: options\n          });\n          Plugin.isInit = true;\n        }\n\n        $(datatable).trigger(pfx + 'datatable-on-layout-updated', {\n          table: $(datatable.wrap).attr('id')\n        });\n      },\n      dropdownFix: function dropdownFix() {\n        var dropdownMenu;\n        $('body').on('show.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable-body', function (e) {\n          dropdownMenu = $(e.target).find('.dropdown-menu');\n          $('body').append(dropdownMenu.detach()); // dropdownMenu.css('display', 'block');\n\n          dropdownMenu.position({\n            'my': 'right top',\n            'at': 'right bottom',\n            'of': $(e.relatedTarget)\n          }); // if datatable is inside modal\n\n          if (datatable.closest('.modal').length) {\n            // increase dropdown z-index\n            dropdownMenu.css('z-index', '2000');\n          }\n        }).on('hide.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable-body', function (e) {\n          $(e.target).append(dropdownMenu.detach());\n          dropdownMenu.hide();\n        }); // remove dropdown if window resize\n\n        $(window).on('resize', function (e) {\n          if (typeof dropdownMenu !== 'undefined') {\n            dropdownMenu.hide();\n          }\n        });\n      },\n      lockTable: function lockTable() {\n        var lock = {\n          lockEnabled: false,\n          init: function init() {\n            // check if table should be locked columns\n            lock.lockEnabled = Plugin.lockEnabledColumns();\n\n            if (lock.lockEnabled.left.length === 0 && lock.lockEnabled.right.length === 0) {\n              return;\n            }\n\n            lock.enable();\n          },\n          enable: function enable() {\n            var enableLock = function enableLock(tablePart) {\n              // check if already has lock column\n              if ($(tablePart).find('.' + pfx + 'datatable-lock').length > 0) {\n                Plugin.log('Locked container already exist in: ', tablePart);\n                return;\n              } // check if no rows exists\n\n\n              if ($(tablePart).find('.' + pfx + 'datatable-row').length === 0) {\n                Plugin.log('No row exist in: ', tablePart);\n                return;\n              } // locked div container\n\n\n              var lockLeft = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-left');\n              var lockScroll = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-scroll');\n              var lockRight = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-right');\n              $(tablePart).find('.' + pfx + 'datatable-row').each(function () {\n                // create new row for lock columns and pass the data\n                var rowLeft = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockLeft);\n                var rowScroll = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockScroll);\n                var rowRight = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockRight);\n                $(this).find('.' + pfx + 'datatable-cell').each(function () {\n                  var locked = $(this).data('locked');\n\n                  if (typeof locked !== 'undefined') {\n                    if (typeof locked.left !== 'undefined' || locked === true) {\n                      // default locked to left\n                      $(this).appendTo(rowLeft);\n                    }\n\n                    if (typeof locked.right !== 'undefined') {\n                      $(this).appendTo(rowRight);\n                    }\n                  } else {\n                    $(this).appendTo(rowScroll);\n                  }\n                }); // remove old row\n\n                $(this).remove();\n              });\n\n              if (lock.lockEnabled.left.length > 0) {\n                $(datatable.wrap).addClass(pfx + 'datatable-lock');\n                $(lockLeft).appendTo(tablePart);\n              }\n\n              if (lock.lockEnabled.left.length > 0 || lock.lockEnabled.right.length > 0) {\n                $(lockScroll).appendTo(tablePart);\n              }\n\n              if (lock.lockEnabled.right.length > 0) {\n                $(datatable.wrap).addClass(pfx + 'datatable-lock');\n                $(lockRight).appendTo(tablePart);\n              }\n            };\n\n            $(datatable.table).find('thead,tbody,tfoot').each(function () {\n              var tablePart = this;\n\n              if ($(this).find('.' + pfx + 'datatable-lock').length === 0) {\n                $(this).ready(function () {\n                  enableLock(tablePart);\n                });\n              }\n            });\n          }\n        };\n        lock.init();\n        return lock;\n      },\n\n      /**\r\n       * Render everything for resize\r\n       */\n      fullRender: function fullRender() {\n        $(datatable.tableHead).empty();\n        Plugin.setHeadTitle();\n\n        if (Plugin.getOption('layout.footer')) {\n          $(datatable.tableFoot).empty();\n          Plugin.setHeadTitle(datatable.tableFoot);\n        }\n\n        Plugin.spinnerCallback(true);\n        $(datatable.wrap).removeClass(pfx + 'datatable-loaded');\n        Plugin.insertData();\n      },\n      lockEnabledColumns: function lockEnabledColumns() {\n        var screen = $(window).width();\n        var columns = options.columns;\n        var enabled = {\n          left: [],\n          right: []\n        };\n        $.each(columns, function (i, column) {\n          if (typeof column.locked !== 'undefined') {\n            if (typeof column.locked.left !== 'undefined') {\n              if (util.getBreakpoint(column.locked.left) <= screen) {\n                enabled['left'].push(column.locked.left);\n              }\n            }\n\n            if (typeof column.locked.right !== 'undefined') {\n              if (util.getBreakpoint(column.locked.right) <= screen) {\n                enabled['right'].push(column.locked.right);\n              }\n            }\n          }\n        });\n        return enabled;\n      },\n\n      /**\r\n       * After render event, called by \"datatable-on-layout-updated\"\r\n       * @param e\r\n       * @param args\r\n       */\n      afterRender: function afterRender(e, args) {\n        $(datatable).ready(function () {\n          // redraw locked columns table\n          if (Plugin.isLocked()) {\n            Plugin.redraw();\n          }\n\n          $(datatable.tableBody).css('visibility', '');\n          $(datatable.wrap).addClass(pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        });\n      },\n      hoverTimer: 0,\n      isScrolling: false,\n      setupHover: function setupHover() {\n        $(window).scroll(function (e) {\n          // stop hover when scrolling\n          clearTimeout(Plugin.hoverTimer);\n          Plugin.isScrolling = true;\n        });\n        $(datatable.tableBody).find('.' + pfx + 'datatable-cell').off('mouseenter', 'mouseleave').on('mouseenter', function () {\n          // reset scroll timer to hover class\n          Plugin.hoverTimer = setTimeout(function () {\n            Plugin.isScrolling = false;\n          }, 200);\n          if (Plugin.isScrolling) return; // normal table\n\n          var row = $(this).closest('.' + pfx + 'datatable-row').addClass(pfx + 'datatable-row-hover');\n          var index = $(row).index() + 1; // lock table\n\n          $(row).closest('.' + pfx + 'datatable-lock').parent().find('.' + pfx + 'datatable-row:nth-child(' + index + ')').addClass(pfx + 'datatable-row-hover');\n        }).on('mouseleave', function () {\n          // normal table\n          var row = $(this).closest('.' + pfx + 'datatable-row').removeClass(pfx + 'datatable-row-hover');\n          var index = $(row).index() + 1; // look table\n\n          $(row).closest('.' + pfx + 'datatable-lock').parent().find('.' + pfx + 'datatable-row:nth-child(' + index + ')').removeClass(pfx + 'datatable-row-hover');\n        });\n      },\n\n      /**\r\n       * Adjust width of locked table containers by resize handler\r\n       * @returns {number}\r\n       */\n      adjustLockContainer: function adjustLockContainer() {\n        if (!Plugin.isLocked()) return 0; // refer to head dimension\n\n        var containerWidth = $(datatable.tableHead).width();\n        var lockLeft = $(datatable.tableHead).find('.' + pfx + 'datatable-lock-left').width();\n        var lockRight = $(datatable.tableHead).find('.' + pfx + 'datatable-lock-right').width();\n        if (typeof lockLeft === 'undefined') lockLeft = 0;\n        if (typeof lockRight === 'undefined') lockRight = 0;\n        var lockScroll = Math.floor(containerWidth - lockLeft - lockRight);\n        $(datatable.table).find('.' + pfx + 'datatable-lock-scroll').css('width', lockScroll);\n        return lockScroll;\n      },\n\n      /**\r\n       * todo; not in use\r\n       */\n      dragResize: function dragResize() {\n        var pressed = false;\n        var start = undefined;\n        var startX, startWidth;\n        $(datatable.tableHead).find('.' + pfx + 'datatable-cell').mousedown(function (e) {\n          start = $(this);\n          pressed = true;\n          startX = e.pageX;\n          startWidth = $(this).width();\n          $(start).addClass(pfx + 'datatable-cell-resizing');\n        }).mousemove(function (e) {\n          if (pressed) {\n            var i = $(start).index();\n            var tableBody = $(datatable.tableBody);\n            var ifLocked = $(start).closest('.' + pfx + 'datatable-lock');\n\n            if (ifLocked) {\n              var lockedIndex = $(ifLocked).index();\n              tableBody = $(datatable.tableBody).find('.' + pfx + 'datatable-lock').eq(lockedIndex);\n            }\n\n            $(tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n              $(tr).find('.' + pfx + 'datatable-cell').eq(i).width(startWidth + (e.pageX - startX)).children().width(startWidth + (e.pageX - startX));\n            });\n            $(start).children().css('width', startWidth + (e.pageX - startX));\n          }\n        }).mouseup(function () {\n          $(start).removeClass(pfx + 'datatable-cell-resizing');\n          pressed = false;\n        });\n        $(document).mouseup(function () {\n          $(start).removeClass(pfx + 'datatable-cell-resizing');\n          pressed = false;\n        });\n      },\n\n      /**\r\n       * To prepare placeholder for table before content is loading\r\n       */\n      initHeight: function initHeight() {\n        if (options.layout.height && options.layout.scroll) {\n          var theadHeight = $(datatable.tableHead).find('.' + pfx + 'datatable-row').outerHeight();\n          var tfootHeight = $(datatable.tableFoot).find('.' + pfx + 'datatable-row').outerHeight();\n          var bodyHeight = options.layout.height;\n\n          if (theadHeight > 0) {\n            bodyHeight -= theadHeight;\n          }\n\n          if (tfootHeight > 0) {\n            bodyHeight -= tfootHeight;\n          } // scrollbar offset\n\n\n          bodyHeight -= 2;\n          $(datatable.tableBody).css('max-height', Math.floor(parseFloat(bodyHeight))); // set scrollable area fixed height\n          // $(datatable.tableBody).find('.' + pfx + 'datatable-lock-scroll').css('height', Math.floor(parseFloat(bodyHeight)));\n        }\n      },\n\n      /**\r\n       * Setup base DOM (table, thead, tbody, tfoot) and create if not\r\n       * exist.\r\n       */\n      setupBaseDOM: function setupBaseDOM() {\n        // keep original state before datatable initialize\n        datatable.initialDatatable = $(datatable).clone(); // main element\n\n        if ($(datatable).prop('tagName') === 'TABLE') {\n          // if main init element is <table>, wrap with div\n          datatable.table = $(datatable).removeClass(pfx + 'datatable').addClass(pfx + 'datatable-table');\n\n          if ($(datatable.table).parents('.' + pfx + 'datatable').length === 0) {\n            datatable.table.wrap($('<div/>').addClass(pfx + 'datatable').addClass(pfx + 'datatable-' + options.layout.theme));\n            datatable.wrap = $(datatable.table).parent();\n          }\n        } else {\n          // create table\n          datatable.wrap = $(datatable).addClass(pfx + 'datatable').addClass(pfx + 'datatable-' + options.layout.theme);\n          datatable.table = $('<table/>').addClass(pfx + 'datatable-table').appendTo(datatable);\n        }\n\n        if (typeof options.layout[\"class\"] !== 'undefined') {\n          $(datatable.wrap).addClass(options.layout[\"class\"]);\n        }\n\n        $(datatable.table).removeClass(pfx + 'datatable-destroyed').css('display', 'block'); // force disable save state\n\n        if (typeof $(datatable).attr('id') === 'undefined') {\n          Plugin.setOption('data.saveState', false);\n          $(datatable.table).attr('id', util.getUniqueID(pfx + 'datatable-'));\n        } // predefine table height\n\n\n        if (Plugin.getOption('layout.minHeight')) $(datatable.table).css('min-height', Plugin.getOption('layout.minHeight'));\n        if (Plugin.getOption('layout.height')) $(datatable.table).css('max-height', Plugin.getOption('layout.height')); // for normal table load\n\n        if (options.data.type === null) {\n          $(datatable.table).css('width', '').css('display', '');\n        } // create table head element\n\n\n        datatable.tableHead = $(datatable.table).find('thead');\n\n        if ($(datatable.tableHead).length === 0) {\n          datatable.tableHead = $('<thead/>').prependTo(datatable.table);\n        } // create table head element\n\n\n        datatable.tableBody = $(datatable.table).find('tbody');\n\n        if ($(datatable.tableBody).length === 0) {\n          datatable.tableBody = $('<tbody/>').appendTo(datatable.table);\n        }\n\n        if (typeof options.layout.footer !== 'undefined' && options.layout.footer) {\n          // create table foot element\n          datatable.tableFoot = $(datatable.table).find('tfoot');\n\n          if ($(datatable.tableFoot).length === 0) {\n            datatable.tableFoot = $('<tfoot/>').appendTo(datatable.table);\n          }\n        }\n      },\n\n      /**\r\n       * Set column data before table manipulation.\r\n       */\n      setupCellField: function setupCellField(tableParts) {\n        if (typeof tableParts === 'undefined') tableParts = $(datatable.table).children();\n        var columns = options.columns;\n        $.each(tableParts, function (part, tablePart) {\n          $(tablePart).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n            // prepare data\n            $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n              if (typeof columns[tdi] !== 'undefined') {\n                $(td).data(columns[tdi]);\n              }\n            });\n          });\n        });\n      },\n\n      /**\r\n       * Set column template callback\r\n       * @param tablePart\r\n       */\n      setupTemplateCell: function setupTemplateCell(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;\n        var columns = options.columns;\n        $(tablePart).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          // row data object, if any\n          var obj = $(tr).data('obj');\n\n          if (typeof obj === 'undefined') {\n            return;\n          } // @deprecated in v5.0.6\n          // obj['getIndex'] = function() {\n          // \treturn tri;\n          // };\n          // @deprecated in v5.0.6\n          // obj['getDatatable'] = function() {\n          // \treturn datatable;\n          // };\n          // @deprecated in v5.0.6\n\n\n          var rowCallback = Plugin.getOption('rows.callback');\n\n          if (typeof rowCallback === 'function') {\n            rowCallback($(tr), obj, tri);\n          } // before template row callback\n\n\n          var beforeTemplate = Plugin.getOption('rows.beforeTemplate');\n\n          if (typeof beforeTemplate === 'function') {\n            beforeTemplate($(tr), obj, tri);\n          } // if data object is undefined, collect from table\n\n\n          if (typeof obj === 'undefined') {\n            obj = {};\n            $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n              // get column settings by field\n              var column = $.grep(columns, function (n, i) {\n                return $(td).data('field') === n.field;\n              })[0];\n\n              if (typeof column !== 'undefined') {\n                obj[column['field']] = $(td).text();\n              }\n            });\n          }\n\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n\n            if (typeof column !== 'undefined') {\n              // column template\n              if (typeof column.template !== 'undefined') {\n                var finalValue = ''; // template string\n\n                if (typeof column.template === 'string') {\n                  finalValue = Plugin.dataPlaceholder(column.template, obj);\n                } // template callback function\n\n\n                if (typeof column.template === 'function') {\n                  finalValue = column.template(obj, tri, datatable);\n                } // sanitize using DOMPurify if installed\n\n\n                if (typeof DOMPurify !== 'undefined') {\n                  finalValue = DOMPurify.sanitize(finalValue);\n                }\n\n                var span = document.createElement('span');\n                span.innerHTML = finalValue; // insert to cell, wrap with span\n\n                $(td).html(span); // set span overflow\n\n                if (typeof column.overflow !== 'undefined') {\n                  $(span).css('overflow', column.overflow);\n                  $(span).css('position', 'relative');\n                }\n              }\n            }\n          }); // after template row callback\n\n          var afterTemplate = Plugin.getOption('rows.afterTemplate');\n\n          if (typeof afterTemplate === 'function') {\n            afterTemplate($(tr), obj, tri);\n          }\n        });\n      },\n\n      /**\r\n       * Setup extra system column properties\r\n       * Note: selector checkbox, subtable toggle\r\n       */\n      setupSystemColumn: function setupSystemColumn() {\n        datatable.dataSet = datatable.dataSet || []; // no records available\n\n        if (datatable.dataSet.length === 0) return;\n        var columns = options.columns;\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n\n            if (typeof column !== 'undefined') {\n              var value = $(td).text(); // enable column selector\n\n              if (typeof column.selector !== 'undefined' && column.selector !== false) {\n                // check if checkbox exist\n                if ($(td).find('.' + pfx + 'checkbox [type=\"checkbox\"]').length > 0) return;\n                $(td).addClass(pfx + 'datatable-cell-check'); // append checkbox\n\n                var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox-single').append($('<input/>').attr('type', 'checkbox').attr('value', value).on('click', function () {\n                  if ($(this).is(':checked')) {\n                    // add checkbox active row class\n                    Plugin.setActive(this);\n                  } else {\n                    // add checkbox active row class\n                    Plugin.setInactive(this);\n                  }\n                })).append('&nbsp;<span></span>'); // checkbox selector has outline style\n\n                if (typeof column.selector[\"class\"] !== 'undefined') {\n                  $(chk).addClass(column.selector[\"class\"]);\n                }\n\n                $(td).children().html(chk);\n              } // enable column subtable toggle\n\n\n              if (typeof column.subtable !== 'undefined' && column.subtable) {\n                // check if subtable toggle exist\n                if ($(td).find('.' + pfx + 'datatable-toggle-subtable').length > 0) return; // append subtable toggle\n\n                $(td).children().html($('<a/>').addClass(pfx + 'datatable-toggle-subtable').attr('href', '#').attr('data-value', value).append($('<i/>').addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));\n              }\n            }\n          });\n        }); // init checkbox for header/footer\n\n        var initCheckbox = function initCheckbox(tr) {\n          // get column settings by field\n          var column = $.grep(columns, function (n, i) {\n            return typeof n.selector !== 'undefined' && n.selector !== false;\n          })[0];\n\n          if (typeof column !== 'undefined') {\n            // enable column selector\n            if (typeof column.selector !== 'undefined' && column.selector !== false) {\n              var td = $(tr).find('[data-field=\"' + column.field + '\"]'); // check if checkbox exist\n\n              if ($(td).find('.' + pfx + 'checkbox [type=\"checkbox\"]').length > 0) return;\n              $(td).addClass(pfx + 'datatable-cell-check'); // append checkbox\n\n              var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox-single ' + pfx + 'checkbox-all').append($('<input/>').attr('type', 'checkbox').on('click', function () {\n                if ($(this).is(':checked')) {\n                  Plugin.setActiveAll(true);\n                } else {\n                  Plugin.setActiveAll(false);\n                }\n              })).append('&nbsp;<span></span>'); // checkbox selector has outline style\n\n              if (typeof column.selector[\"class\"] !== 'undefined') {\n                $(chk).addClass(column.selector[\"class\"]);\n              }\n\n              $(td).children().html(chk);\n            }\n          }\n        };\n\n        if (options.layout.header) {\n          initCheckbox($(datatable.tableHead).find('.' + pfx + 'datatable-row').first());\n        }\n\n        if (options.layout.footer) {\n          initCheckbox($(datatable.tableFoot).find('.' + pfx + 'datatable-row').first());\n        }\n      },\n      maxWidthList: {},\n\n      /**\r\n       * Adjust width to match container size\r\n       */\n      adjustCellsWidth: function adjustCellsWidth() {\n        // get table width\n        var containerWidth = $(datatable.tableBody).innerWidth() - Plugin.iconOffset; // get total number of columns\n\n        var columns = $(datatable.tableHead).find('.' + pfx + 'datatable-row:first-child').find('.' + pfx + 'datatable-cell'). // exclude expand icon\n        not('.' + pfx + 'datatable-toggle-detail').not(':hidden').length;\n\n        if (columns > 0) {\n          //  remove reserved sort icon width\n          containerWidth = containerWidth - Plugin.iconOffset * columns;\n          var minWidth = Math.floor(containerWidth / columns); // minimum width\n\n          if (minWidth <= Plugin.cellOffset) {\n            minWidth = Plugin.cellOffset;\n          }\n\n          $(datatable.table).find('.' + pfx + 'datatable-row').find('.' + pfx + 'datatable-cell'). // exclude expand icon\n          not('.' + pfx + 'datatable-toggle-detail').not(':hidden').each(function (tdi, td) {\n            var width = minWidth;\n            var dataWidth = $(td).data('width');\n\n            if (typeof dataWidth !== 'undefined') {\n              if (dataWidth === 'auto') {\n                var field = $(td).data('field');\n\n                if (Plugin.maxWidthList[field]) {\n                  width = Plugin.maxWidthList[field];\n                } else {\n                  var cells = $(datatable.table).find('.' + pfx + 'datatable-cell[data-field=\"' + field + '\"]');\n                  width = Plugin.maxWidthList[field] = Math.max.apply(null, $(cells).map(function () {\n                    return $(this).outerWidth();\n                  }).get());\n                }\n              } else {\n                width = dataWidth;\n              }\n            }\n\n            $(td).children().css('width', Math.ceil(width));\n          });\n        }\n\n        return datatable;\n      },\n\n      /**\r\n       * Adjust height to match container size\r\n       */\n      adjustCellsHeight: function adjustCellsHeight() {\n        $.each($(datatable.table).children(), function (part, tablePart) {\n          var totalRows = $(tablePart).find('.' + pfx + 'datatable-row').first().parent().find('.' + pfx + 'datatable-row').length;\n\n          for (var i = 1; i <= totalRows; i++) {\n            var rows = $(tablePart).find('.' + pfx + 'datatable-row:nth-child(' + i + ')');\n\n            if ($(rows).length > 0) {\n              var maxHeight = Math.max.apply(null, $(rows).map(function () {\n                return $(this).outerHeight();\n              }).get());\n              $(rows).css('height', Math.ceil(maxHeight));\n            }\n          }\n        });\n      },\n\n      /**\r\n       * Setup table DOM and classes\r\n       */\n      setupDOM: function setupDOM(table) {\n        // set table classes\n        $(table).find('> thead').addClass(pfx + 'datatable-head');\n        $(table).find('> tbody').addClass(pfx + 'datatable-body');\n        $(table).find('> tfoot').addClass(pfx + 'datatable-foot');\n        $(table).find('tr').addClass(pfx + 'datatable-row');\n        $(table).find('tr > th, tr > td').addClass(pfx + 'datatable-cell');\n        $(table).find('tr > th, tr > td').each(function (i, td) {\n          if ($(td).find('span').length === 0) {\n            $(td).wrapInner($('<span/>').css('width', Plugin.cellOffset));\n          }\n        });\n      },\n\n      /**\r\n       * Default scrollbar\r\n       * @returns {{tableLocked: null, init: init, onScrolling:\r\n       *     onScrolling}}\r\n       */\n      scrollbar: function scrollbar() {\n        var scroll = {\n          scrollable: null,\n          tableLocked: null,\n          initPosition: null,\n          init: function init() {\n            var screen = util.getViewPort().width; // setup scrollable datatable\n\n            if (options.layout.scroll) {\n              // add scrollable datatable class\n              $(datatable.wrap).addClass(pfx + 'datatable-scroll');\n              var scrollable = $(datatable.tableBody).find('.' + pfx + 'datatable-lock-scroll'); // check if scrollable area have rows\n\n              if ($(scrollable).find('.' + pfx + 'datatable-row').length > 0 && $(scrollable).length > 0) {\n                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n                scroll.tableLocked = $(datatable.tableBody).find('.' + pfx + 'datatable-lock:not(.' + pfx + 'datatable-lock-scroll)');\n\n                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {\n                  scroll.initCustomScrollbar(scrollable[0]);\n                } else {\n                  scroll.initDefaultScrollbar(scrollable);\n                }\n              } else if ($(datatable.tableBody).find('.' + pfx + 'datatable-row').length > 0) {\n                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable-row');\n                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable-row');\n\n                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {\n                  scroll.initCustomScrollbar(datatable.tableBody);\n                } else {\n                  scroll.initDefaultScrollbar(datatable.tableBody);\n                }\n              }\n            }\n          },\n          initDefaultScrollbar: function initDefaultScrollbar(scrollable) {\n            // get initial scroll position\n            scroll.initPosition = $(scrollable).scrollLeft();\n            $(scrollable).css('overflow-y', 'auto').off().on('scroll', scroll.onScrolling);\n            $(scrollable).css('overflow-x', 'auto');\n          },\n          onScrolling: function onScrolling(e) {\n            var left = $(this).scrollLeft();\n            var top = $(this).scrollTop();\n\n            if (util.isRTL()) {\n              // deduct initial position for RTL\n              left = left - scroll.initPosition;\n            }\n\n            $(scroll.scrollHead).css('left', -left);\n            $(scroll.scrollFoot).css('left', -left);\n            $(scroll.tableLocked).each(function (i, table) {\n              if (Plugin.isLocked()) {\n                // scrollbar offset\n                top -= 1;\n              }\n\n              $(table).css('top', -top);\n            });\n          },\n          initCustomScrollbar: function initCustomScrollbar(scrollable) {\n            scroll.scrollable = scrollable; // create a new instance for table body with scrollbar\n\n            Plugin.initScrollbar(scrollable); // get initial scroll position\n\n            scroll.initPosition = $(scrollable).scrollLeft();\n            $(scrollable).off().on('scroll', scroll.onScrolling);\n          }\n        };\n        scroll.init();\n        return scroll;\n      },\n\n      /**\r\n       * Init custom scrollbar and reset position\r\n       * @param element\r\n       * @param options\r\n       */\n      initScrollbar: function initScrollbar(element, options) {\n        if (!element || !element.nodeName) {\n          return;\n        }\n\n        $(datatable.tableBody).css('overflow', '');\n        var ps = $(element).data('ps');\n\n        if (util.hasClass(element, 'ps') && typeof ps !== 'undefined') {\n          ps.update();\n        } else {\n          ps = new PerfectScrollbar(element, Object.assign({}, {\n            wheelSpeed: 0.5,\n            swipeEasing: true,\n            // wheelPropagation: false,\n            minScrollbarLength: 40,\n            maxScrollbarLength: 300,\n            suppressScrollX: Plugin.getOption('rows.autoHide') && !Plugin.isLocked()\n          }, options));\n          $(element).data('ps', ps);\n        } // reset perfect scrollbar on resize\n\n\n        $(window).resize(function () {\n          ps.update();\n        });\n      },\n\n      /**\r\n       * Set column title from options.columns settings\r\n       */\n      setHeadTitle: function setHeadTitle(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableHead;\n        tablePart = $(tablePart)[0];\n        var columns = options.columns;\n        var row = tablePart.getElementsByTagName('tr')[0];\n        var ths = tablePart.getElementsByTagName('td');\n\n        if (typeof row === 'undefined') {\n          row = document.createElement('tr');\n          tablePart.appendChild(row);\n        }\n\n        $.each(columns, function (i, column) {\n          var th = ths[i];\n\n          if (typeof th === 'undefined') {\n            th = document.createElement('th');\n            row.appendChild(th);\n          } // set column title\n\n\n          if (typeof column['title'] !== 'undefined') {\n            th.innerHTML = column.title;\n            th.setAttribute('data-field', column.field);\n            util.addClass(th, column[\"class\"]); // set disable autoHide or force enable\n\n            if (typeof column.autoHide !== 'undefined') {\n              if (column.autoHide !== true) {\n                th.setAttribute('data-autohide-disabled', column.autoHide);\n              } else {\n                th.setAttribute('data-autohide-enabled', column.autoHide);\n              }\n            }\n\n            $(th).data(column);\n          } // set header attr option\n\n\n          if (typeof column.attr !== 'undefined') {\n            $.each(column.attr, function (key, val) {\n              th.setAttribute(key, val);\n            });\n          } // apply text align to thead/tfoot\n\n\n          if (typeof column.textAlign !== 'undefined') {\n            var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';\n            util.addClass(th, align);\n          }\n        });\n        Plugin.setupDOM(tablePart);\n      },\n\n      /**\r\n       * Initiate to get remote or local data via ajax\r\n       */\n      dataRender: function dataRender(action) {\n        $(datatable.table).siblings('.' + pfx + 'datatable-pager').removeClass(pfx + 'datatable-paging-loaded');\n\n        var buildMeta = function buildMeta() {\n          datatable.dataSet = datatable.dataSet || [];\n          Plugin.localDataUpdate(); // local pagination meta\n\n          var meta = Plugin.getDataSourceParam('pagination');\n\n          if (meta.perpage === 0) {\n            meta.perpage = options.data.pageSize || 10;\n          }\n\n          meta.total = datatable.dataSet.length;\n          var start = Math.max(meta.perpage * (meta.page - 1), 0);\n          var end = Math.min(start + meta.perpage, meta.total);\n          datatable.dataSet = $(datatable.dataSet).slice(start, end);\n          return meta;\n        };\n\n        var afterGetData = function afterGetData(result) {\n          var localPagingCallback = function localPagingCallback(ctx, meta) {\n            if (!$(ctx.pager).hasClass(pfx + 'datatable-paging-loaded')) {\n              $(ctx.pager).remove();\n              ctx.init(meta);\n            }\n\n            $(ctx.pager).off().on(pfx + 'datatable-on-goto-page', function (e) {\n              $(ctx.pager).remove();\n              ctx.init(meta);\n            });\n            var start = Math.max(meta.perpage * (meta.page - 1), 0);\n            var end = Math.min(start + meta.perpage, meta.total);\n            Plugin.localDataUpdate();\n            datatable.dataSet = $(datatable.dataSet).slice(start, end); // insert data into table content\n\n            Plugin.insertData();\n          };\n\n          $(datatable.wrap).removeClass(pfx + 'datatable-error'); // pagination enabled\n\n          if (options.pagination) {\n            if (options.data.serverPaging && options.data.type !== 'local') {\n              // server pagination\n              var serverMeta = Plugin.getObject('meta', result || null);\n\n              if (serverMeta !== null) {\n                Plugin.pagingObject = Plugin.paging(serverMeta);\n              } else {\n                // no meta object from server response, fallback to local pagination\n                Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);\n              }\n            } else {\n              // local pagination can be used by remote data also\n              Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);\n            }\n          } else {\n            // pagination is disabled\n            Plugin.localDataUpdate();\n          } // insert data into table content\n\n\n          Plugin.insertData();\n        }; // get local datasource\n\n\n        if (options.data.type === 'local' // for remote json datasource\n        // || typeof options.data.source.read === 'undefined' && datatable.dataSet !== null\n        // for remote datasource, server sorting is disabled and data already received from remote\n        || options.data.serverSorting === false && action === 'sort' || options.data.serverFiltering === false && action === 'search') {\n          setTimeout(function () {\n            Plugin.setAutoColumns();\n            afterGetData();\n          });\n          return;\n        } // getting data from remote only\n\n\n        Plugin.getData().done(afterGetData);\n      },\n\n      /**\r\n       * Process ajax data\r\n       */\n      insertData: function insertData() {\n        datatable.dataSet = datatable.dataSet || [];\n        var params = Plugin.getDataSourceParam(); // get row attributes\n\n        var pagination = params.pagination;\n        var start = (Math.max(pagination.page, 1) - 1) * pagination.perpage;\n        var end = Math.min(pagination.page, pagination.pages) * pagination.perpage;\n        var rowProps = {};\n\n        if (typeof options.data.attr.rowProps !== 'undefined' && options.data.attr.rowProps.length) {\n          rowProps = options.data.attr.rowProps.slice(start, end);\n        }\n\n        var tableBody = document.createElement('tbody');\n        tableBody.style.visibility = 'hidden';\n        var colLength = options.columns.length;\n        $.each(datatable.dataSet, function (rowIndex, row) {\n          var tr = document.createElement('tr');\n          tr.setAttribute('data-row', rowIndex); // keep data object to row\n\n          $(tr).data('obj', row);\n\n          if (typeof rowProps[rowIndex] !== 'undefined') {\n            $.each(rowProps[rowIndex], function () {\n              tr.setAttribute(this.name, this.value);\n            });\n          }\n\n          var cellIndex = 0;\n          var tds = [];\n\n          for (var a = 0; a < colLength; a += 1) {\n            var column = options.columns[a];\n            var classes = []; // add sorted class to cells\n\n            if (Plugin.getObject('sort.field', params) === column.field) {\n              classes.push(pfx + 'datatable-cell-sorted');\n            } // apply text align\n\n\n            if (typeof column.textAlign !== 'undefined') {\n              var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';\n              classes.push(align);\n            } // var classAttr = '';\n\n\n            if (typeof column[\"class\"] !== 'undefined') {\n              classes.push(column[\"class\"]);\n            }\n\n            var td = document.createElement('td');\n            util.addClass(td, classes.join(' '));\n            td.setAttribute('data-field', column.field); // set disable autoHide or force enable\n\n            if (typeof column.autoHide !== 'undefined') {\n              if (column.autoHide !== true) {\n                td.setAttribute('data-autohide-disabled', column.autoHide);\n              } else {\n                td.setAttribute('data-autohide-enabled', column.autoHide);\n              }\n            }\n\n            td.innerHTML = Plugin.getObject(column.field, row);\n            td.setAttribute('aria-label', Plugin.getObject(column.field, row));\n            tr.appendChild(td);\n          }\n\n          tableBody.appendChild(tr);\n        }); // display no records message\n\n        if (datatable.dataSet.length === 0) {\n          var errorSpan = document.createElement('span');\n          util.addClass(errorSpan, pfx + 'datatable-error');\n          errorSpan.innerHTML = Plugin.getOption('translate.records.noRecords');\n          tableBody.appendChild(errorSpan);\n          $(datatable.wrap).addClass(pfx + 'datatable-error ' + pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        } // replace existing table body\n\n\n        $(datatable.tableBody).replaceWith(tableBody);\n        datatable.tableBody = tableBody; // layout update\n\n        Plugin.setupDOM(datatable.table);\n        Plugin.setupCellField([datatable.tableBody]);\n        Plugin.setupTemplateCell(datatable.tableBody);\n        Plugin.layoutUpdate();\n      },\n      updateTableComponents: function updateTableComponents() {\n        datatable.tableHead = $(datatable.table).children('thead').get(0);\n        datatable.tableBody = $(datatable.table).children('tbody').get(0);\n        datatable.tableFoot = $(datatable.table).children('tfoot').get(0);\n      },\n\n      /**\r\n       * Call ajax for raw JSON data\r\n       */\n      getData: function getData() {\n        // Plugin.spinnerCallback(true);\n        var ajaxParams = {\n          dataType: 'json',\n          method: 'POST',\n          data: {},\n          timeout: Plugin.getOption('data.source.read.timeout') || 30000\n        };\n\n        if (options.data.type === 'local') {\n          ajaxParams.url = options.data.source;\n        }\n\n        if (options.data.type === 'remote') {\n          var data = Plugin.getDataSourceParam(); // remove if server params is not enabled\n\n          if (!Plugin.getOption('data.serverPaging')) {\n            delete data['pagination'];\n          }\n\n          if (!Plugin.getOption('data.serverSorting')) {\n            delete data['sort'];\n          }\n\n          ajaxParams.data = $.extend({}, ajaxParams.data, Plugin.getOption('data.source.read.params'), data);\n          ajaxParams = $.extend({}, ajaxParams, Plugin.getOption('data.source.read'));\n          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source.read');\n          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source'); // ajaxParams.data = $.extend(ajaxParams.data, data.pagination);\n        }\n\n        return $.ajax(ajaxParams).done(function (response, textStatus, jqXHR) {\n          datatable.lastResponse = response; // extendible data map callback for custom datasource\n\n          datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(response);\n          Plugin.setAutoColumns();\n          $(datatable).trigger(pfx + 'datatable-on-ajax-done', [datatable.dataSet]);\n        }).fail(function (jqXHR, textStatus, errorThrown) {\n          $(datatable).trigger(pfx + 'datatable-on-ajax-fail', [jqXHR]);\n          $(datatable.tableBody).html($('<span/>').addClass(pfx + 'datatable-error').html(Plugin.getOption('translate.records.noRecords')));\n          $(datatable.wrap).addClass(pfx + 'datatable-error ' + pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        }).always(function () {});\n      },\n\n      /**\r\n       * Pagination object\r\n       * @param meta if null, local pagination, otherwise remote\r\n       *     pagination\r\n       * @param callback for update data when navigating page\r\n       */\n      paging: function paging(meta, callback) {\n        var pg = {\n          meta: null,\n          pager: null,\n          paginateEvent: null,\n          pagerLayout: {\n            pagination: null,\n            info: null\n          },\n          callback: null,\n          init: function init(meta) {\n            pg.meta = meta; // parse pagination meta to integer\n\n            pg.meta.page = parseInt(pg.meta.page);\n            pg.meta.pages = parseInt(pg.meta.pages);\n            pg.meta.perpage = parseInt(pg.meta.perpage);\n            pg.meta.total = parseInt(pg.meta.total); // always recount total pages\n\n            pg.meta.pages = Math.max(Math.ceil(pg.meta.total / pg.meta.perpage), 1); // current page must be not over than total pages\n\n            if (pg.meta.page > pg.meta.pages) pg.meta.page = pg.meta.pages; // set unique event name between tables\n\n            pg.paginateEvent = Plugin.getTablePrefix('paging');\n            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager');\n            if ($(pg.pager).hasClass(pfx + 'datatable-paging-loaded')) return; // if class .'+pfx+'datatable-paging-loaded not exist, recreate pagination\n\n            $(pg.pager).remove(); // if no pages available\n\n            if (pg.meta.pages === 0) return; // update datasource params\n\n            Plugin.setDataSourceParam('pagination', {\n              page: pg.meta.page,\n              pages: pg.meta.pages,\n              perpage: pg.meta.perpage,\n              total: pg.meta.total\n            }); // default callback function, contains remote pagination handler\n\n            pg.callback = pg.serverCallback; // custom callback function\n\n            if (typeof callback === 'function') pg.callback = callback;\n            pg.addPaginateEvent();\n            pg.populate();\n            pg.meta.page = Math.max(pg.meta.page || 1, pg.meta.page);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.pagingBreakpoint.call();\n            $(window).resize(pg.pagingBreakpoint);\n          },\n          serverCallback: function serverCallback(ctx, meta) {\n            Plugin.dataRender();\n          },\n          populate: function populate() {\n            datatable.dataSet = datatable.dataSet || []; // no records available\n\n            if (datatable.dataSet.length === 0) return;\n            var icons = Plugin.getOption('layout.icons.pagination');\n            var title = Plugin.getOption('translate.toolbar.pagination.items.default'); // pager root element\n\n            pg.pager = $('<div/>').addClass(pfx + 'datatable-pager ' + pfx + 'datatable-paging-loaded'); // numbering links\n\n            var pagerNumber = $('<ul/>').addClass(pfx + 'datatable-pager-nav my-2 mb-sm-0');\n            pg.pagerLayout['pagination'] = pagerNumber; // pager first/previous button\n\n            $('<li/>').append($('<a/>').attr('title', title.first).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-first').append($('<i/>').addClass(icons.first)).on('click', pg.gotoMorePage).attr('data-page', 1)).appendTo(pagerNumber);\n            $('<li/>').append($('<a/>').attr('title', title.prev).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-prev').append($('<i/>').addClass(icons.prev)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);\n            $('<li/>').append($('<input/>').attr('type', 'text').addClass(pfx + 'datatable-pager-input form-control').attr('title', title.input).on('keyup', function () {\n              // on keyup update [data-page]\n              $(this).attr('data-page', Math.abs($(this).val()));\n            }).on('keypress', function (e) {\n              // on keypressed enter button\n              if (e.which === 13) pg.gotoMorePage(e);\n            })).appendTo(pagerNumber);\n            var pagesNumber = Plugin.getOption('toolbar.items.pagination.pages.desktop.pagesNumber');\n            var end = Math.ceil(pg.meta.page / pagesNumber) * pagesNumber;\n            var start = end - pagesNumber;\n\n            if (end > pg.meta.pages) {\n              end = pg.meta.pages;\n            } // keep pagination 1 if there is no records\n\n\n            if (start < 0) {\n              start = 0;\n            }\n\n            for (var x = start; x < (end || 1); x++) {\n              var pageNumber = x + 1;\n              $('<li/>').append($('<a/>').addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-number').text(pageNumber).attr('data-page', pageNumber).attr('title', pageNumber).on('click', pg.gotoPage)).appendTo(pagerNumber);\n            } // pager next/last button\n\n\n            $('<li/>').append($('<a/>').attr('title', title.next).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-next').append($('<i/>').addClass(icons.next)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);\n            $('<li/>').append($('<a/>').attr('title', title.last).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-last').append($('<i/>').addClass(icons.last)).on('click', pg.gotoMorePage).attr('data-page', pg.meta.pages)).appendTo(pagerNumber); // page info\n\n            if (Plugin.getOption('toolbar.items.info')) {\n              pg.pagerLayout['info'] = $('<div/>').addClass(pfx + 'datatable-pager-info my-2 mb-sm-0').append($('<span/>').addClass(pfx + 'datatable-pager-detail'));\n            }\n\n            $.each(Plugin.getOption('toolbar.layout'), function (i, layout) {\n              $(pg.pagerLayout[layout]).appendTo(pg.pager);\n            }); // page size select\n\n            var pageSizeSelect = $('<select/>').addClass('selectpicker ' + pfx + 'datatable-pager-size').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select')).attr('data-width', '60px').attr('data-container', 'body').val(pg.meta.perpage).on('change', pg.updatePerpage).prependTo(pg.pagerLayout['info']);\n            var pageSizes = Plugin.getOption('toolbar.items.pagination.pageSizeSelect'); // default value here, to fix override option by user\n\n            if (pageSizes.length == 0) pageSizes = [5, 10, 20, 30, 50, 100];\n            $.each(pageSizes, function (i, size) {\n              var display = size;\n              if (size === -1) display = Plugin.getOption('translate.toolbar.pagination.items.default.all');\n              $('<option/>').attr('value', size).html(display).appendTo(pageSizeSelect);\n            }); // init selectpicker to dropdown\n\n            $(datatable).ready(function () {\n              $('.selectpicker').selectpicker().on('hide.bs.select', function () {\n                // fix dropup arrow icon on hide\n                $(this).closest('.bootstrap-select').removeClass('dropup');\n              }).siblings('.dropdown-toggle').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select'));\n            });\n            pg.paste();\n          },\n          paste: function paste() {\n            // insert pagination based on placement position, top|bottom\n            $.each($.unique(Plugin.getOption('toolbar.placement')), function (i, position) {\n              if (position === 'bottom') {\n                $(pg.pager).clone(true).insertAfter(datatable.table);\n              }\n\n              if (position === 'top') {\n                // pager top need some extra space\n                $(pg.pager).clone(true).addClass(pfx + 'datatable-pager-top').insertBefore(datatable.table);\n              }\n            });\n          },\n          gotoMorePage: function gotoMorePage(e) {\n            e.preventDefault(); // $(this) is a link of .'+pfx+'datatable-pager-link\n\n            if ($(this).attr('disabled') === 'disabled') return false;\n            var page = $(this).attr('data-page'); // event from text input\n\n            if (typeof page === 'undefined') {\n              page = $(e.target).attr('data-page');\n            }\n\n            pg.openPage(parseInt(page));\n            return false;\n          },\n          gotoPage: function gotoPage(e) {\n            e.preventDefault(); // prevent from click same page number\n\n            if ($(this).hasClass(pfx + 'datatable-pager-link-active')) return;\n            pg.openPage(parseInt($(this).data('page')));\n          },\n          openPage: function openPage(page) {\n            // currentPage is 1-based index\n            pg.meta.page = parseInt(page);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.callback(pg, pg.meta); // update page callback function\n\n            $(pg.pager).trigger(pfx + 'datatable-on-goto-page', pg.meta);\n          },\n          updatePerpage: function updatePerpage(e) {\n            e.preventDefault(); // if (Plugin.getOption('layout.height') === null) {\n            // fix white space, when perpage is set from many records to less records\n            // $('html, body').animate({scrollTop: $(datatable).position().top});\n            // }\n            // hide dropdown after select\n\n            $(this).selectpicker('toggle');\n            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager').removeClass(pfx + 'datatable-paging-loaded'); // on change select page size\n\n            if (e.originalEvent) {\n              pg.meta.perpage = parseInt($(this).val());\n            }\n\n            $(pg.pager).find('select.' + pfx + 'datatable-pager-size').val(pg.meta.perpage).attr('data-selected', pg.meta.perpage); // update datasource params\n\n            Plugin.setDataSourceParam('pagination', {\n              page: pg.meta.page,\n              pages: pg.meta.pages,\n              perpage: pg.meta.perpage,\n              total: pg.meta.total\n            }); // update page callback function\n\n            $(pg.pager).trigger(pfx + 'datatable-on-update-perpage', pg.meta);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.callback(pg, pg.meta); // update pagination info\n\n            pg.updateInfo.call();\n          },\n          addPaginateEvent: function addPaginateEvent(e) {\n            // pagination event\n            $(datatable).off(pg.paginateEvent).on(pg.paginateEvent, function (e, meta) {\n              Plugin.spinnerCallback(true);\n              pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager');\n              var pagerNumber = $(pg.pager).find('.' + pfx + 'datatable-pager-nav'); // set sync active page class\n\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-active').removeClass(pfx + 'datatable-pager-link-active');\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-number[data-page=\"' + meta.page + '\"]').addClass(pfx + 'datatable-pager-link-active'); // set next and previous link page number\n\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-prev').attr('data-page', Math.max(meta.page - 1, 1));\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-next').attr('data-page', Math.min(meta.page + 1, meta.pages)); // current page input value sync\n\n              $(pg.pager).each(function () {\n                $(this).find('.' + pfx + 'datatable-pager-input[type=\"text\"]').prop('value', meta.page);\n              }); // if only 1 page, should hide page?\n              // $(pg.pager).find('.' + pfx + 'datatable-pager-nav').show();\n              // if (meta.pages <= 1) {\n              // \t// hide pager if has 1 page\n              // \t$(pg.pager).find('.' + pfx + 'datatable-pager-nav').hide();\n              // }\n              // update datasource params\n\n              Plugin.setDataSourceParam('pagination', {\n                page: pg.meta.page,\n                pages: pg.meta.pages,\n                perpage: pg.meta.perpage,\n                total: pg.meta.total\n              });\n              $(pg.pager).find('select.' + pfx + 'datatable-pager-size').val(meta.perpage).attr('data-selected', meta.perpage); // clear active rows\n\n              $(datatable.table).find('.' + pfx + 'checkbox > [type=\"checkbox\"]').prop('checked', false);\n              $(datatable.table).find('.' + pfx + 'datatable-row-active').removeClass(pfx + 'datatable-row-active');\n              pg.updateInfo.call();\n              pg.pagingBreakpoint.call(); // Plugin.resetScroll();\n            });\n          },\n          updateInfo: function updateInfo() {\n            var start = Math.max(pg.meta.perpage * (pg.meta.page - 1) + 1, 1);\n            var end = Math.min(start + pg.meta.perpage - 1, pg.meta.total); // page info update\n\n            $(pg.pager).find('.' + pfx + 'datatable-pager-info').find('.' + pfx + 'datatable-pager-detail').html(Plugin.dataPlaceholder(Plugin.getOption('translate.toolbar.pagination.items.info'), {\n              // set start page 0 if the is no records. eg. Showing 0 - 0 of 0\n              start: pg.meta.total === 0 ? 0 : start,\n              end: pg.meta.perpage === -1 ? pg.meta.total : end,\n              pageSize: pg.meta.perpage === -1 || pg.meta.perpage >= pg.meta.total ? pg.meta.total : pg.meta.perpage,\n              total: pg.meta.total\n            }));\n          },\n\n          /**\r\n           * Update pagination layout breakpoint\r\n           */\n          pagingBreakpoint: function pagingBreakpoint() {\n            // keep page links reference\n            var pagerNumber = $(datatable.table).siblings('.' + pfx + 'datatable-pager').find('.' + pfx + 'datatable-pager-nav');\n            if ($(pagerNumber).length === 0) return;\n            var currentPage = Plugin.getCurrentPage();\n            var pagerInput = $(pagerNumber).find('.' + pfx + 'datatable-pager-input').closest('li'); // reset\n\n            $(pagerNumber).find('li').show(); // pagination update\n\n            $.each(Plugin.getOption('toolbar.items.pagination.pages'), function (mode, option) {\n              if (util.isInResponsiveRange(mode)) {\n                switch (mode) {\n                  case 'desktop':\n                  case 'tablet':\n                    var end = Math.ceil(currentPage / option.pagesNumber) * option.pagesNumber;\n                    var start = end - option.pagesNumber;\n                    $(pagerInput).hide();\n                    pg.meta = Plugin.getDataSourceParam('pagination');\n                    pg.paginationUpdate();\n                    break;\n\n                  case 'mobile':\n                    $(pagerInput).show();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-more-prev').closest('li').hide();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-more-next').closest('li').hide();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-number').closest('li').hide();\n                    break;\n                }\n\n                return false;\n              }\n            });\n          },\n\n          /**\r\n           * Update pagination number and button display\r\n           */\n          paginationUpdate: function paginationUpdate() {\n            var pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager').find('.' + pfx + 'datatable-pager-nav'),\n                pagerMorePrev = $(pager).find('.' + pfx + 'datatable-pager-link-more-prev'),\n                pagerMoreNext = $(pager).find('.' + pfx + 'datatable-pager-link-more-next'),\n                pagerFirst = $(pager).find('.' + pfx + 'datatable-pager-link-first'),\n                pagerPrev = $(pager).find('.' + pfx + 'datatable-pager-link-prev'),\n                pagerNext = $(pager).find('.' + pfx + 'datatable-pager-link-next'),\n                pagerLast = $(pager).find('.' + pfx + 'datatable-pager-link-last'); // get visible page\n\n            var pagerNumber = $(pager).find('.' + pfx + 'datatable-pager-link-number'); // get page before of first visible\n\n            var morePrevPage = Math.max($(pagerNumber).first().data('page') - 1, 1);\n            $(pagerMorePrev).each(function (i, prev) {\n              $(prev).attr('data-page', morePrevPage);\n            }); // show/hide <li>\n\n            if (morePrevPage === 1) {\n              $(pagerMorePrev).parent().hide();\n            } else {\n              $(pagerMorePrev).parent().show();\n            } // get page after of last visible\n\n\n            var moreNextPage = Math.min($(pagerNumber).last().data('page') + 1, pg.meta.pages);\n            $(pagerMoreNext).each(function (i, prev) {\n              $(pagerMoreNext).attr('data-page', moreNextPage).show();\n            }); // show/hide <li>\n\n            if (moreNextPage === pg.meta.pages // missing dot fix when last hidden page is one left\n            && moreNextPage === $(pagerNumber).last().data('page')) {\n              $(pagerMoreNext).parent().hide();\n            } else {\n              $(pagerMoreNext).parent().show();\n            } // begin/end of pages\n\n\n            if (pg.meta.page === 1) {\n              $(pagerFirst).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerPrev).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n            } else {\n              $(pagerFirst).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerPrev).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n            }\n\n            if (pg.meta.page === pg.meta.pages) {\n              $(pagerNext).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerLast).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n            } else {\n              $(pagerNext).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerLast).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n            } // display more buttons\n\n\n            var nav = Plugin.getOption('toolbar.items.pagination.navigation');\n            if (!nav.first) $(pagerFirst).remove();\n            if (!nav.prev) $(pagerPrev).remove();\n            if (!nav.next) $(pagerNext).remove();\n            if (!nav.last) $(pagerLast).remove();\n\n            if (!nav.more) {\n              $(pagerMorePrev).remove();\n              $(pagerMoreNext).remove();\n            }\n          }\n        };\n        pg.init(meta);\n        return pg;\n      },\n\n      /**\r\n       * Hide/show table cell defined by\r\n       * options[columns][i][responsive][visible/hidden]\r\n       */\n      columnHide: function columnHide() {\n        var screen = util.getViewPort().width; // foreach columns setting\n\n        $.each(options.columns, function (i, column) {\n          if (typeof column.responsive !== 'undefined' || typeof column.visible !== 'undefined') {\n            var field = column.field;\n            var tds = $.grep($(datatable.table).find('.' + pfx + 'datatable-cell'), function (n, i) {\n              return field === $(n).data('field');\n            });\n            setTimeout(function () {\n              // hide by force\n              if (Plugin.getObject('visible', column) === false) {\n                $(tds).hide();\n              } else {\n                // show/hide by responsive breakpoint\n                if (util.getBreakpoint(Plugin.getObject('responsive.hidden', column)) >= screen) {\n                  $(tds).hide();\n                } else {\n                  $(tds).show();\n                }\n\n                if (util.getBreakpoint(Plugin.getObject('responsive.visible', column)) <= screen) {\n                  $(tds).show();\n                } else {\n                  $(tds).hide();\n                }\n              }\n            });\n          }\n        });\n      },\n\n      /**\r\n       * Setup sub datatable\r\n       */\n      setupSubDatatable: function setupSubDatatable() {\n        var subTableCallback = Plugin.getOption('detail.content');\n        if (typeof subTableCallback !== 'function') return; // subtable already exist\n\n        if ($(datatable.table).find('.' + pfx + 'datatable-subtable').length > 0) return;\n        $(datatable.wrap).addClass(pfx + 'datatable-subtable');\n        options.columns[0]['subtable'] = true; // toggle on open sub table\n\n        var toggleSubTable = function toggleSubTable(e) {\n          e.preventDefault(); // get parent row of this subtable\n\n          var parentRow = $(this).closest('.' + pfx + 'datatable-row'); // get subtable row for sub table\n\n          var subTableRow = $(parentRow).next('.' + pfx + 'datatable-row-subtable');\n\n          if ($(subTableRow).length === 0) {\n            // prepare DOM for sub table, each <tr> as parent and add <tr> as child table\n            subTableRow = $('<tr/>').addClass(pfx + 'datatable-row-subtable ' + pfx + 'datatable-row-loading').hide().append($('<td/>').addClass(pfx + 'datatable-subtable').attr('colspan', Plugin.getTotalColumns()));\n            $(parentRow).after(subTableRow); // add class to even row\n\n            if ($(parentRow).hasClass(pfx + 'datatable-row-even')) {\n              $(subTableRow).addClass(pfx + 'datatable-row-subtable-even');\n            }\n          }\n\n          $(subTableRow).toggle();\n          var subTable = $(subTableRow).find('.' + pfx + 'datatable-subtable'); // get id from first column of parent row\n\n          var primaryKey = $(this).closest('[data-field]:first-child').find('.' + pfx + 'datatable-toggle-subtable').data('value');\n          var icon = $(this).find('i').removeAttr('class'); // prevent duplicate datatable init\n\n          if ($(parentRow).hasClass(pfx + 'datatable-row-subtable-expanded')) {\n            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.collapse')); // remove expand class from parent row\n\n            $(parentRow).removeClass(pfx + 'datatable-row-subtable-expanded'); // trigger event on collapse\n\n            $(datatable).trigger(pfx + 'datatable-on-collapse-subtable', [parentRow]);\n          } else {\n            // expand and run callback function\n            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.expand')); // add expand class to parent row\n\n            $(parentRow).addClass(pfx + 'datatable-row-subtable-expanded'); // trigger event on expand\n\n            $(datatable).trigger(pfx + 'datatable-on-expand-subtable', [parentRow]);\n          } // prevent duplicate datatable init\n\n\n          if ($(subTable).find('.' + pfx + 'datatable').length === 0) {\n            // get data by primary id\n            $.map(datatable.dataSet, function (n, i) {\n              // primary id must be at the first column, otherwise e.data will be undefined\n              if (primaryKey === n[options.columns[0].field]) {\n                e.data = n;\n                return true;\n              }\n\n              return false;\n            }); // deprecated in v5.0.6\n\n            e.detailCell = subTable;\n            e.parentRow = parentRow;\n            e.subTable = subTable; // run callback with event\n\n            subTableCallback(e);\n            $(subTable).children('.' + pfx + 'datatable').on(pfx + 'datatable-on-init', function (e) {\n              $(subTableRow).removeClass(pfx + 'datatable-row-loading');\n            });\n\n            if (Plugin.getOption('data.type') === 'local') {\n              $(subTableRow).removeClass(pfx + 'datatable-row-loading');\n            }\n          }\n        };\n\n        var columns = options.columns;\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n\n            if (typeof column !== 'undefined') {\n              var value = $(td).text(); // enable column subtable toggle\n\n              if (typeof column.subtable !== 'undefined' && column.subtable) {\n                // check if subtable toggle exist\n                if ($(td).find('.' + pfx + 'datatable-toggle-subtable').length > 0) return; // append subtable toggle\n\n                $(td).html($('<a/>').addClass(pfx + 'datatable-toggle-subtable').attr('href', '#').attr('data-value', value).attr('title', Plugin.getOption('detail.title')).on('click', toggleSubTable).append($('<i/>').css('width', $(td).data('width')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));\n              }\n            }\n          });\n        }); // $(datatable.tableHead).find('.'+pfx+'-datatable-row').first()\n      },\n\n      /**\r\n       * Datasource mapping callback\r\n       */\n      dataMapCallback: function dataMapCallback(raw) {\n        // static dataset array\n        var dataSet = raw; // dataset mapping callback\n\n        if (typeof Plugin.getOption('data.source.read.map') === 'function') {\n          return Plugin.getOption('data.source.read.map')(raw);\n        } else {\n          // default data mapping fallback\n          if (typeof raw !== 'undefined' && typeof raw.data !== 'undefined') {\n            dataSet = raw.data;\n          }\n        }\n\n        return dataSet;\n      },\n      isSpinning: false,\n\n      /**\r\n       * BlockUI spinner callback\r\n       * @param block\r\n       * @param target\r\n       */\n      spinnerCallback: function spinnerCallback(block, target) {\n        if (typeof target === 'undefined') target = datatable; // get spinner options\n\n        var spinnerOptions = Plugin.getOption('layout.spinner'); // spinner is disabled\n\n        if (typeof spinnerOptions === 'undefined' || !spinnerOptions) {\n          return;\n        }\n\n        if (block) {\n          if (!Plugin.isSpinning) {\n            if (typeof spinnerOptions.message !== 'undefined' && spinnerOptions.message === true) {\n              // use default spinner message from translation\n              spinnerOptions.message = Plugin.getOption('translate.records.processing');\n            }\n\n            Plugin.isSpinning = true;\n\n            if (typeof app !== 'undefined') {\n              app.block(target, spinnerOptions);\n            }\n          }\n        } else {\n          Plugin.isSpinning = false;\n\n          if (typeof app !== 'undefined') {\n            app.unblock(target);\n          }\n        }\n      },\n\n      /**\r\n       * Default sort callback function\r\n       * @param data\r\n       * @param sort\r\n       * @param column\r\n       * @returns {*|Array.<T>|{sort, field}|{asc, desc}}\r\n       */\n      sortCallback: function sortCallback(data, sort, column) {\n        var type = column['type'] || 'string';\n        var format = column['format'] || '';\n        var field = column['field'];\n        return $(data).sort(function (a, b) {\n          var aField = a[field];\n          var bField = b[field];\n\n          switch (type) {\n            case 'date':\n              if (typeof moment === 'undefined') {\n                throw new Error('Moment.js is required.');\n              }\n\n              var diff = moment(aField, format).diff(moment(bField, format));\n\n              if (sort === 'asc') {\n                return diff > 0 ? 1 : diff < 0 ? -1 : 0;\n              } else {\n                return diff < 0 ? 1 : diff > 0 ? -1 : 0;\n              }\n\n              break;\n\n            case 'number':\n              if (isNaN(parseFloat(aField)) && aField != null) {\n                aField = Number(aField.replace(/[^0-9\\.-]+/g, ''));\n              }\n\n              if (isNaN(parseFloat(bField)) && bField != null) {\n                bField = Number(bField.replace(/[^0-9\\.-]+/g, ''));\n              }\n\n              aField = parseFloat(aField);\n              bField = parseFloat(bField);\n\n              if (sort === 'asc') {\n                return aField > bField ? 1 : aField < bField ? -1 : 0;\n              } else {\n                return aField < bField ? 1 : aField > bField ? -1 : 0;\n              }\n\n              break;\n\n            case 'html':\n              return $(data).sort(function (a, b) {\n                // get the text only from html\n                aField = $(a[field]).text();\n                bField = $(b[field]).text(); // sort\n\n                if (sort === 'asc') {\n                  return aField > bField ? 1 : aField < bField ? -1 : 0;\n                } else {\n                  return aField < bField ? 1 : aField > bField ? -1 : 0;\n                }\n              });\n              break;\n\n            case 'string':\n            default:\n              if (sort === 'asc') {\n                return aField > bField ? 1 : aField < bField ? -1 : 0;\n              } else {\n                return aField < bField ? 1 : aField > bField ? -1 : 0;\n              }\n\n              break;\n          }\n        });\n      },\n\n      /**\r\n       * Custom debug log\r\n       * @param text\r\n       * @param obj\r\n       */\n      log: function log(text, obj) {\n        if (typeof obj === 'undefined') obj = '';\n\n        if (datatable.debug) {\n          console.log(text, obj);\n        }\n      },\n\n      /**\r\n       * Auto hide columnds overflow in row\r\n       */\n      autoHide: function autoHide() {\n        var hiddenExist = false; // force hide enabled\n\n        var hidDefault = $(datatable.table).find('[data-autohide-enabled]');\n\n        if (hidDefault.length) {\n          hiddenExist = true;\n          hidDefault.hide();\n        }\n\n        var toggleHiddenColumns = function toggleHiddenColumns(e) {\n          e.preventDefault();\n          var row = $(this).closest('.' + pfx + 'datatable-row');\n          var detailRow = $(row).next();\n\n          if (!$(detailRow).hasClass(pfx + 'datatable-row-detail')) {\n            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.collapse')).addClass(Plugin.getOption('layout.icons.rowDetail.expand'));\n            var hiddenCells = $(row).find('.' + pfx + 'datatable-cell:hidden');\n            var clonedCells = hiddenCells.clone().show();\n            detailRow = $('<tr/>').addClass(pfx + 'datatable-row-detail').insertAfter(row);\n            var detailRowTd = $('<td/>').addClass(pfx + 'datatable-detail').attr('colspan', Plugin.getTotalColumns()).appendTo(detailRow);\n            var detailSubTable = $('<table/>');\n            $(clonedCells).each(function () {\n              var field = $(this).data('field');\n              var column = $.grep(options.columns, function (n, i) {\n                return field === n.field;\n              })[0];\n\n              if (typeof column === 'undefined' || column.visible !== false) {\n                $(detailSubTable).append($('<tr class=\"' + pfx + 'datatable-row\"></tr>').append($('<td class=\"' + pfx + 'datatable-cell\"></td>').append($('<span/>').append(column.title))).append(this));\n              }\n            });\n            $(detailRowTd).append(detailSubTable);\n          } else {\n            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.expand')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'));\n            $(detailRow).remove();\n          }\n        };\n\n        setTimeout(function () {\n          $(datatable.table).find('.' + pfx + 'datatable-cell').show();\n          $(datatable.tableBody).each(function () {\n            var recursive = 0;\n            var offsetWidth = $(this)[0].offsetWidth;\n            var scrollWidth = $(this)[0].scrollWidth;\n\n            while (offsetWidth < scrollWidth && scrollWidth - offsetWidth > Plugin.cellOffset && recursive < options.columns.length) {\n              $(datatable.table).find('.' + pfx + 'datatable-row').each(function (i) {\n                var cell = $(this).find('.' + pfx + 'datatable-cell:not(:hidden):not([data-autohide-disabled])').last();\n\n                if (cell.length) {\n                  $(cell).hide();\n                  hiddenExist = true;\n                }\n              });\n              recursive++;\n              offsetWidth = $(this)[0].offsetWidth;\n              scrollWidth = $(this)[0].scrollWidth;\n            }\n          });\n\n          if (hiddenExist) {\n            // toggle show hidden columns\n            $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function () {\n              // if no toggle yet\n              if ($(this).find('.' + pfx + 'datatable-toggle-detail').length === 0) {\n                // add toggle\n                $(this).prepend($('<td/>').addClass(pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail').append($('<a/>').addClass(pfx + 'datatable-toggle-detail').attr('href', '').on('click', toggleHiddenColumns).append('<i class=\"' + Plugin.getOption('layout.icons.rowDetail.collapse') + '\"></i>')));\n              } // check if subtable toggle exist\n\n\n              if ($(datatable.tableHead).find('.' + pfx + 'datatable-toggle-detail').length === 0) {\n                // add empty column to the header and footer\n                $(datatable.tableHead).find('.' + pfx + 'datatable-row').first().prepend('<th class=\"' + pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail\"><span></span></th>');\n                $(datatable.tableFoot).find('.' + pfx + 'datatable-row').first().prepend('<th class=\"' + pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail\"><span></span></th>');\n              } else {\n                $(datatable.tableHead).find('.' + pfx + 'datatable-toggle-detail').find('span');\n              }\n            });\n          }\n        });\n        Plugin.adjustCellsWidth.call();\n      },\n\n      /**\r\n       * To enable auto columns features for remote data source\r\n       */\n      setAutoColumns: function setAutoColumns() {\n        if (Plugin.getOption('data.autoColumns')) {\n          $.each(datatable.dataSet[0], function (k, v) {\n            var found = $.grep(options.columns, function (n, i) {\n              return k === n.field;\n            });\n\n            if (found.length === 0) {\n              options.columns.push({\n                field: k,\n                title: k\n              });\n            }\n          });\n          $(datatable.tableHead).find('.' + pfx + 'datatable-row').remove();\n          Plugin.setHeadTitle();\n\n          if (Plugin.getOption('layout.footer')) {\n            $(datatable.tableFoot).find('.' + pfx + 'datatable-row').remove();\n            Plugin.setHeadTitle(datatable.tableFoot);\n          }\n        }\n      },\n\n      /********************\r\n       ** HELPERS\r\n       ********************/\n\n      /**\r\n       * Check if table is a locked colums table\r\n       */\n      isLocked: function isLocked() {\n        var isLocked = Plugin.lockEnabledColumns();\n        return isLocked.left.length > 0 || isLocked.right.length > 0;\n      },\n      isSubtable: function isSubtable() {\n        return util.hasClass(datatable.wrap[0], pfx + 'datatable-subtable') || false;\n      },\n\n      /**\r\n       * Get total extra space of an element for width calculation,\r\n       * including padding, margin, border\r\n       * @param element\r\n       * @returns {number}\r\n       */\n      getExtraSpace: function getExtraSpace(element) {\n        var padding = parseInt($(element).css('paddingRight')) + parseInt($(element).css('paddingLeft'));\n        var margin = parseInt($(element).css('marginRight')) + parseInt($(element).css('marginLeft'));\n        var border = Math.ceil($(element).css('border-right-width').replace('px', ''));\n        return padding + margin + border;\n      },\n\n      /**\r\n       * Insert data of array into {{ }} template placeholder\r\n       * @param template\r\n       * @param data\r\n       * @returns {*}\r\n       */\n      dataPlaceholder: function dataPlaceholder(template, data) {\n        var result = template;\n        $.each(data, function (key, val) {\n          result = result.replace('{{' + key + '}}', val);\n        });\n        return result;\n      },\n\n      /**\r\n       * Get table unique ID\r\n       * Note: table unique change each time refreshed\r\n       * @param suffix\r\n       * @returns {*}\r\n       */\n      getTableId: function getTableId(suffix) {\n        if (typeof suffix === 'undefined') suffix = '';\n        var id = $(datatable).attr('id');\n\n        if (typeof id === 'undefined') {\n          id = $(datatable).attr('class').split(' ')[0];\n        }\n\n        return id + suffix;\n      },\n\n      /**\r\n       * Get table prefix with depth number\r\n       */\n      getTablePrefix: function getTablePrefix(suffix) {\n        if (typeof suffix !== 'undefined') suffix = '-' + suffix;\n        return Plugin.getTableId() + '-' + Plugin.getDepth() + suffix;\n      },\n\n      /**\r\n       * Get current table depth of sub table\r\n       * @returns {number}\r\n       */\n      getDepth: function getDepth() {\n        var depth = 0;\n        var table = datatable.table;\n\n        do {\n          table = $(table).parents('.' + pfx + 'datatable-table');\n          depth++;\n        } while ($(table).length > 0);\n\n        return depth;\n      },\n\n      /**\r\n       * Keep state item\r\n       * @param key\r\n       * @param value\r\n       */\n      stateKeep: function stateKeep(key, value) {\n        key = Plugin.getTablePrefix(key);\n        if (Plugin.getOption('data.saveState') === false) return;\n\n        if (localStorage) {\n          localStorage.setItem(key, JSON.stringify(value));\n        }\n      },\n\n      /**\r\n       * Get state item\r\n       * @param key\r\n       * @param defValue\r\n       */\n      stateGet: function stateGet(key, defValue) {\n        key = Plugin.getTablePrefix(key);\n        if (Plugin.getOption('data.saveState') === false) return;\n        var value = null;\n\n        if (localStorage) {\n          value = localStorage.getItem(key);\n        }\n\n        if (typeof value !== 'undefined' && value !== null) {\n          return JSON.parse(value);\n        }\n      },\n\n      /**\r\n       * Update data in state without clear existing\r\n       * @param key\r\n       * @param value\r\n       */\n      stateUpdate: function stateUpdate(key, value) {\n        var ori = Plugin.stateGet(key);\n        if (typeof ori === 'undefined' || ori === null) ori = {};\n        Plugin.stateKeep(key, $.extend({}, ori, value));\n      },\n\n      /**\r\n       * Remove state item\r\n       * @param key\r\n       */\n      stateRemove: function stateRemove(key) {\n        key = Plugin.getTablePrefix(key);\n\n        if (localStorage) {\n          localStorage.removeItem(key);\n        }\n      },\n\n      /**\r\n       * Get total columns.\r\n       */\n      getTotalColumns: function getTotalColumns(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;\n        return $(tablePart).find('.' + pfx + 'datatable-row').first().find('.' + pfx + 'datatable-cell').length;\n      },\n\n      /**\r\n       * Get table row. Useful to get row when current table is in lock\r\n       * mode. Can be used for both lock and normal table mode. By\r\n       * default, returning result will be in a list of <td>.\r\n       * @param tablePart\r\n       * @param row 1-based index\r\n       * @param tdOnly Optional. Default true\r\n       * @returns {*}\r\n       */\n      getOneRow: function getOneRow(tablePart, row, tdOnly) {\n        if (typeof tdOnly === 'undefined') tdOnly = true; // get list of <tr>\n\n        var result = $(tablePart).find('.' + pfx + 'datatable-row:not(.' + pfx + 'datatable-row-detail):nth-child(' + row + ')');\n\n        if (tdOnly) {\n          // get list of <td> or <th>\n          result = result.find('.' + pfx + 'datatable-cell');\n        }\n\n        return result;\n      },\n\n      /**\r\n       * Sort table row at HTML level by column index.\r\n       * todo; Not in use.\r\n       * @param header Header sort clicked\r\n       * @param sort asc|desc. Optional. Default asc\r\n       * @param int Boolean. Optional. Comparison value parse to integer.\r\n       *     Default false\r\n       */\n      sortColumn: function sortColumn(header, sort, _int) {\n        if (typeof sort === 'undefined') sort = 'asc'; // desc\n\n        if (typeof _int === 'undefined') _int = false;\n        var column = $(header).index();\n        var rows = $(datatable.tableBody).find('.' + pfx + 'datatable-row');\n        var hIndex = $(header).closest('.' + pfx + 'datatable-lock').index();\n\n        if (hIndex !== -1) {\n          rows = $(datatable.tableBody).find('.' + pfx + 'datatable-lock:nth-child(' + (hIndex + 1) + ')').find('.' + pfx + 'datatable-row');\n        }\n\n        var container = $(rows).parent();\n        $(rows).sort(function (a, b) {\n          var tda = $(a).find('td:nth-child(' + column + ')').text();\n          var tdb = $(b).find('td:nth-child(' + column + ')').text();\n\n          if (_int) {\n            // useful for integer type sorting\n            tda = parseInt(tda);\n            tdb = parseInt(tdb);\n          }\n\n          if (sort === 'asc') {\n            return tda > tdb ? 1 : tda < tdb ? -1 : 0;\n          } else {\n            return tda < tdb ? 1 : tda > tdb ? -1 : 0;\n          }\n        }).appendTo(container);\n      },\n\n      /**\r\n       * Perform sort remote and local\r\n       */\n      sorting: function sorting() {\n        var sortObj = {\n          init: function init() {\n            if (options.sortable) {\n              $(datatable.tableHead).find('.' + pfx + 'datatable-cell:not(.' + pfx + 'datatable-cell-check)').addClass(pfx + 'datatable-cell-sort').off('click').on('click', sortObj.sortClick); // first init\n\n              sortObj.setIcon();\n            }\n          },\n          setIcon: function setIcon() {\n            var meta = Plugin.getDataSourceParam('sort');\n            if ($.isEmptyObject(meta)) return;\n            var column = Plugin.getColumnByField(meta.field); // sort is disabled for this column\n\n            if (typeof column === 'undefined') return;\n            if (typeof column.sortable !== 'undefined' && column.sortable === false) return;\n            if (typeof column.selector !== 'undefined' && column.selector === true) return; // sort icon beside column header\n\n            var td = $(datatable.tableHead).find('.' + pfx + 'datatable-cell[data-field=\"' + meta.field + '\"]').attr('data-sort', meta.sort);\n            var sorting = $(td).find('span');\n            var icon = $(sorting).find('i');\n            var icons = Plugin.getOption('layout.icons.sort'); // update sort icon; desc & asc\n\n            if ($(icon).length > 0) {\n              $(icon).removeAttr('class').addClass(icons[meta.sort]);\n            } else {\n              $(sorting).append($('<i/>').addClass(icons[meta.sort]));\n            } // set sorted class to header on init\n\n\n            $(td).addClass(pfx + 'datatable-cell-sorted');\n          },\n          sortClick: function sortClick(e) {\n            var meta = Plugin.getDataSourceParam('sort');\n            var field = $(this).data('field');\n            var column = Plugin.getColumnByField(field); // sort is disabled for this column\n\n            if (typeof column === 'undefined') return;\n            if (typeof column.sortable !== 'undefined' && column.sortable === false) return;\n            if (typeof column.selector !== 'undefined' && column.selector === true) return; // set sorted class to header\n\n            $(datatable.tableHead).find('th').removeClass(pfx + 'datatable-cell-sorted');\n            util.addClass(this, pfx + 'datatable-cell-sorted');\n            $(datatable.tableHead).find('.' + pfx + 'datatable-cell > span > i').remove();\n\n            if (options.sortable) {\n              Plugin.spinnerCallback(true);\n              var sort = 'desc';\n\n              if (Plugin.getObject('field', meta) === field) {\n                sort = Plugin.getObject('sort', meta);\n              } // toggle sort\n\n\n              sort = typeof sort === 'undefined' || sort === 'desc' ? 'asc' : 'desc'; // update field and sort params\n\n              meta = {\n                field: field,\n                sort: sort\n              };\n              Plugin.setDataSourceParam('sort', meta);\n              sortObj.setIcon();\n              setTimeout(function () {\n                Plugin.dataRender('sort');\n                $(datatable).trigger(pfx + 'datatable-on-sort', meta);\n              }, 300);\n            }\n          }\n        };\n        sortObj.init();\n      },\n\n      /**\r\n       * Update JSON data list linked with sort, filter and pagination.\r\n       * Call this method, before using dataSet variable.\r\n       * @returns {*|null}\r\n       */\n      localDataUpdate: function localDataUpdate() {\n        var params = Plugin.getDataSourceParam();\n\n        if (typeof datatable.originalDataSet === 'undefined') {\n          datatable.originalDataSet = datatable.dataSet;\n        }\n\n        var field = Plugin.getObject('sort.field', params);\n        var sort = Plugin.getObject('sort.sort', params);\n        var column = Plugin.getColumnByField(field);\n\n        if (typeof column !== 'undefined' && Plugin.getOption('data.serverSorting') !== true) {\n          if (typeof column.sortCallback === 'function') {\n            datatable.dataSet = column.sortCallback(datatable.originalDataSet, sort, column);\n          } else {\n            datatable.dataSet = Plugin.sortCallback(datatable.originalDataSet, sort, column);\n          }\n        } else {\n          datatable.dataSet = datatable.originalDataSet;\n        } // if server filter enable, don't pass local filter\n\n\n        if (_typeof(params.query) === 'object' && !Plugin.getOption('data.serverFiltering')) {\n          params.query = params.query || {};\n\n          var nestedSearch = function nestedSearch(obj) {\n            for (var field in obj) {\n              if (!obj.hasOwnProperty(field)) continue;\n\n              if (typeof obj[field] === 'string') {\n                if (obj[field].toLowerCase() == search || obj[field].toLowerCase().indexOf(search) !== -1) {\n                  return true;\n                }\n              } else if (typeof obj[field] === 'number') {\n                if (obj[field] === search) {\n                  return true;\n                }\n              } else if (_typeof(obj[field]) === 'object') {\n                if (nestedSearch(obj[field])) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          };\n\n          var search = $(Plugin.getOption('search.input')).val();\n\n          if (typeof search !== 'undefined' && search !== '') {\n            search = search.toLowerCase();\n            datatable.dataSet = $.grep(datatable.dataSet, nestedSearch); // remove generalSearch as we don't need this for next columns filter\n\n            delete params.query[Plugin.getGeneralSearchKey()];\n          } // remove empty element from array\n\n\n          $.each(params.query, function (k, v) {\n            if (v === '') {\n              delete params.query[k];\n            }\n          }); // filter array by query\n\n          datatable.dataSet = Plugin.filterArray(datatable.dataSet, params.query); // reset array index\n\n          datatable.dataSet = datatable.dataSet.filter(function () {\n            return true;\n          });\n        }\n\n        return datatable.dataSet;\n      },\n\n      /**\r\n       * Utility helper to filter array by object pair of {key:value}\r\n       * @param list\r\n       * @param args\r\n       * @param operator\r\n       * @returns {*}\r\n       */\n      filterArray: function filterArray(list, args, operator) {\n        if (_typeof(list) !== 'object') {\n          return [];\n        }\n\n        if (typeof operator === 'undefined') operator = 'AND';\n\n        if (_typeof(args) !== 'object') {\n          return list;\n        }\n\n        operator = operator.toUpperCase();\n\n        if ($.inArray(operator, ['AND', 'OR', 'NOT']) === -1) {\n          return [];\n        }\n\n        var count = Object.keys(args).length;\n        var filtered = [];\n        $.each(list, function (key, obj) {\n          var to_match = obj;\n          var matched = 0;\n          $.each(args, function (m_key, m_value) {\n            m_value = m_value instanceof Array ? m_value : [m_value];\n            var match_property = Plugin.getObject(m_key, to_match);\n\n            if (typeof match_property !== 'undefined' && match_property) {\n              var lhs = match_property.toString().toLowerCase();\n              m_value.forEach(function (item, index) {\n                if (item.toString().toLowerCase() == lhs || lhs.indexOf(item.toString().toLowerCase()) !== -1) {\n                  matched++;\n                }\n              });\n            }\n          });\n\n          if ('AND' == operator && matched == count || 'OR' == operator && matched > 0 || 'NOT' == operator && 0 == matched) {\n            filtered[key] = obj;\n          }\n        });\n        list = filtered;\n        return list;\n      },\n\n      /**\r\n       * Reset lock column scroll to 0 when resize\r\n       */\n      resetScroll: function resetScroll() {\n        if (typeof options.detail === 'undefined' && Plugin.getDepth() === 1) {\n          $(datatable.table).find('.' + pfx + 'datatable-row').css('left', 0);\n          $(datatable.table).find('.' + pfx + 'datatable-lock').css('top', 0);\n          $(datatable.tableBody).scrollTop(0);\n        }\n      },\n\n      /**\r\n       * Get column options by field\r\n       * @param field\r\n       * @returns {boolean}\r\n       */\n      getColumnByField: function getColumnByField(field) {\n        if (typeof field === 'undefined') return;\n        var result;\n        $.each(options.columns, function (i, column) {\n          if (field === column.field) {\n            result = column;\n            return false;\n          }\n        });\n        return result;\n      },\n\n      /**\r\n       * Get default sort column\r\n       */\n      getDefaultSortColumn: function getDefaultSortColumn() {\n        var result;\n        $.each(options.columns, function (i, column) {\n          if (typeof column.sortable !== 'undefined' && $.inArray(column.sortable, ['asc', 'desc']) !== -1) {\n            result = {\n              sort: column.sortable,\n              field: column.field\n            };\n            return false;\n          }\n        });\n        return result;\n      },\n\n      /**\r\n       * Helper to get element dimensions, when the element is hidden\r\n       * @param element\r\n       * @param includeMargin\r\n       * @returns {{width: number, height: number, innerWidth: number,\r\n       *     innerHeight: number, outerWidth: number, outerHeight:\r\n       *     number}}\r\n       */\n      getHiddenDimensions: function getHiddenDimensions(element, includeMargin) {\n        var props = {\n          position: 'absolute',\n          visibility: 'hidden',\n          display: 'block'\n        },\n            dim = {\n          width: 0,\n          height: 0,\n          innerWidth: 0,\n          innerHeight: 0,\n          outerWidth: 0,\n          outerHeight: 0\n        },\n            hiddenParents = $(element).parents().addBack().not(':visible');\n        includeMargin = typeof includeMargin === 'boolean' ? includeMargin : false;\n        var oldProps = [];\n        hiddenParents.each(function () {\n          var old = {};\n\n          for (var name in props) {\n            old[name] = this.style[name];\n            this.style[name] = props[name];\n          }\n\n          oldProps.push(old);\n        });\n        dim.width = $(element).width();\n        dim.outerWidth = $(element).outerWidth(includeMargin);\n        dim.innerWidth = $(element).innerWidth();\n        dim.height = $(element).height();\n        dim.innerHeight = $(element).innerHeight();\n        dim.outerHeight = $(element).outerHeight(includeMargin);\n        hiddenParents.each(function (i) {\n          var old = oldProps[i];\n\n          for (var name in props) {\n            this.style[name] = old[name];\n          }\n        });\n        return dim;\n      },\n      getGeneralSearchKey: function getGeneralSearchKey() {\n        var searchInput = $(Plugin.getOption('search.input'));\n        return Plugin.getOption('search.key') || $(searchInput).prop('name');\n      },\n\n      /**\r\n       * Get value by dot notation path string and to prevent undefined\r\n       * errors\r\n       * @param path String Dot notation path in string\r\n       * @param object Object to iterate\r\n       * @returns {*}\r\n       */\n      getObject: function getObject(path, object) {\n        return path.split('.').reduce(function (obj, i) {\n          return obj !== null && typeof obj[i] !== 'undefined' ? obj[i] : null;\n        }, object);\n      },\n\n      /**\r\n       * Extend object\r\n       * @param obj\r\n       * @param path\r\n       * @param value\r\n       * @returns {*}\r\n       */\n      extendObj: function extendObj(obj, path, value) {\n        var levels = path.split('.'),\n            i = 0;\n\n        function createLevel(child) {\n          var name = levels[i++];\n\n          if (typeof child[name] !== 'undefined' && child[name] !== null) {\n            if (_typeof(child[name]) !== 'object' && typeof child[name] !== 'function') {\n              child[name] = {};\n            }\n          } else {\n            child[name] = {};\n          }\n\n          if (i === levels.length) {\n            child[name] = value;\n          } else {\n            createLevel(child[name]);\n          }\n        }\n\n        createLevel(obj);\n        return obj;\n      },\n      rowEvenOdd: function rowEvenOdd() {\n        // row even class\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').removeClass(pfx + 'datatable-row-even');\n\n        if ($(datatable.wrap).hasClass(pfx + 'datatable-subtable')) {\n          $(datatable.tableBody).find('.' + pfx + 'datatable-row:not(.' + pfx + 'datatable-row-detail):even').addClass(pfx + 'datatable-row-even');\n        } else {\n          $(datatable.tableBody).find('.' + pfx + 'datatable-row:nth-child(even)').addClass(pfx + 'datatable-row-even');\n        }\n      },\n\n      /********************\r\n       ** PUBLIC API METHODS\r\n       ********************/\n      // delay timer\n      timer: 0,\n\n      /**\r\n       * Redraw datatable by recalculating its DOM elements, etc.\r\n       * @returns {jQuery}\r\n       */\n      redraw: function redraw() {\n        Plugin.adjustCellsWidth.call();\n\n        if (Plugin.isLocked()) {\n          // fix hiding cell width issue\n          Plugin.scrollbar();\n          Plugin.resetScroll();\n          Plugin.adjustCellsHeight.call();\n        }\n\n        Plugin.adjustLockContainer.call();\n        Plugin.initHeight.call();\n        return datatable;\n      },\n\n      /**\r\n       * Shortcode to reload\r\n       * @returns {jQuery}\r\n       */\n      load: function load() {\n        Plugin.reload();\n        return datatable;\n      },\n\n      /**\r\n       * Datasource reload\r\n       * @returns {jQuery}\r\n       */\n      reload: function reload() {\n        var delay = function () {\n          return function (callback, ms) {\n            clearTimeout(Plugin.timer);\n            Plugin.timer = setTimeout(callback, ms);\n          };\n        }();\n\n        delay(function () {\n          // local only. remote pagination will skip this block\n          if (!options.data.serverFiltering) {\n            Plugin.localDataUpdate();\n          }\n\n          Plugin.dataRender();\n          $(datatable).trigger(pfx + 'datatable-on-reloaded');\n        }, Plugin.getOption('search.delay'));\n        return datatable;\n      },\n\n      /**\r\n       * Get record by record ID\r\n       * @param id\r\n       * @returns {jQuery}\r\n       */\n      getRecord: function getRecord(id) {\n        if (typeof datatable.tableBody === 'undefined') datatable.tableBody = $(datatable.table).children('tbody');\n        $(datatable.tableBody).find('.' + pfx + 'datatable-cell:first-child').each(function (i, cell) {\n          if (id == $(cell).text()) {\n            var rowNumber = $(cell).closest('.' + pfx + 'datatable-row').index() + 1;\n            datatable.API.record = datatable.API.value = Plugin.getOneRow(datatable.tableBody, rowNumber);\n            return datatable;\n          }\n        });\n        return datatable;\n      },\n\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get column of current record ID\r\n       * @param columnName\r\n       * @returns {jQuery}\r\n       */\n      getColumn: function getColumn(columnName) {\n        Plugin.setSelectedRecords();\n        datatable.API.value = $(datatable.API.record).find('[data-field=\"' + columnName + '\"]');\n        return datatable;\n      },\n\n      /**\r\n       * Destroy datatable to original DOM state before datatable was\r\n       * initialized\r\n       * @returns {jQuery}\r\n       */\n      destroy: function destroy() {\n        $(datatable).parent().find('.' + pfx + 'datatable-pager').remove();\n        var initialDatatable = $(datatable.initialDatatable).addClass(pfx + 'datatable-destroyed').show();\n        $(datatable).replaceWith(initialDatatable);\n        datatable = initialDatatable;\n        $(datatable).trigger(pfx + 'datatable-on-destroy');\n        Plugin.isInit = false; // clean up variables\n\n        initialDatatable = null;\n        datatable.dataSet = null;\n        datatable.originalDataSet = null;\n        datatable.tableHead = null;\n        datatable.tableBody = null;\n        datatable.table = null;\n        datatable.wrap = null;\n        datatable.API = {\n          record: null,\n          value: null,\n          params: null\n        };\n        Plugin.ajaxParams = {};\n        Plugin.pagingObject = {};\n        Plugin.nodeTr = [];\n        Plugin.nodeTd = [];\n        Plugin.nodeCols = [];\n        Plugin.recentNode = [];\n        return initialDatatable;\n      },\n\n      /**\r\n       * Sort by column field\r\n       * @param field\r\n       * @param sort\r\n       */\n      sort: function sort(field, _sort) {\n        // toggle sort\n        _sort = typeof _sort === 'undefined' ? 'asc' : _sort;\n        Plugin.spinnerCallback(true); // update field and sort params\n\n        var meta = {\n          field: field,\n          sort: _sort\n        };\n        Plugin.setDataSourceParam('sort', meta);\n        setTimeout(function () {\n          Plugin.dataRender('sort');\n          $(datatable).trigger(pfx + 'datatable-on-sort', meta);\n          $(datatable.tableHead).find('.' + pfx + 'datatable-cell > span > i').remove();\n        }, 300);\n        return datatable;\n      },\n\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get current selected column value\r\n       * @returns {jQuery}\r\n       */\n      getValue: function getValue() {\n        return $(datatable.API.value).text();\n      },\n\n      /**\r\n       * Set checkbox active\r\n       * @param cell JQuery selector or checkbox ID\r\n       */\n      setActive: function setActive(cell) {\n        if (typeof cell === 'string') {\n          // set by checkbox id\n          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"][value=\"' + cell + '\"]');\n        }\n\n        $(cell).prop('checked', true);\n        var ids = [];\n        $(cell).each(function (i, td) {\n          // normal table\n          var row = $(td).closest('tr').addClass(pfx + 'datatable-row-active');\n          var id = $(td).attr('value');\n\n          if (typeof id !== 'undefined') {\n            ids.push(id);\n          }\n        });\n        $(datatable).trigger(pfx + 'datatable-on-check', [ids]);\n      },\n\n      /**\r\n       * Set checkbox inactive\r\n       * @param cell JQuery selector or checkbox ID\r\n       */\n      setInactive: function setInactive(cell) {\n        if (typeof cell === 'string') {\n          // set by checkbox id\n          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"][value=\"' + cell + '\"]');\n        }\n\n        $(cell).prop('checked', false);\n        var ids = [];\n        $(cell).each(function (i, td) {\n          // normal table\n          var row = $(td).closest('tr').removeClass(pfx + 'datatable-row-active');\n          var id = $(td).attr('value');\n\n          if (typeof id !== 'undefined') {\n            ids.push(id);\n          }\n        });\n        $(datatable).trigger(pfx + 'datatable-on-uncheck', [ids]);\n      },\n\n      /**\r\n       * Set all checkboxes active or inactive\r\n       * @param active\r\n       */\n      setActiveAll: function setActiveAll(active) {\n        var checkboxes = $(datatable.table).find('> tbody, > thead').find('tr').not('.' + pfx + 'datatable-row-subtable').find('.' + pfx + 'datatable-cell-check [type=\"checkbox\"]');\n\n        if (active) {\n          Plugin.setActive(checkboxes);\n        } else {\n          Plugin.setInactive(checkboxes);\n        }\n      },\n\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get selected rows which are active\r\n       * @returns {jQuery}\r\n       */\n      setSelectedRecords: function setSelectedRecords() {\n        datatable.API.record = $(datatable.tableBody).find('.' + pfx + 'datatable-row-active');\n        return datatable;\n      },\n\n      /**\r\n       * Get selected records\r\n       * @returns {null}\r\n       */\n      getSelectedRecords: function getSelectedRecords() {\n        // support old method\n        Plugin.setSelectedRecords();\n        datatable.API.record = datatable.rows('.' + pfx + 'datatable-row-active').nodes();\n        return datatable.API.record;\n      },\n\n      /**\r\n       * Get options by dots notation path\r\n       * @param path String Dot notation path in string\r\n       * @returns {*}\r\n       */\n      getOption: function getOption(path) {\n        return Plugin.getObject(path, options);\n      },\n\n      /**\r\n       * Set global options nodes by dots notation path\r\n       * @param path\r\n       * @param object\r\n       */\n      setOption: function setOption(path, object) {\n        options = Plugin.extendObj(options, path, object);\n      },\n\n      /**\r\n       * Search filter for local & remote\r\n       * @param value\r\n       * @param columns. Optional list of columns to be filtered.\r\n       */\n      search: function search(value, columns) {\n        if (typeof columns !== 'undefined') columns = $.makeArray(columns);\n\n        var delay = function () {\n          return function (callback, ms) {\n            clearTimeout(Plugin.timer);\n            Plugin.timer = setTimeout(callback, ms);\n          };\n        }();\n\n        delay(function () {\n          // get query parameters\n          var query = Plugin.getDataSourceQuery(); // search not by columns\n\n          if (typeof columns === 'undefined' && typeof value !== 'undefined') {\n            var key = Plugin.getGeneralSearchKey();\n            query[key] = value;\n          } // search by columns, support multiple columns\n\n\n          if (_typeof(columns) === 'object') {\n            $.each(columns, function (k, column) {\n              query[column] = value;\n            }); // remove empty element from arrays\n\n            $.each(query, function (k, v) {\n              if (v === '' || $.isEmptyObject(v)) {\n                delete query[k];\n              }\n            });\n          }\n\n          Plugin.setDataSourceQuery(query); // reset pagination to 1 when doing seearching\n\n          datatable.setDataSourceParam('pagination', Object.assign({}, datatable.getDataSourceParam('pagination'), {\n            page: 1\n          })); // local filter only. remote pagination will skip this block\n\n          if (!options.data.serverFiltering) {\n            Plugin.localDataUpdate();\n          }\n\n          Plugin.dataRender('search');\n        }, Plugin.getOption('search.delay'));\n      },\n\n      /**\r\n       * Set datasource params extract\r\n       * @param param\r\n       * @param value\r\n       */\n      setDataSourceParam: function setDataSourceParam(param, value) {\n        datatable.API.params = $.extend({}, {\n          pagination: {\n            page: 1,\n            perpage: Plugin.getOption('data.pageSize')\n          },\n          sort: Plugin.getDefaultSortColumn(),\n          query: {}\n        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));\n        datatable.API.params = Plugin.extendObj(datatable.API.params, param, value);\n        Plugin.stateKeep(Plugin.stateId, datatable.API.params);\n      },\n\n      /**\r\n       * Get datasource params\r\n       * @param param\r\n       */\n      getDataSourceParam: function getDataSourceParam(param) {\n        datatable.API.params = $.extend({}, {\n          pagination: {\n            page: 1,\n            perpage: Plugin.getOption('data.pageSize')\n          },\n          sort: Plugin.getDefaultSortColumn(),\n          query: {}\n        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));\n\n        if (typeof param === 'string') {\n          return Plugin.getObject(param, datatable.API.params);\n        }\n\n        return datatable.API.params;\n      },\n\n      /**\r\n       * Shortcode to datatable.getDataSourceParam('query');\r\n       * @returns {*}\r\n       */\n      getDataSourceQuery: function getDataSourceQuery() {\n        return Plugin.getDataSourceParam('query') || {};\n      },\n\n      /**\r\n       * Shortcode to datatable.setDataSourceParam('query', query);\r\n       * @param query\r\n       */\n      setDataSourceQuery: function setDataSourceQuery(query) {\n        Plugin.setDataSourceParam('query', query);\n      },\n\n      /**\r\n       * Get current page number\r\n       * @returns {number}\r\n       */\n      getCurrentPage: function getCurrentPage() {\n        return $(datatable.table).siblings('.' + pfx + 'datatable-pager').last().find('.' + pfx + 'datatable-pager-nav').find('.' + pfx + 'datatable-pager-link.' + pfx + 'datatable-pager-link-active').data('page') || 1;\n      },\n\n      /**\r\n       * Get selected dropdown page size\r\n       * @returns {*|number}\r\n       */\n      getPageSize: function getPageSize() {\n        return $(datatable.table).siblings('.' + pfx + 'datatable-pager').last().find('select.' + pfx + 'datatable-pager-size').val() || 10;\n      },\n\n      /**\r\n       * Get total rows\r\n       */\n      getTotalRows: function getTotalRows() {\n        return datatable.API.params.pagination.total;\n      },\n\n      /**\r\n       * Get full dataset in grid\r\n       * @returns {*|null|Array}\r\n       */\n      getDataSet: function getDataSet() {\n        return datatable.originalDataSet;\n      },\n      nodeTr: [],\n      nodeTd: [],\n      nodeCols: [],\n      recentNode: [],\n      table: function table() {\n        if (typeof datatable.table !== 'undefined') {\n          return datatable.table;\n        }\n      },\n\n      /**\r\n       * Select a single row from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      row: function row(selector) {\n        Plugin.rows(selector);\n        Plugin.nodeTr = Plugin.recentNode = $(Plugin.nodeTr).first();\n        return datatable;\n      },\n\n      /**\r\n       * Select multiple rows from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      rows: function rows(selector) {\n        if (Plugin.isLocked()) {\n          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n        } else {\n          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable-row');\n        }\n\n        return datatable;\n      },\n\n      /**\r\n       * Select a single column from the table\r\n       * @param index zero-based index\r\n       * @returns {jQuery}\r\n       */\n      column: function column(index) {\n        Plugin.nodeCols = Plugin.recentNode = $(datatable.tableBody).find('.' + pfx + 'datatable-cell:nth-child(' + (index + 1) + ')');\n        return datatable;\n      },\n\n      /**\r\n       * Select multiple columns from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      columns: function columns(selector) {\n        var context = datatable.table;\n\n        if (Plugin.nodeTr === Plugin.recentNode) {\n          context = Plugin.nodeTr;\n        }\n\n        var columns = $(context).find('.' + pfx + 'datatable-cell[data-field=\"' + selector + '\"]');\n\n        if (columns.length > 0) {\n          Plugin.nodeCols = Plugin.recentNode = columns;\n        } else {\n          Plugin.nodeCols = Plugin.recentNode = $(context).find(selector).filter('.' + pfx + 'datatable-cell');\n        }\n\n        return datatable;\n      },\n      cell: function cell(selector) {\n        Plugin.cells(selector);\n        Plugin.nodeTd = Plugin.recentNode = $(Plugin.nodeTd).first();\n        return datatable;\n      },\n      cells: function cells(selector) {\n        var cells = $(datatable.tableBody).find('.' + pfx + 'datatable-cell');\n\n        if (typeof selector !== 'undefined') {\n          cells = $(cells).filter(selector);\n        }\n\n        Plugin.nodeTd = Plugin.recentNode = cells;\n        return datatable;\n      },\n\n      /**\r\n       * Delete the selected row from the table\r\n       * @returns {jQuery}\r\n       */\n      remove: function remove() {\n        if ($(Plugin.nodeTr.length) && Plugin.nodeTr === Plugin.recentNode) {\n          $(Plugin.nodeTr).remove();\n        }\n\n        Plugin.layoutUpdate();\n        return datatable;\n      },\n\n      /**\r\n       * Show or hide the columns or rows\r\n       */\n      visible: function visible(bool) {\n        if ($(Plugin.recentNode.length)) {\n          var locked = Plugin.lockEnabledColumns();\n\n          if (Plugin.recentNode === Plugin.nodeCols) {\n            var index = Plugin.recentNode.index();\n\n            if (Plugin.isLocked()) {\n              var scrollColumns = $(Plugin.recentNode).closest('.' + pfx + 'datatable-lock-scroll').length;\n\n              if (scrollColumns) {\n                // is at center of scrollable area\n                index += locked.left.length + 1;\n              } else if ($(Plugin.recentNode).closest('.' + pfx + 'datatable-lock-right').length) {\n                // is at the right locked table\n                index += locked.left.length + scrollColumns + 1;\n              }\n            }\n          }\n\n          if (bool) {\n            if (Plugin.recentNode === Plugin.nodeCols) {\n              delete options.columns[index].visible;\n            }\n\n            $(Plugin.recentNode).show();\n          } else {\n            if (Plugin.recentNode === Plugin.nodeCols) {\n              Plugin.setOption('columns.' + index + '.visible', false);\n            }\n\n            $(Plugin.recentNode).hide();\n          }\n\n          Plugin.columnHide();\n          Plugin.redraw();\n        }\n      },\n\n      /**\r\n       * Get the the DOM element for the selected rows or columns\r\n       * @returns {Array}\r\n       */\n      nodes: function nodes() {\n        return Plugin.recentNode;\n      },\n\n      /**\r\n       * will be implemented soon\r\n       * @returns {jQuery}\r\n       */\n      dataset: function dataset() {\n        return datatable;\n      },\n\n      /**\r\n       * Open page by number\r\n       * @param page number\r\n       */\n      gotoPage: function gotoPage(page) {\n        if (typeof Plugin.pagingObject !== 'undefined') {\n          Plugin.isInit = true;\n          Plugin.pagingObject.openPage(page);\n        }\n      }\n    };\n    /**\r\n     * Public API methods can be used directly by datatable\r\n     */\n\n    $.each(Plugin, function (funcName, func) {\n      datatable[funcName] = func;\n    }); // initialize main datatable plugin\n\n    if (typeof options !== 'undefined') {\n      if (typeof options === 'string') {\n        var method = options;\n        datatable = $(this).data(pluginName);\n\n        if (typeof datatable !== 'undefined') {\n          options = datatable.options;\n          Plugin[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        }\n      } else {\n        if (!datatable.data(pluginName) && !$(this).hasClass(pfx + 'datatable-loaded')) {\n          datatable.dataSet = null;\n          datatable.textAlign = {\n            left: pfx + 'datatable-cell-left',\n            center: pfx + 'datatable-cell-center',\n            right: pfx + 'datatable-cell-right'\n          }; // merge default and user defined options\n\n          options = $.extend(true, {}, $.fn[pluginName].defaults, options);\n          datatable.options = options; // init plugin process\n\n          Plugin.init.apply(this, [options]);\n          $(datatable.wrap).data(pluginName, datatable);\n        }\n      }\n    } else {\n      // get existing instance datatable\n      datatable = $(this).data(pluginName);\n\n      if (typeof datatable === 'undefined') {\n        $.error(pluginName + ' not initialized');\n      }\n\n      options = datatable.options;\n    }\n\n    return datatable;\n  }; // default options\n\n\n  $.fn[pluginName].defaults = {\n    // datasource definition\n    data: {\n      type: 'local',\n      source: null,\n      pageSize: 10,\n      // display records per page\n      saveState: true,\n      serverPaging: false,\n      serverFiltering: false,\n      serverSorting: false,\n      autoColumns: false,\n      attr: {\n        rowProps: []\n      }\n    },\n    // layout definition\n    layout: {\n      theme: 'default',\n      // datatable will support multiple themes and designs\n      \"class\": pfx + 'datatable-primary',\n      // custom wrapper class\n      scroll: false,\n      // enable/disable datatable scroll both horizontal and vertical when needed.\n      height: null,\n      // datatable's body's fixed height\n      minHeight: null,\n      footer: false,\n      // display/hide footer\n      header: true,\n      // display/hide header\n      customScrollbar: true,\n      // set false to disable custom scrollbar\n      // datatable spinner\n      spinner: {\n        overlayColor: '#000000',\n        opacity: 0,\n        type: 'loader',\n        state: 'primary',\n        message: true\n      },\n      // datatable UI icons\n      icons: {\n        sort: {\n          asc: 'flaticon2-arrow-up',\n          desc: 'flaticon2-arrow-down'\n        },\n        pagination: {\n          next: 'flaticon2-next',\n          prev: 'flaticon2-back',\n          first: 'flaticon2-fast-back',\n          last: 'flaticon2-fast-next',\n          more: 'flaticon-more-1'\n        },\n        rowDetail: {\n          expand: 'fa fa-caret-down',\n          collapse: 'fa fa-caret-right'\n        }\n      }\n    },\n    // column sorting\n    sortable: true,\n    // resize column size with mouse drag coming soon)\n    resizable: false,\n    // column based filtering (coming soon)\n    filterable: false,\n    pagination: true,\n    // inline and bactch editing (cooming soon)\n    editable: false,\n    // columns definition\n    columns: [],\n    search: {\n      // enable trigger search by keyup enter\n      onEnter: false,\n      // input text for search\n      input: null,\n      // search delay in milliseconds\n      delay: 400,\n      //\tremote server search key value\n      key: null\n    },\n    rows: {\n      // deprecated\n      callback: function callback() {},\n      // call before row template\n      beforeTemplate: function beforeTemplate() {},\n      // call after row template\n      afterTemplate: function afterTemplate() {},\n      autoHide: true\n    },\n    // toolbar\n    toolbar: {\n      // place pagination and displayInfo blocks according to the array order\n      layout: ['pagination', 'info'],\n      // toolbar placement can be at top or bottom or both top and bottom repeated\n      placement: ['bottom'],\n      //'top', 'bottom'\n      // toolbar items\n      items: {\n        // pagination\n        pagination: {\n          // pagination type(default or scroll)\n          type: 'default',\n          // number of pages to display by breakpoints\n          pages: {\n            desktop: {\n              layout: 'default',\n              pagesNumber: 5\n            },\n            tablet: {\n              layout: 'default',\n              pagesNumber: 3\n            },\n            mobile: {\n              layout: 'compact'\n            }\n          },\n          // navigation buttons\n          navigation: {\n            prev: true,\n            // display prev button\n            next: true,\n            // display next button\n            first: true,\n            // display first button\n            last: true,\n            // display last button\n            more: false // display more button\n\n          },\n          // page size select\n          pageSizeSelect: [] // display dropdown to select pagination size. -1 is used for \"ALl\" option\n\n        },\n        // records info\n        info: true\n      }\n    },\n    // here we will keep all strings and message used by datatable UI so developer can easiliy translate to any language.\n    // By default the stirngs will be in the plugin source and here can override it\n    translate: {\n      records: {\n        processing: 'Please wait...',\n        noRecords: 'No records found'\n      },\n      toolbar: {\n        pagination: {\n          items: {\n            \"default\": {\n              first: 'First',\n              prev: 'Previous',\n              next: 'Next',\n              last: 'Last',\n              more: 'More pages',\n              input: 'Page number',\n              select: 'Select page size',\n              all: 'all'\n            },\n            info: 'Showing {{start}} - {{end}} of {{total}}'\n          }\n        }\n      }\n    },\n    extensions: {}\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/components/datatable/core.datatable.js\n");

  /***/ }),

  /***/ "./resources/assets/theme/js/components/datatable/datatable.checkbox.js":
  /*!******************************************************************************!*\
    !*** ./resources/assets/theme/js/components/datatable/datatable.checkbox.js ***!
    \******************************************************************************/
  /***/ (() => {

  "use strict";
  eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n(function ($) {\n  var pluginName = 'KTDatatable';\n  var pfx = '';\n  $.fn[pluginName] = $.fn[pluginName] || {};\n  /**\r\n   * @param datatable Main datatable plugin instance\r\n   * @param options Extension options\r\n   * @returns {*}\r\n   */\n\n  $.fn[pluginName].checkbox = function (datatable, options) {\n    var Extension = {\n      selectedAllRows: false,\n      selectedRows: [],\n      unselectedRows: [],\n      init: function init() {\n        if (Extension.selectorEnabled()) {\n          // reset\n          datatable.setDataSourceParam(options.vars.selectedAllRows, false);\n          datatable.stateRemove('checkbox'); // requestIds is not null\n\n          if (options.vars.requestIds) {\n            // request ids in response\n            datatable.setDataSourceParam(options.vars.requestIds, true);\n          } // remove selected checkbox on datatable reload\n\n\n          $(datatable).on(pfx + 'datatable-on-reloaded', function () {\n            datatable.stateRemove('checkbox');\n            datatable.setDataSourceParam(options.vars.selectedAllRows, false);\n            Extension.selectedAllRows = false;\n            Extension.selectedRows = [];\n            Extension.unselectedRows = [];\n          }); // select all on extension init\n\n          Extension.selectedAllRows = datatable.getDataSourceParam(options.vars.selectedAllRows);\n          $(datatable).on(pfx + 'datatable-on-layout-updated', function (e, args) {\n            if (args.table != $(datatable.wrap).attr('id')) {\n              return;\n            }\n\n            datatable.ready(function () {\n              Extension.initVars();\n              Extension.initEvent();\n              Extension.initSelect();\n            });\n          });\n          $(datatable).on(pfx + 'datatable-on-check', function (e, ids) {\n            ids.forEach(function (id) {\n              Extension.selectedRows.push(id); // // remove from unselected rows\n\n              Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);\n            });\n            var storage = {};\n            storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n            storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n            datatable.stateKeep('checkbox', storage);\n          });\n          $(datatable).on(pfx + 'datatable-on-uncheck', function (e, ids) {\n            ids.forEach(function (id) {\n              Extension.unselectedRows.push(id); // // remove from selected rows\n\n              Extension.selectedRows = Extension.remove(Extension.selectedRows, id);\n            });\n            var storage = {};\n            storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n            storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n            storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n            datatable.stateKeep('checkbox', storage);\n          });\n        }\n      },\n\n      /**\r\n       * Init checkbox clicks event\r\n       */\n      initEvent: function initEvent() {\n        // select all checkbox click\n        $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').click(function (e) {\n          // clear selected and unselected rows\n          Extension.selectedRows = Extension.unselectedRows = [];\n          datatable.stateRemove('checkbox'); // select all rows\n\n          Extension.selectedAllRows = !!$(this).is(':checked'); // local select all current page rows\n\n          if (!options.vars.requestIds) {\n            if ($(this).is(':checked')) {\n              Extension.selectedRows = $.makeArray($(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').map(function (i, chk) {\n                return $(chk).val();\n              }));\n            }\n\n            var storage = {};\n            storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n            datatable.stateKeep('checkbox', storage);\n          } // keep selectedAllRows in datasource params\n\n\n          datatable.setDataSourceParam(options.vars.selectedAllRows, Extension.selectedAllRows);\n          $(datatable).trigger(pfx + 'datatable-on-click-checkbox', [$(this)]);\n        }); // single row checkbox click\n\n        $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').click(function (e) {\n          var id = $(this).val();\n\n          if ($(this).is(':checked')) {\n            Extension.selectedRows.push(id); // remove from unselected rows\n\n            Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);\n          } else {\n            Extension.unselectedRows.push(id); // remove from selected rows\n\n            Extension.selectedRows = Extension.remove(Extension.selectedRows, id);\n          } // local checkbox header check\n\n\n          if (!options.vars.requestIds && Extension.selectedRows.length < 1) {\n            // remove select all checkbox, if there is no checked checkbox left\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', false);\n          }\n\n          var storage = {};\n          storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n          storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n          datatable.stateKeep('checkbox', storage);\n          $(datatable).trigger(pfx + 'datatable-on-click-checkbox', [$(this)]);\n        });\n      },\n      unique: function unique(value, index, self) {\n        return self.indexOf(value) === index;\n      },\n      initSelect: function initSelect() {\n        // selected all rows from server\n        if (Extension.selectedAllRows && options.vars.requestIds) {\n          if (!datatable.hasClass(pfx + 'datatable-error')) {\n            // set header select all checkbox checked\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', true);\n          } // set all checkbox in table body\n\n\n          datatable.setActiveAll(true); // remove unselected rows\n\n          Extension.unselectedRows.forEach(function (id) {\n            datatable.setInactive(id);\n          });\n        } else {\n          // single check for server and local\n          Extension.selectedRows.forEach(function (id) {\n            datatable.setActive(id);\n          }); // local checkbox; check if all checkboxes of currect page are checked\n\n          if (!datatable.hasClass(pfx + 'datatable-error') && $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').not(':checked').length < 1) {\n            // set header select all checkbox checked\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', true);\n          }\n        }\n      },\n\n      /**\r\n       * Check if selector is enabled from options\r\n       */\n      selectorEnabled: function selectorEnabled() {\n        return $.grep(datatable.options.columns, function (n, i) {\n          return n.selector || false;\n        })[0];\n      },\n      initVars: function initVars() {\n        // get single select/unselect from localstorage\n        var storage = datatable.stateGet('checkbox');\n\n        if (typeof storage !== 'undefined') {\n          Extension.selectedRows = storage['selectedRows'] || [];\n          Extension.unselectedRows = storage['unselectedRows'] || [];\n        }\n      },\n      getSelectedId: function getSelectedId(path) {\n        Extension.initVars(); // server selected all rows\n\n        if (Extension.selectedAllRows && options.vars.requestIds) {\n          if (typeof path === 'undefined') {\n            path = options.vars.rowIds;\n          } // if selected all rows, return id from response meta\n\n\n          var selectedAllRows = datatable.getObject(path, datatable.lastResponse) || [];\n\n          if (selectedAllRows.length > 0) {\n            // remove single unselected rows from selectedAllRows ids from server response emta\n            Extension.unselectedRows.forEach(function (id) {\n              selectedAllRows = Extension.remove(selectedAllRows, parseInt(id));\n            });\n          }\n\n          return selectedAllRows.filter(Extension.unique);\n        } // else return single checked selected rows\n\n\n        return Extension.selectedRows.filter(Extension.unique);\n      },\n      remove: function remove(array, element) {\n        return array.filter(function (e) {\n          return e !== element;\n        });\n      }\n    }; // make the extension accessible from datatable init\n\n    datatable.checkbox = function () {\n      return Extension;\n    };\n\n    if (_typeof(options) === 'object') {\n      options = $.extend(true, {}, $.fn[pluginName].checkbox[\"default\"], options);\n      Extension.init.apply(this, [options]);\n    }\n\n    return datatable;\n  };\n\n  $.fn[pluginName].checkbox[\"default\"] = {\n    vars: {\n      // select all rows flag to be sent to the server\n      selectedAllRows: 'selectedAllRows',\n      // request id parameter's name\n      requestIds: 'requestIds',\n      // response path to all rows id\n      rowIds: 'meta.rowIds'\n    }\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/components/datatable/datatable.checkbox.js\n");

  /***/ }),

  /***/ "./resources/assets/theme/js/components/datatable/datatable.rtl.js":
  /*!*************************************************************************!*\
    !*** ./resources/assets/theme/js/components/datatable/datatable.rtl.js ***!
    \*************************************************************************/
  /***/ (() => {

  eval("var defaults = {\n  layout: {\n    icons: {\n      pagination: {\n        next: 'flaticon2-next',\n        prev: 'flaticon2-back',\n        first: 'flaticon2-fast-back',\n        last: 'flaticon2-fast-next',\n        more: 'flaticon-more-1'\n      },\n      rowDetail: {\n        expand: 'fa fa-caret-down',\n        collapse: 'fa fa-caret-right'\n      }\n    }\n  }\n};\n\nif (KTUtil.isRTL()) {\n  defaults = {\n    layout: {\n      icons: {\n        pagination: {\n          next: 'flaticon2-back',\n          prev: 'flaticon2-next',\n          first: 'flaticon2-fast-next',\n          last: 'flaticon2-fast-back'\n        },\n        rowDetail: {\n          collapse: 'fa fa-caret-down',\n          expand: 'fa fa-caret-right'\n        }\n      }\n    }\n  };\n}\n\n$.extend(true, $.fn.KTDatatable.defaults, defaults);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZhdWx0cyIsImxheW91dCIsImljb25zIiwicGFnaW5hdGlvbiIsIm5leHQiLCJwcmV2IiwiZmlyc3QiLCJsYXN0IiwibW9yZSIsInJvd0RldGFpbCIsImV4cGFuZCIsImNvbGxhcHNlIiwiS1RVdGlsIiwiaXNSVEwiLCIkIiwiZXh0ZW5kIiwiZm4iLCJLVERhdGF0YWJsZSJdLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lL2pzL2NvbXBvbmVudHMvZGF0YXRhYmxlL2RhdGF0YWJsZS5ydGwuanM/ODdiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmYXVsdHMgPSB7XHJcblx0bGF5b3V0OiB7XHJcblx0XHRpY29uczoge1xyXG5cdFx0XHRwYWdpbmF0aW9uOiB7XHJcblx0XHRcdFx0bmV4dDogJ2ZsYXRpY29uMi1uZXh0JyxcclxuXHRcdFx0XHRwcmV2OiAnZmxhdGljb24yLWJhY2snLFxyXG5cdFx0XHRcdGZpcnN0OiAnZmxhdGljb24yLWZhc3QtYmFjaycsXHJcblx0XHRcdFx0bGFzdDogJ2ZsYXRpY29uMi1mYXN0LW5leHQnLFxyXG5cdFx0XHRcdG1vcmU6ICdmbGF0aWNvbi1tb3JlLTEnLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHRyb3dEZXRhaWw6IHtleHBhbmQ6ICdmYSBmYS1jYXJldC1kb3duJywgY29sbGFwc2U6ICdmYSBmYS1jYXJldC1yaWdodCd9LFxyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmlmIChLVFV0aWwuaXNSVEwoKSkge1xyXG5cdGRlZmF1bHRzID0ge1xyXG5cdFx0bGF5b3V0OiB7XHJcblx0XHRcdGljb25zOiB7XHJcblx0XHRcdFx0cGFnaW5hdGlvbjoge1xyXG5cdFx0XHRcdFx0bmV4dDogJ2ZsYXRpY29uMi1iYWNrJyxcclxuXHRcdFx0XHRcdHByZXY6ICdmbGF0aWNvbjItbmV4dCcsXHJcblx0XHRcdFx0XHRmaXJzdDogJ2ZsYXRpY29uMi1mYXN0LW5leHQnLFxyXG5cdFx0XHRcdFx0bGFzdDogJ2ZsYXRpY29uMi1mYXN0LWJhY2snLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0cm93RGV0YWlsOiB7Y29sbGFwc2U6ICdmYSBmYS1jYXJldC1kb3duJywgZXhwYW5kOiAnZmEgZmEtY2FyZXQtcmlnaHQnfSxcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuJC5leHRlbmQodHJ1ZSwgJC5mbi5LVERhdGF0YWJsZS5kZWZhdWx0cywgZGVmYXVsdHMpO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVEsR0FBRztFQUNkQyxNQUFNLEVBQUU7SUFDUEMsS0FBSyxFQUFFO01BQ05DLFVBQVUsRUFBRTtRQUNYQyxJQUFJLEVBQUUsZ0JBREs7UUFFWEMsSUFBSSxFQUFFLGdCQUZLO1FBR1hDLEtBQUssRUFBRSxxQkFISTtRQUlYQyxJQUFJLEVBQUUscUJBSks7UUFLWEMsSUFBSSxFQUFFO01BTEssQ0FETjtNQVFOQyxTQUFTLEVBQUU7UUFBQ0MsTUFBTSxFQUFFLGtCQUFUO1FBQTZCQyxRQUFRLEVBQUU7TUFBdkM7SUFSTDtFQURBO0FBRE0sQ0FBZjs7QUFlQSxJQUFJQyxNQUFNLENBQUNDLEtBQVAsRUFBSixFQUFvQjtFQUNuQmIsUUFBUSxHQUFHO0lBQ1ZDLE1BQU0sRUFBRTtNQUNQQyxLQUFLLEVBQUU7UUFDTkMsVUFBVSxFQUFFO1VBQ1hDLElBQUksRUFBRSxnQkFESztVQUVYQyxJQUFJLEVBQUUsZ0JBRks7VUFHWEMsS0FBSyxFQUFFLHFCQUhJO1VBSVhDLElBQUksRUFBRTtRQUpLLENBRE47UUFPTkUsU0FBUyxFQUFFO1VBQUNFLFFBQVEsRUFBRSxrQkFBWDtVQUErQkQsTUFBTSxFQUFFO1FBQXZDO01BUEw7SUFEQTtFQURFLENBQVg7QUFhQTs7QUFFREksQ0FBQyxDQUFDQyxNQUFGLENBQVMsSUFBVCxFQUFlRCxDQUFDLENBQUNFLEVBQUYsQ0FBS0MsV0FBTCxDQUFpQmpCLFFBQWhDLEVBQTBDQSxRQUExQyIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvdGhlbWUvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLnJ0bC5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/components/datatable/datatable.rtl.js\n");

  /***/ }),

  /***/ "./resources/assets/theme/js/components/dialog.js":
  /*!********************************************************!*\
    !*** ./resources/assets/theme/js/components/dialog.js ***!
    \********************************************************/
  /***/ ((module) => {

  "use strict";
  eval(" // Component Definition \n\nvar KTDialog = function KTDialog(options) {\n  // Main object\n  var the = this; // Get element object\n\n  var element;\n  var body = KTUtil.getBody(); // Default options\n\n  var defaultOptions = {\n    'placement': 'top center',\n    'type': 'loader',\n    'width': 100,\n    'state': 'default',\n    'message': 'Loading...'\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      Plugin.init(options);\n      return the;\n    },\n\n    /**\r\n     * Handles subtoggle click toggle\r\n     */\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.state = false;\n    },\n\n    /**\r\n     * Show dialog\r\n     */\n    show: function show() {\n      Plugin.eventTrigger('show');\n      element = document.createElement(\"DIV\");\n      KTUtil.setHTML(element, the.options.message);\n      KTUtil.addClass(element, 'dialog dialog-shown');\n      KTUtil.addClass(element, 'dialog-' + the.options.state);\n      KTUtil.addClass(element, 'dialog-' + the.options.type);\n\n      if (the.options.placement == 'top center') {\n        KTUtil.addClass(element, 'dialog-top-center');\n      }\n\n      body.appendChild(element);\n      the.state = 'shown';\n      Plugin.eventTrigger('shown');\n      return the;\n    },\n\n    /**\r\n     * Hide dialog\r\n     */\n    hide: function hide() {\n      if (element) {\n        Plugin.eventTrigger('hide');\n        element.remove();\n        the.state = 'hidden';\n        Plugin.eventTrigger('hidden');\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Check shown state\r\n   */\n\n\n  the.shown = function () {\n    return the.state == 'shown';\n  };\n  /**\r\n   * Check hidden state\r\n   */\n\n\n  the.hidden = function () {\n    return the.state == 'hidden';\n  };\n  /**\r\n   * Show dialog\r\n   */\n\n\n  the.show = function () {\n    return Plugin.show();\n  };\n  /**\r\n   * Hide dialog\r\n   */\n\n\n  the.hide = function () {\n    return Plugin.hide();\n  };\n  /**\r\n   * Attach event\r\n   * @returns {KTToggle}\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   * @returns {KTToggle}\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTDialog;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lL2pzL2NvbXBvbmVudHMvZGlhbG9nLmpzLmpzIiwibWFwcGluZ3MiOiJDQUVBOztBQUNBLElBQUlBLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVNDLE9BQVQsRUFBa0I7RUFDN0I7RUFDQSxJQUFJQyxHQUFHLEdBQUcsSUFBVixDQUY2QixDQUk3Qjs7RUFDQSxJQUFJQyxPQUFKO0VBQ0EsSUFBSUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLE9BQVAsRUFBWCxDQU42QixDQVE3Qjs7RUFDQSxJQUFJQyxjQUFjLEdBQUc7SUFDakIsYUFBYyxZQURHO0lBRWpCLFFBQVUsUUFGTztJQUdqQixTQUFVLEdBSE87SUFJakIsU0FBVSxTQUpPO0lBS2pCLFdBQVk7RUFMSyxDQUFyQixDQVQ2QixDQWlCN0I7RUFDQTtFQUNBOztFQUVBLElBQUlDLE1BQU0sR0FBRztJQUNUO0FBQ1I7QUFDQTtJQUVRQyxTQUFTLEVBQUUsbUJBQVNSLE9BQVQsRUFBa0I7TUFDekJPLE1BQU0sQ0FBQ0UsSUFBUCxDQUFZVCxPQUFaO01BRUEsT0FBT0MsR0FBUDtJQUNILENBVFE7O0lBV1Q7QUFDUjtBQUNBO0lBQ1FRLElBQUksRUFBRSxjQUFTVCxPQUFULEVBQWtCO01BQ3BCQyxHQUFHLENBQUNTLE1BQUosR0FBYSxFQUFiLENBRG9CLENBR3BCOztNQUNBVCxHQUFHLENBQUNELE9BQUosR0FBY0ksTUFBTSxDQUFDTyxVQUFQLENBQWtCLEVBQWxCLEVBQXNCTCxjQUF0QixFQUFzQ04sT0FBdEMsQ0FBZDtNQUVBQyxHQUFHLENBQUNXLEtBQUosR0FBWSxLQUFaO0lBQ0gsQ0FyQlE7O0lBdUJUO0FBQ1I7QUFDQTtJQUNRQyxJQUFJLEVBQUUsZ0JBQVc7TUFDYk4sTUFBTSxDQUFDTyxZQUFQLENBQW9CLE1BQXBCO01BRUFaLE9BQU8sR0FBR2EsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQVY7TUFDQVosTUFBTSxDQUFDYSxPQUFQLENBQWVmLE9BQWYs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T0FBT3BDLEdBQUcsQ0FBQ1csS0FBSixJQUFhLFFBQXBCO0VBQ0gsQ0FGRDtFQUlBO0FBQ0o7QUFDQTs7O0VBQ0lYLEdBQUcsQ0FBQ1ksSUFBSixHQUFXLFlBQVc7SUFDbEIsT0FBT04sTUFBTSxDQUFDTSxJQUFQLEVBQVA7RUFDSCxDQUZEO0VBSUE7QUFDSjtBQUNBOzs7RUFDSVosR0FBRyxDQUFDc0IsSUFBSixHQUFXLFlBQVc7SUFDbEIsT0FBT2hCLE1BQU0sQ0FBQ2dCLElBQVAsRUFBUDtFQUNILENBRkQ7RUFJQTtBQUNKO0FBQ0E7QUFDQTs7O0VBQ0l0QixHQUFHLENBQUNxQyxFQUFKLEdBQVMsVUFBU2IsSUFBVCxFQUFlTSxPQUFmLEVBQXdCO0lBQzdCLE9BQU94QixNQUFNLENBQUMwQixRQUFQLENBQWdCUixJQUFoQixFQUFzQk0sT0FBdEIsQ0FBUDtFQUNILENBRkQ7RUFJQTtBQUNKO0FBQ0E7QUFDQTs7O0VBQ0k5QixHQUFHLENBQUM0QixHQUFKLEdBQVUsVUFBU0osSUFBVCxFQUFlTSxPQUFmLEVBQXdCO0lBQzlCLE9BQU94QixNQUFNLENBQUMwQixRQUFQLENBQWdCUixJQUFoQixFQUFzQk0sT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtFQUNILENBRkQsQ0ExSzZCLENBOEs3Qjs7O0VBQ0F4QixNQUFNLENBQUNDLFNBQVAsQ0FBaUIrQixLQUFqQixDQUF1QnRDLEdBQXZCLEVBQTRCLENBQUNELE9BQUQsQ0FBNUI7RUFFQSxPQUFPQyxHQUFQO0FBQ0gsQ0FsTEQsQyxDQW9MQTs7O0FBQ0EsSUFBSSxTQUFpQyxPQUFPdUMsTUFBTSxDQUFDQyxPQUFkLEtBQTBCLFdBQS9ELEVBQTRFO0VBQ3hFRCxNQUFNLENBQUNDLE9BQVAsR0FBaUIxQyxRQUFqQjtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy90aGVtZS9qcy9jb21wb25lbnRzL2RpYWxvZy5qcz8zZjJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ29tcG9uZW50IERlZmluaXRpb24gXHJcbnZhciBLVERpYWxvZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIC8vIE1haW4gb2JqZWN0XHJcbiAgICB2YXIgdGhlID0gdGhpcztcclxuXHJcbiAgICAvLyBHZXQgZWxlbWVudCBvYmplY3RcclxuICAgIHZhciBlbGVtZW50O1xyXG4gICAgdmFyIGJvZHkgPSBLVFV0aWwuZ2V0Qm9keSgpO1xyXG5cclxuICAgIC8vIERlZmF1bHQgb3B0aW9uc1xyXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgICAgICdwbGFjZW1lbnQnIDogJ3RvcCBjZW50ZXInLFxyXG4gICAgICAgICd0eXBlJyAgOiAnbG9hZGVyJyxcclxuICAgICAgICAnd2lkdGgnIDogMTAwLFxyXG4gICAgICAgICdzdGF0ZScgOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgJ21lc3NhZ2UnIDogJ0xvYWRpbmcuLi4nXHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFByaXZhdGUgTWV0aG9kcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICB2YXIgUGx1Z2luID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnN0cnVjdFxyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgUGx1Z2luLmluaXQob3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhhbmRsZXMgc3VidG9nZ2xlIGNsaWNrIHRvZ2dsZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gbWVyZ2UgZGVmYXVsdCBhbmQgdXNlciBkZWZpbmVkIG9wdGlvbnNcclxuICAgICAgICAgICAgdGhlLm9wdGlvbnMgPSBLVFV0aWwuZGVlcEV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgdGhlLnN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2hvdyBkaWFsb2dcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignc2hvdycpO1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7XHJcbiAgICAgICAgICAgIEtUVXRpbC5zZXRIVE1MKGVsZW1lbnQsIHRoZS5vcHRpb25zLm1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGVsZW1lbnQsICdkaWFsb2cgZGlhbG9nLXNob3duJyk7XHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbGVtZW50LCAnZGlhbG9nLScgKyB0aGUub3B0aW9ucy5zdGF0ZSk7XHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbGVtZW50LCAnZGlhbG9nLScgKyB0aGUub3B0aW9ucy50eXBlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ3RvcCBjZW50ZXInKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWxlbWVudCwgJ2RpYWxvZy10b3AtY2VudGVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICB0aGUuc3RhdGUgPSAnc2hvd24nO1xyXG5cclxuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignc2hvd24nKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGlkZSBkaWFsb2dcclxuICAgICAgICAgKi9cclxuICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2hpZGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhlLnN0YXRlID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVHJpZ2dlciBldmVudHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBldmVudFRyaWdnZXI6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGUuZXZlbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGUuZXZlbnRzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5uYW1lID09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQub25lID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmZpcmVkID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUuZXZlbnRzW2ldLmZpcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24obmFtZSwgaGFuZGxlciwgb25lKSB7XHJcbiAgICAgICAgICAgIHRoZS5ldmVudHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcclxuICAgICAgICAgICAgICAgIG9uZTogb25lLFxyXG4gICAgICAgICAgICAgICAgZmlyZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBkZWZhdWx0IG9wdGlvbnNcclxuICAgICAqL1xyXG5cclxuICAgIHRoZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgc2hvd24gc3RhdGVcclxuICAgICAqL1xyXG4gICAgdGhlLnNob3duID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoZS5zdGF0ZSA9PSAnc2hvd24nO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGhpZGRlbiBzdGF0ZVxyXG4gICAgICovXHJcbiAgICB0aGUuaGlkZGVuID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoZS5zdGF0ZSA9PSAnaGlkZGVuJztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICB0aGUuc2hvdyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uc2hvdygpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIHRoZS5oaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5oaWRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXR0YWNoIGV2ZW50XHJcbiAgICAgKiBAcmV0dXJucyB7S1RUb2dnbGV9XHJcbiAgICAgKi9cclxuICAgIHRoZS5vbiA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaCBldmVudCB0aGF0IHdpbGwgYmUgZmlyZWQgb25jZVxyXG4gICAgICogQHJldHVybnMge0tUVG9nZ2xlfVxyXG4gICAgICovXHJcbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uYWRkRXZlbnQobmFtZSwgaGFuZGxlciwgdHJ1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENvbnN0cnVjdCBwbHVnaW5cclxuICAgIFBsdWdpbi5jb25zdHJ1Y3QuYXBwbHkodGhlLCBbb3B0aW9uc10pO1xyXG5cclxuICAgIHJldHVybiB0aGU7XHJcbn07XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1REaWFsb2c7XHJcbn1cclxuIl0sIm5hbWVzIjpbIktURGlhbG9nIiwib3B0aW9ucyIsInRoZSIsImVsZW1lbnQiLCJib2R5IiwiS1RVdGlsIiwiZ2V0Qm9keSIsImRlZmF1bHRPcHRpb25zIiwiUGx1Z2luIiwiY29uc3RydWN0IiwiaW5pdCIsImV2ZW50cyIsImRlZXBFeHRlbmQiLCJzdGF0ZSIsInNob3ciLCJldmVudFRyaWdnZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRIVE1MIiwibWVzc2FnZSIsImFkZENsYXNzIiwidHlwZSIsInBsYWNlbWVudCIsImFwcGVuZENoaWxkIiwiaGlkZSIsInJlbW92ZSIsIm5hbWUiLCJpIiwibGVuZ3RoIiwiZXZlbnQiLCJvbmUiLCJmaXJlZCIsImhhbmRsZXIiLCJjYWxsIiwiYWRkRXZlbnQiLCJwdXNoIiwic2V0RGVmYXVsdHMiLCJzaG93biIsImhpZGRlbiIsIm9uIiwiYXBwbHkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/components/dialog.js\n");

  /***/ }),


  /***/ "./resources/assets/theme/js/components/util.js":
  /*!******************************************************!*\
    !*** ./resources/assets/theme/js/components/util.js ***!
    \******************************************************/
  /***/ ((module) => {

  "use strict";
  eval("\n/**\r\n * @class KTUtil  base utilize class that privides helper functions\r\n */\n// Polyfills\n\n/**\r\n * Element.matches() polyfill (simple version)\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\r\n */\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n/**\r\n * Element.closest() polyfill\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\r\n */\n\n\nif (!Element.prototype.closest) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n\n    return null;\n  };\n}\n/**\r\n * ChildNode.remove() polyfill\r\n * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/\r\n * @author Chris Ferdinandi\r\n * @license MIT\r\n */\n\n\n(function (elem) {\n  for (var i = 0; i < elem.length; i++) {\n    if (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;\n\n    window[elem[i]].prototype.remove = function () {\n      this.parentNode.removeChild(this);\n    };\n  }\n})(['Element', 'CharacterData', 'DocumentType']); //\n// requestAnimationFrame polyfill by Erik Möller.\n//  With fixes from Paul Irish and Tino Zijdel\n//\n//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n//\n//  MIT license\n//\n\n\n(function () {\n  var lastTime = 0;\n  var vendors = ['webkit', 'moz'];\n\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n\n  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {\n    var currTime = new Date().getTime();\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n    var id = window.setTimeout(function () {\n      callback(currTime + timeToCall);\n    }, timeToCall);\n    lastTime = currTime + timeToCall;\n    return id;\n  };\n  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n    clearTimeout(id);\n  };\n})(); // Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md\n\n\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('prepend')) {\n      return;\n    }\n\n    Object.defineProperty(item, 'prepend', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function prepend() {\n        var argArr = Array.prototype.slice.call(arguments),\n            docFrag = document.createDocumentFragment();\n        argArr.forEach(function (argItem) {\n          var isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n        this.insertBefore(docFrag, this.firstChild);\n      }\n    });\n  });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]); // getAttributeNames\n\n\nif (Element.prototype.getAttributeNames == undefined) {\n  Element.prototype.getAttributeNames = function () {\n    var attributes = this.attributes;\n    var length = attributes.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      result[i] = attributes[i].name;\n    }\n\n    return result;\n  };\n} // Global variables\n\n\nwindow.KTUtilElementDataStore = {};\nwindow.KTUtilElementDataStoreID = 0;\nwindow.KTUtilDelegatedEventHandlers = {};\nwindow.MemoryCached = new Date().getTime();\n\nvar KTUtil = function () {\n  var resizeHandlers = [];\n  /** @type {object} breakpoints The device width breakpoints **/\n\n  var breakpoints = {\n    sm: 544,\n    // Small screen / phone\n    md: 768,\n    // Medium screen / tablet\n    lg: 992,\n    // Large screen / desktop\n    xl: 1200 // Extra large screen / wide desktop\n\n  };\n  /**\r\n   * Handle window resize event with some\r\n   * delay to attach event handlers upon resize complete\r\n   */\n\n  var _windowResizeHandler = function _windowResizeHandler() {\n    var _runResizeHandlers = function _runResizeHandlers() {\n      // reinitialize other subscribed elements\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        var each = resizeHandlers[i];\n        each.call();\n      }\n    };\n\n    var timer;\n    window.addEventListener('resize', function () {\n      KTUtil.throttle(timer, function () {\n        _runResizeHandlers();\n      }, 200);\n    });\n  };\n\n  return {\n    /**\r\n     * Class main initializer.\r\n     * @param {object} settings.\r\n     * @returns null\r\n     */\n    //main function to initiate the theme\n    init: function init(settings) {\n      if (settings && settings.breakpoints) {\n        breakpoints = settings.breakpoints;\n      }\n\n      _windowResizeHandler();\n    },\n\n    /**\r\n     * Adds window resize event handler.\r\n     * @param {function} callback function.\r\n     */\n    addResizeHandler: function addResizeHandler(callback) {\n      resizeHandlers.push(callback);\n    },\n\n    /**\r\n     * Removes window resize event handler.\r\n     * @param {function} callback function.\r\n     */\n    removeResizeHandler: function removeResizeHandler(callback) {\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        if (callback === resizeHandlers[i]) {\n          delete resizeHandlers[i];\n        }\n      }\n    },\n\n    /**\r\n     * Trigger window resize handlers.\r\n     */\n    runResizeHandlers: function runResizeHandlers() {\n      _runResizeHandlers();\n    },\n    resize: function resize() {\n      if (typeof Event === 'function') {\n        // modern browsers\n        window.dispatchEvent(new Event('resize'));\n      } else {\n        // for IE and other old browsers\n        // causes deprecation warning on modern browsers\n        var evt = window.document.createEvent('UIEvents');\n        evt.initUIEvent('resize', true, false, window, 0);\n        window.dispatchEvent(evt);\n      }\n    },\n\n    /**\r\n     * Get GET parameter value from URL.\r\n     * @param {string} paramName Parameter name.\r\n     * @returns {string}\r\n     */\n    getURLParam: function getURLParam(paramName) {\n      var searchString = window.location.search.substring(1),\n          i,\n          val,\n          params = searchString.split(\"&\");\n\n      for (i = 0; i < params.length; i++) {\n        val = params[i].split(\"=\");\n\n        if (val[0] == paramName) {\n          return unescape(val[1]);\n        }\n      }\n\n      return null;\n    },\n\n    /**\r\n     * Checks whether current device is mobile touch.\r\n     * @returns {boolean}\r\n     */\n    isMobileDevice: function isMobileDevice() {\n      var test = this.getViewPort().width < this.getBreakpoint('lg') ? true : false;\n\n      if (test === false) {\n        // For use within normal web clients\n        test = navigator.userAgent.match(/iPad/i) != null;\n      }\n\n      return test;\n    },\n\n    /**\r\n     * Checks whether current device is desktop.\r\n     * @returns {boolean}\r\n     */\n    isDesktopDevice: function isDesktopDevice() {\n      return KTUtil.isMobileDevice() ? false : true;\n    },\n\n    /**\r\n     * Gets browser window viewport size. Ref:\r\n     * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\r\n     * @returns {object}\r\n     */\n    getViewPort: function getViewPort() {\n      var e = window,\n          a = 'inner';\n\n      if (!('innerWidth' in window)) {\n        a = 'client';\n        e = document.documentElement || document.body;\n      }\n\n      return {\n        width: e[a + 'Width'],\n        height: e[a + 'Height']\n      };\n    },\n\n    /**\r\n     * Checks whether given device mode is currently activated.\r\n     * @param {string} mode Responsive mode name(e.g: desktop,\r\n     *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\r\n     * @returns {boolean}\r\n     */\n    isInResponsiveRange: function isInResponsiveRange(mode) {\n      var breakpoint = this.getViewPort().width;\n\n      if (mode == 'general') {\n        return true;\n      } else if (mode == 'desktop' && breakpoint >= this.getBreakpoint('lg') + 1) {\n        return true;\n      } else if (mode == 'tablet' && breakpoint >= this.getBreakpoint('md') + 1 && breakpoint < this.getBreakpoint('lg')) {\n        return true;\n      } else if (mode == 'mobile' && breakpoint <= this.getBreakpoint('md')) {\n        return true;\n      } else if (mode == 'desktop-and-tablet' && breakpoint >= this.getBreakpoint('md') + 1) {\n        return true;\n      } else if (mode == 'tablet-and-mobile' && breakpoint <= this.getBreakpoint('lg')) {\n        return true;\n      } else if (mode == 'minimal-desktop-and-below' && breakpoint <= this.getBreakpoint('xl')) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Checks whether given device mode is currently activated.\r\n     * @param {string} mode Responsive mode name(e.g: desktop,\r\n     *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\r\n     * @returns {boolean}\r\n     */\n    isBreakpointUp: function isBreakpointUp(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width >= breakpoint;\n    },\n    isBreakpointDown: function isBreakpointDown(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width < breakpoint;\n    },\n\n    /**\r\n     * Generates unique ID for give prefix.\r\n     * @param {string} prefix Prefix for generated ID\r\n     * @returns {boolean}\r\n     */\n    getUniqueID: function getUniqueID(prefix) {\n      return prefix + Math.floor(Math.random() * new Date().getTime());\n    },\n\n    /**\r\n     * Gets window width for give breakpoint mode.\r\n     * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)\r\n     * @returns {number}\r\n     */\n    getBreakpoint: function getBreakpoint(mode) {\n      return breakpoints[mode];\n    },\n\n    /**\r\n     * Checks whether object has property matchs given key path.\r\n     * @param {object} obj Object contains values paired with given key path\r\n     * @param {string} keys Keys path seperated with dots\r\n     * @returns {object}\r\n     */\n    isset: function isset(obj, keys) {\n      var stone;\n      keys = keys || '';\n\n      if (keys.indexOf('[') !== -1) {\n        throw new Error('Unsupported object path notation.');\n      }\n\n      keys = keys.split('.');\n\n      do {\n        if (obj === undefined) {\n          return false;\n        }\n\n        stone = keys.shift();\n\n        if (!obj.hasOwnProperty(stone)) {\n          return false;\n        }\n\n        obj = obj[stone];\n      } while (keys.length);\n\n      return true;\n    },\n\n    /**\r\n     * Gets highest z-index of the given element parents\r\n     * @param {object} el jQuery element object\r\n     * @returns {number}\r\n     */\n    getHighestZindex: function getHighestZindex(el) {\n      var position, value;\n\n      while (el && el !== document) {\n        // Ignore z-index if position is set to a value where z-index is ignored by the browser\n        // This makes behavior of this function consistent across browsers\n        // WebKit always returns auto if the element is positioned\n        position = KTUtil.css(el, 'position');\n\n        if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n          // IE returns 0 when zIndex is not specified\n          // other browsers return a string\n          // we ignore the case of nested elements with an explicit value of 0\n          // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n          value = parseInt(KTUtil.css(el, 'z-index'));\n\n          if (!isNaN(value) && value !== 0) {\n            return value;\n          }\n        }\n\n        el = el.parentNode;\n      }\n\n      return null;\n    },\n\n    /**\r\n     * Checks whether the element has any parent with fixed positionfreg\r\n     * @param {object} el jQuery element object\r\n     * @returns {boolean}\r\n     */\n    hasFixedPositionedParent: function hasFixedPositionedParent(el) {\n      var position;\n\n      while (el && el !== document) {\n        position = KTUtil.css(el, 'position');\n\n        if (position === \"fixed\") {\n          return true;\n        }\n\n        el = el.parentNode;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Simulates delay\r\n     */\n    sleep: function sleep(milliseconds) {\n      var start = new Date().getTime();\n\n      for (var i = 0; i < 1e7; i++) {\n        if (new Date().getTime() - start > milliseconds) {\n          break;\n        }\n      }\n    },\n\n    /**\r\n     * Gets randomly generated integer value within given min and max range\r\n     * @param {number} min Range start value\r\n     * @param {number} max Range end value\r\n     * @returns {number}\r\n     */\n    getRandomInt: function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\r\n     * Checks whether Angular library is included\r\n     * @returns {boolean}\r\n     */\n    isAngularVersion: function isAngularVersion() {\n      return window.Zone !== undefined ? true : false;\n    },\n    // Deep extend:  $.extend(true, {}, objA, objB);\n    deepExtend: function deepExtend(out) {\n      out = out || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        if (!obj) continue;\n\n        for (var key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          } // based on https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n\n\n          if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n            out[key] = KTUtil.deepExtend(out[key], obj[key]);\n            continue;\n          }\n\n          out[key] = obj[key];\n        }\n      }\n\n      return out;\n    },\n    // extend:  $.extend({}, objA, objB);\n    extend: function extend(out) {\n      out = out || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        if (!arguments[i]) continue;\n\n        for (var key in arguments[i]) {\n          if (arguments[i].hasOwnProperty(key)) out[key] = arguments[i][key];\n        }\n      }\n\n      return out;\n    },\n    getById: function getById(el) {\n      if (typeof el === 'string') {\n        return document.getElementById(el);\n      } else {\n        return el;\n      }\n    },\n    getByTag: function getByTag(query) {\n      return document.getElementsByTagName(query);\n    },\n    getByTagName: function getByTagName(query) {\n      return document.getElementsByTagName(query);\n    },\n    getByClass: function getByClass(query) {\n      return document.getElementsByClassName(query);\n    },\n    getBody: function getBody() {\n      return document.getElementsByTagName('body')[0];\n    },\n\n    /**\r\n     * Checks whether the element has given classes\r\n     * @param {object} el jQuery element object\r\n     * @param {string} Classes string\r\n     * @returns {boolean}\r\n     */\n    hasClasses: function hasClasses(el, classes) {\n      if (!el) {\n        return;\n      }\n\n      var classesArr = classes.split(\" \");\n\n      for (var i = 0; i < classesArr.length; i++) {\n        if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    hasClass: function hasClass(el, className) {\n      if (!el) {\n        return;\n      }\n\n      return el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);\n    },\n    addClass: function addClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n\n      var classNames = className.split(' ');\n\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          if (classNames[i] && classNames[i].length > 0) {\n            el.classList.add(KTUtil.trim(classNames[i]));\n          }\n        }\n      } else if (!KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className += ' ' + KTUtil.trim(classNames[x]);\n        }\n      }\n    },\n    removeClass: function removeClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n\n      var classNames = className.split(' ');\n\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          el.classList.remove(KTUtil.trim(classNames[i]));\n        }\n      } else if (KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className = el.className.replace(new RegExp('\\\\b' + KTUtil.trim(classNames[x]) + '\\\\b', 'g'), '');\n        }\n      }\n    },\n    triggerCustomEvent: function triggerCustomEvent(el, eventName, data) {\n      var event;\n\n      if (window.CustomEvent) {\n        event = new CustomEvent(eventName, {\n          detail: data\n        });\n      } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, true, true, data);\n      }\n\n      el.dispatchEvent(event);\n    },\n    triggerEvent: function triggerEvent(node, eventName) {\n      // Make sure we use the ownerDocument from the provided node to avoid cross-window problems\n      var doc;\n\n      if (node.ownerDocument) {\n        doc = node.ownerDocument;\n      } else if (node.nodeType == 9) {\n        // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n        doc = node;\n      } else {\n        throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n      }\n\n      if (node.dispatchEvent) {\n        // Gecko-style approach (now the standard) takes more work\n        var eventClass = \"\"; // Different events have different event classes.\n        // If this switch statement can't map an eventName to an eventClass,\n        // the event firing is going to fail.\n\n        switch (eventName) {\n          case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n\n          case \"mouseenter\":\n          case \"mouseleave\":\n          case \"mousedown\":\n          case \"mouseup\":\n            eventClass = \"MouseEvents\";\n            break;\n\n          case \"focus\":\n          case \"change\":\n          case \"blur\":\n          case \"select\":\n            eventClass = \"HTMLEvents\";\n            break;\n\n          default:\n            throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n            break;\n        }\n\n        var event = doc.createEvent(eventClass);\n        var bubbles = eventName == \"change\" ? false : true;\n        event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.\n\n        event.synthetic = true; // allow detection of synthetic events\n        // The second parameter says go ahead with the default action\n\n        node.dispatchEvent(event, true);\n      } else if (node.fireEvent) {\n        // IE-old school style\n        var event = doc.createEventObject();\n        event.synthetic = true; // allow detection of synthetic events\n\n        node.fireEvent(\"on\" + eventName, event);\n      }\n    },\n    index: function index(el) {\n      var c = el.parentNode.children,\n          i = 0;\n\n      for (; i < c.length; i++) {\n        if (c[i] == el) return i;\n      }\n    },\n    trim: function trim(string) {\n      return string.trim();\n    },\n    eventTriggered: function eventTriggered(e) {\n      if (e.currentTarget.dataset.triggered) {\n        return true;\n      } else {\n        e.currentTarget.dataset.triggered = true;\n        return false;\n      }\n    },\n    remove: function remove(el) {\n      if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    },\n    find: function find(parent, query) {\n      parent = KTUtil.getById(parent);\n\n      if (parent) {\n        return parent.querySelector(query);\n      }\n    },\n    findAll: function findAll(parent, query) {\n      parent = KTUtil.getById(parent);\n\n      if (parent) {\n        return parent.querySelectorAll(query);\n      }\n    },\n    insertAfter: function insertAfter(el, referenceNode) {\n      return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);\n    },\n    parents: function parents(elem, selector) {\n      // Element.matches() polyfill\n      if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n          var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n              i = matches.length;\n\n          while (--i >= 0 && matches.item(i) !== this) {}\n\n          return i > -1;\n        };\n      } // Set up a parent array\n\n\n      var parents = []; // Push each parent element to the array\n\n      for (; elem && elem !== document; elem = elem.parentNode) {\n        if (selector) {\n          if (elem.matches(selector)) {\n            parents.push(elem);\n          }\n\n          continue;\n        }\n\n        parents.push(elem);\n      } // Return our parent array\n\n\n      return parents;\n    },\n    children: function children(el, selector, log) {\n      if (!el || !el.childNodes) {\n        return;\n      }\n\n      var result = [],\n          i = 0,\n          l = el.childNodes.length;\n\n      for (var i; i < l; ++i) {\n        if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {\n          result.push(el.childNodes[i]);\n        }\n      }\n\n      return result;\n    },\n    child: function child(el, selector, log) {\n      var children = KTUtil.children(el, selector, log);\n      return children ? children[0] : null;\n    },\n    matches: function matches(el, selector, log) {\n      var p = Element.prototype;\n\n      var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {\n        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n      };\n\n      if (el && el.tagName) {\n        return f.call(el, selector);\n      } else {\n        return false;\n      }\n    },\n    data: function data(el) {\n      return {\n        set: function set(name, data) {\n          if (!el) {\n            return;\n          }\n\n          if (el.customDataTag === undefined) {\n            window.KTUtilElementDataStoreID++;\n            el.customDataTag = window.KTUtilElementDataStoreID;\n          }\n\n          if (window.KTUtilElementDataStore[el.customDataTag] === undefined) {\n            window.KTUtilElementDataStore[el.customDataTag] = {};\n          }\n\n          window.KTUtilElementDataStore[el.customDataTag][name] = data;\n        },\n        get: function get(name) {\n          if (!el) {\n            return;\n          }\n\n          if (el.customDataTag === undefined) {\n            return null;\n          }\n\n          return this.has(name) ? window.KTUtilElementDataStore[el.customDataTag][name] : null;\n        },\n        has: function has(name) {\n          if (!el) {\n            return false;\n          }\n\n          if (el.customDataTag === undefined) {\n            return false;\n          }\n\n          return window.KTUtilElementDataStore[el.customDataTag] && window.KTUtilElementDataStore[el.customDataTag][name] ? true : false;\n        },\n        remove: function remove(name) {\n          if (el && this.has(name)) {\n            delete window.KTUtilElementDataStore[el.customDataTag][name];\n          }\n        }\n      };\n    },\n    outerWidth: function outerWidth(el, margin) {\n      var width;\n\n      if (margin === true) {\n        width = parseFloat(el.offsetWidth);\n        width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));\n        return parseFloat(width);\n      } else {\n        width = parseFloat(el.offsetWidth);\n        return width;\n      }\n    },\n    offset: function offset(el) {\n      var rect, win;\n\n      if (!el) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!el.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = el.getBoundingClientRect();\n      win = el.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    height: function height(el) {\n      return KTUtil.css(el, 'height');\n    },\n    outerHeight: function outerHeight(el, withMargin) {\n      var height = el.offsetHeight;\n      var style;\n\n      if (typeof withMargin !== 'undefined' && withMargin === true) {\n        style = getComputedStyle(el);\n        height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n        return height;\n      } else {\n        return height;\n      }\n    },\n    visible: function visible(el) {\n      return !(el.offsetWidth === 0 && el.offsetHeight === 0);\n    },\n    attr: function attr(el, name, value) {\n      if (el == undefined) {\n        return;\n      }\n\n      if (value !== undefined) {\n        el.setAttribute(name, value);\n      } else {\n        return el.getAttribute(name);\n      }\n    },\n    hasAttr: function hasAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n\n      return el.getAttribute(name) ? true : false;\n    },\n    removeAttr: function removeAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n\n      el.removeAttribute(name);\n    },\n    animate: function animate(from, to, duration, update, easing, done) {\n      /**\r\n       * TinyAnimate.easings\r\n       *  Adapted from jQuery Easing\r\n       */\n      var easings = {};\n      var easing;\n\n      easings.linear = function (t, b, c, d) {\n        return c * t / d + b;\n      };\n\n      easing = easings.linear; // Early bail out if called incorrectly\n\n      if (typeof from !== 'number' || typeof to !== 'number' || typeof duration !== 'number' || typeof update !== 'function') {\n        return;\n      } // Create mock done() function if necessary\n\n\n      if (typeof done !== 'function') {\n        done = function done() {};\n      } // Pick implementation (requestAnimationFrame | setTimeout)\n\n\n      var rAF = window.requestAnimationFrame || function (callback) {\n        window.setTimeout(callback, 1000 / 50);\n      }; // Animation loop\n\n\n      var canceled = false;\n      var change = to - from;\n\n      function loop(timestamp) {\n        var time = (timestamp || +new Date()) - start;\n\n        if (time >= 0) {\n          update(easing(time, from, change, duration));\n        }\n\n        if (time >= 0 && time >= duration) {\n          update(to);\n          done();\n        } else {\n          rAF(loop);\n        }\n      }\n\n      update(from); // Start animation loop\n\n      var start = window.performance && window.performance.now ? window.performance.now() : +new Date();\n      rAF(loop);\n    },\n    actualCss: function actualCss(el, prop, cache) {\n      var css = '';\n\n      if (el instanceof HTMLElement === false) {\n        return;\n      }\n\n      if (!el.getAttribute('kt-hidden-' + prop) || cache === false) {\n        var value; // the element is hidden so:\n        // making the el block so we can meassure its height but still be hidden\n\n        css = el.style.cssText;\n        el.style.cssText = 'position: absolute; visibility: hidden; display: block;';\n\n        if (prop == 'width') {\n          value = el.offsetWidth;\n        } else if (prop == 'height') {\n          value = el.offsetHeight;\n        }\n\n        el.style.cssText = css; // store it in cache\n\n        el.setAttribute('kt-hidden-' + prop, value);\n        return parseFloat(value);\n      } else {\n        // store it in cache\n        return parseFloat(el.getAttribute('kt-hidden-' + prop));\n      }\n    },\n    actualHeight: function actualHeight(el, cache) {\n      return KTUtil.actualCss(el, 'height', cache);\n    },\n    actualWidth: function actualWidth(el, cache) {\n      return KTUtil.actualCss(el, 'width', cache);\n    },\n    getScroll: function getScroll(element, method) {\n      // The passed in `method` value should be 'Top' or 'Left'\n      method = 'scroll' + method;\n      return element == window || element == document ? self[method == 'scrollTop' ? 'pageYOffset' : 'pageXOffset'] || browserSupportsBoxModel && document.documentElement[method] || document.body[method] : element[method];\n    },\n    css: function css(el, styleProp, value) {\n      if (!el) {\n        return;\n      }\n\n      if (value !== undefined) {\n        el.style[styleProp] = value;\n      } else {\n        var defaultView = (el.ownerDocument || document).defaultView; // W3C standard way:\n\n        if (defaultView && defaultView.getComputedStyle) {\n          // sanitize property name to css notation\n          // (hyphen separated words eg. font-Size)\n          styleProp = styleProp.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n          return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n        } else if (el.currentStyle) {\n          // IE\n          // sanitize property name to camelCase\n          styleProp = styleProp.replace(/\\-(\\w)/g, function (str, letter) {\n            return letter.toUpperCase();\n          });\n          value = el.currentStyle[styleProp]; // convert other units to pixels on IE\n\n          if (/^\\d+(em|pt|%|ex)?$/i.test(value)) {\n            return function (value) {\n              var oldLeft = el.style.left,\n                  oldRsLeft = el.runtimeStyle.left;\n              el.runtimeStyle.left = el.currentStyle.left;\n              el.style.left = value || 0;\n              value = el.style.pixelLeft + \"px\";\n              el.style.left = oldLeft;\n              el.runtimeStyle.left = oldRsLeft;\n              return value;\n            }(value);\n          }\n\n          return value;\n        }\n      }\n    },\n    slide: function slide(el, dir, speed, callback, recalcMaxHeight) {\n      if (!el || dir == 'up' && KTUtil.visible(el) === false || dir == 'down' && KTUtil.visible(el) === true) {\n        return;\n      }\n\n      speed = speed ? speed : 600;\n      var calcHeight = KTUtil.actualHeight(el);\n      var calcPaddingTop = false;\n      var calcPaddingBottom = false;\n\n      if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {\n        KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));\n      }\n\n      if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {\n        KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));\n      }\n\n      if (KTUtil.data(el).has('slide-padding-top')) {\n        calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));\n      }\n\n      if (KTUtil.data(el).has('slide-padding-bottom')) {\n        calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));\n      }\n\n      if (dir == 'up') {\n        // up\n        el.style.cssText = 'display: block; overflow: hidden;';\n\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            el.style.paddingTop = calcPaddingTop - value + 'px';\n          }, 'linear');\n        }\n\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = calcPaddingBottom - value + 'px';\n          }, 'linear');\n        }\n\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = calcHeight - value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = 'none';\n\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      } else if (dir == 'down') {\n        // down\n        el.style.cssText = 'display: block; overflow: hidden;';\n\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            //\n            el.style.paddingTop = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingTop = '';\n          });\n        }\n\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingBottom = '';\n          });\n        }\n\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = '';\n          el.style.overflow = '';\n\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      }\n    },\n    slideUp: function slideUp(el, speed, callback) {\n      KTUtil.slide(el, 'up', speed, callback);\n    },\n    slideDown: function slideDown(el, speed, callback) {\n      KTUtil.slide(el, 'down', speed, callback);\n    },\n    show: function show(el, display) {\n      if (typeof el !== 'undefined') {\n        el.style.display = display ? display : 'block';\n      }\n    },\n    hide: function hide(el) {\n      if (typeof el !== 'undefined') {\n        el.style.display = 'none';\n      }\n    },\n    addEvent: function addEvent(el, type, handler, one) {\n      if (typeof el !== 'undefined' && el !== null) {\n        el.addEventListener(type, handler);\n      }\n    },\n    removeEvent: function removeEvent(el, type, handler) {\n      if (el !== null) {\n        el.removeEventListener(type, handler);\n      }\n    },\n    on: function on(element, selector, event, handler) {\n      if (!selector) {\n        return;\n      }\n\n      var eventId = KTUtil.getUniqueID('event');\n\n      window.KTUtilDelegatedEventHandlers[eventId] = function (e) {\n        var targets = element.querySelectorAll(selector);\n        var target = e.target;\n\n        while (target && target !== element) {\n          for (var i = 0, j = targets.length; i < j; i++) {\n            if (target === targets[i]) {\n              handler.call(target, e);\n            }\n          }\n\n          target = target.parentNode;\n        }\n      };\n\n      KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      return eventId;\n    },\n    off: function off(element, event, eventId) {\n      if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {\n        return;\n      }\n\n      KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      delete window.KTUtilDelegatedEventHandlers[eventId];\n    },\n    one: function onetime(el, type, callback) {\n      el.addEventListener(type, function callee(e) {\n        // remove event\n        if (e.target && e.target.removeEventListener) {\n          e.target.removeEventListener(e.type, callee);\n        } // need to verify from https://themeforest.net/author_dashboard#comment_23615588\n\n\n        if (el && el.removeEventListener) {\n          e.currentTarget.removeEventListener(e.type, callee);\n        } // call handler\n\n\n        return callback(e);\n      });\n    },\n    hash: function hash(str) {\n      var hash = 0,\n          i,\n          chr;\n      if (str.length === 0) return hash;\n\n      for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n      }\n\n      return hash;\n    },\n    animateClass: function animateClass(el, animationName, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n\n      KTUtil.addClass(el, 'animated ' + animationName);\n      KTUtil.one(el, animation, function () {\n        KTUtil.removeClass(el, 'animated ' + animationName);\n      });\n\n      if (callback) {\n        KTUtil.one(el, animation, callback);\n      }\n    },\n    transitionEnd: function transitionEnd(el, callback) {\n      var transition;\n      var transitions = {\n        transition: 'transitionend',\n        OTransition: 'oTransitionEnd',\n        MozTransition: 'mozTransitionEnd',\n        WebkitTransition: 'webkitTransitionEnd',\n        msTransition: 'msTransitionEnd'\n      };\n\n      for (var t in transitions) {\n        if (el.style[t] !== undefined) {\n          transition = transitions[t];\n        }\n      }\n\n      KTUtil.one(el, transition, callback);\n    },\n    animationEnd: function animationEnd(el, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n\n      KTUtil.one(el, animation, callback);\n    },\n    animateDelay: function animateDelay(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-delay', value);\n      }\n    },\n    animateDuration: function animateDuration(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-duration', value);\n      }\n    },\n    scrollTo: function scrollTo(target, offset, duration) {\n      var duration = duration ? duration : 500;\n      var targetPos = target ? KTUtil.offset(target).top : 0;\n      var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      var from, to;\n\n      if (offset) {\n        scrollPos += offset;\n      }\n\n      from = scrollPos;\n      to = targetPos;\n      KTUtil.animate(from, to, duration, function (value) {\n        document.documentElement.scrollTop = value;\n        document.body.parentNode.scrollTop = value;\n        document.body.scrollTop = value;\n      }); //, easing, done\n    },\n    scrollTop: function scrollTop(offset, duration) {\n      KTUtil.scrollTo(null, offset, duration);\n    },\n    isArray: function isArray(obj) {\n      return obj && Array.isArray(obj);\n    },\n    ready: function ready(callback) {\n      if (document.attachEvent ? document.readyState === \"complete\" : document.readyState !== \"loading\") {\n        callback();\n      } else {\n        document.addEventListener('DOMContentLoaded', callback);\n      }\n    },\n    isEmpty: function isEmpty(obj) {\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    numberString: function numberString(nStr) {\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n\n      return x1 + x2;\n    },\n    detectIE: function detectIE() {\n      var ua = window.navigator.userAgent; // Test values; Uncomment to check result …\n      // IE 10\n      // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n      // IE 11\n      // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n      // Edge 12 (Spartan)\n      // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n      // Edge 13\n      // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n      var msie = ua.indexOf('MSIE ');\n\n      if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n      }\n\n      var trident = ua.indexOf('Trident/');\n\n      if (trident > 0) {\n        // IE 11 => return version number\n        var rv = ua.indexOf('rv:');\n        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n      }\n\n      var edge = ua.indexOf('Edge/');\n\n      if (edge > 0) {\n        // Edge (IE 12+) => return version number\n        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n      } // other browser\n\n\n      return false;\n    },\n    isRTL: function isRTL() {\n      var html = KTUtil.getByTagName('html')[0];\n\n      if (html) {\n        return KTUtil.attr(html, 'direction') == 'rtl';\n      }\n    },\n    // Scroller\n    scrollInit: function scrollInit(element, options) {\n      if (!element) {\n        return;\n      } // Learn more: https://github.com/mdbootstrap/perfect-scrollbar#options\n\n\n      var pluginDefOptions = {\n        wheelSpeed: 0.5,\n        swipeEasing: true,\n        wheelPropagation: false,\n        minScrollbarLength: 40,\n        maxScrollbarLength: 300,\n        suppressScrollX: true\n      };\n      options = KTUtil.deepExtend({}, pluginDefOptions, options); // Define init function\n\n      function init() {\n        var ps;\n        var height; // Get extra options via data attributes\n\n        var attrs = element.getAttributeNames();\n\n        if (attrs.length > 0) {\n          attrs.forEach(function (attrName) {\n            // more options; https://github.com/ganlanyuan/tiny-slider#options\n            if (/^data-.*/g.test(attrName)) {\n              if (['scroll', 'height', 'mobile-height'].includes(optionName) == false) {\n                var optionName = attrName.replace('data-', '').toLowerCase().replace(/(?:[\\s-])\\w/g, function (match) {\n                  return match.replace('-', '').toUpperCase();\n                });\n                options[optionName] = KTUtil.filterBoolean(element.getAttribute(attrName));\n              }\n            }\n          });\n        }\n\n        if (options.height instanceof Function) {\n          height = options.height.call();\n        } else {\n          if (KTUtil.isMobileDevice() === true && options.mobileHeight) {\n            height = parseInt(options.mobileHeight);\n          } else if (options.height) {\n            height = parseInt(options.height);\n          } else {\n            height = parseInt(KTUtil.css(element, 'height'));\n          }\n        }\n\n        if (height === false) {\n          KTUtil.scrollDestroy(element, true);\n          return;\n        }\n\n        height = parseInt(height); // Destroy scroll on table and mobile modes\n\n        if ((options.mobileNativeScroll || options.disableForMobile) && KTUtil.isMobileDevice() === true) {\n          ps = KTUtil.data(element).get('ps');\n\n          if (ps) {\n            if (options.resetHeightOnDestroy) {\n              KTUtil.css(element, 'height', 'auto');\n            } else {\n              KTUtil.css(element, 'overflow', 'auto');\n\n              if (height > 0) {\n                KTUtil.css(element, 'height', height + 'px');\n              }\n            }\n\n            ps.destroy();\n            ps = KTUtil.data(element).remove('ps');\n          } else if (height > 0) {\n            KTUtil.css(element, 'overflow', 'auto');\n            KTUtil.css(element, 'height', height + 'px');\n          }\n\n          return;\n        }\n\n        if (height > 0) {\n          KTUtil.css(element, 'height', height + 'px');\n        }\n\n        if (options.desktopNativeScroll) {\n          KTUtil.css(element, 'overflow', 'auto');\n          return;\n        } // Pass options via HTML Attributes\n\n\n        if (KTUtil.attr(element, 'data-window-scroll') == 'true') {\n          options.windowScroll = true;\n        } // Init scroll\n\n\n        ps = KTUtil.data(element).get('ps');\n\n        if (ps) {\n          ps.update();\n        } else {\n          KTUtil.css(element, 'overflow', 'hidden');\n          KTUtil.addClass(element, 'scroll');\n          ps = new PerfectScrollbar(element, options);\n          KTUtil.data(element).set('ps', ps);\n        } // Remember scroll position in cookie\n\n\n        var uid = KTUtil.attr(element, 'id'); // Todo:Consider using Localstorage\n\n        if (options.rememberPosition === true && KTCookie && uid) {\n          if (KTCookie.getCookie(uid)) {\n            var pos = parseInt(KTCookie.getCookie(uid));\n\n            if (pos > 0) {\n              element.scrollTop = pos;\n            }\n          }\n\n          element.addEventListener('ps-scroll-y', function () {\n            KTCookie.setCookie(uid, element.scrollTop);\n          });\n        }\n      } // Init\n\n\n      init(); // Handle window resize\n\n      if (options.handleWindowResize) {\n        KTUtil.addResizeHandler(function () {\n          init();\n        });\n      }\n    },\n    scrollUpdate: function scrollUpdate(element) {\n      var ps = KTUtil.data(element).get('ps');\n\n      if (ps) {\n        ps.update();\n      }\n    },\n    scrollUpdateAll: function scrollUpdateAll(parent) {\n      var scrollers = KTUtil.findAll(parent, '.ps');\n\n      for (var i = 0, len = scrollers.length; i < len; i++) {\n        KTUtil.scrollUpdate(scrollers[i]);\n      }\n    },\n    scrollDestroy: function scrollDestroy(element, resetAll) {\n      var ps = KTUtil.data(element).get('ps');\n\n      if (ps) {\n        ps.destroy();\n        ps = KTUtil.data(element).remove('ps');\n      }\n\n      if (element && resetAll) {\n        element.style.setProperty('overflow', '');\n        element.style.setProperty('height', '');\n      }\n    },\n    filterBoolean: function filterBoolean(val) {\n      // Convert string boolean\n      if (val === true || val === 'true') {\n        return true;\n      }\n\n      if (val === false || val === 'false') {\n        return false;\n      }\n\n      return val;\n    },\n    setHTML: function setHTML(el, html) {\n      el.innerHTML = html;\n    },\n    getHTML: function getHTML(el) {\n      if (el) {\n        return el.innerHTML;\n      }\n    },\n    getDocumentHeight: function getDocumentHeight() {\n      var body = document.body;\n      var html = document.documentElement;\n      return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n    },\n    getScrollTop: function getScrollTop() {\n      return (document.scrollingElement || document.documentElement).scrollTop;\n    },\n    changeColor: function changeColor(col, amt) {\n      var usePound = false;\n\n      if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n      }\n\n      var num = parseInt(col, 16);\n      var r = (num >> 16) + amt;\n      if (r > 255) r = 255;else if (r < 0) r = 0;\n      var b = (num >> 8 & 0x00FF) + amt;\n      if (b > 255) b = 255;else if (b < 0) b = 0;\n      var g = (num & 0x0000FF) + amt;\n      if (g > 255) g = 255;else if (g < 0) g = 0;\n      return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n    },\n    // Throttle function: Input as function which needs to be throttled and delay is the time interval in milliseconds\n    throttle: function throttle(timer, func, delay) {\n      // If setTimeout is already scheduled, no need to do anything\n      if (timer) {\n        return;\n      } // Schedule a setTimeout after delay seconds\n\n\n      timer = setTimeout(function () {\n        func(); // Once setTimeout function execution is finished, timerId = undefined so that in <br>\n        // the next scroll event function execution can be scheduled by the setTimeout\n\n        timer = undefined;\n      }, delay);\n    },\n    // Debounce function: Input as function which needs to be debounced and delay is the debounced time in milliseconds\n    debounce: function debounce(timer, func, delay) {\n      // Cancels the setTimeout method execution\n      clearTimeout(timer); // Executes the func after delay time.\n\n      timer = setTimeout(func, delay);\n    },\n    btnWait: function btnWait(el, cls, message, disable) {\n      if (!el) {\n        return;\n      }\n\n      if (typeof disable !== 'undefined' && disable === true) {\n        KTUtil.attr(el, \"disabled\", true);\n      }\n\n      if (cls) {\n        KTUtil.addClass(el, cls);\n        KTUtil.attr(el, \"wait-class\", cls);\n      }\n\n      if (message) {\n        var caption = KTUtil.find(el, '.btn-caption');\n\n        if (caption) {\n          KTUtil.data(caption).set('caption', KTUtil.getHTML(caption));\n          KTUtil.setHTML(caption, message);\n        } else {\n          KTUtil.data(el).set('caption', KTUtil.getHTML(el));\n          KTUtil.setHTML(el, message);\n        }\n      }\n    },\n    btnRelease: function btnRelease(el) {\n      if (!el) {\n        return;\n      } /// Show loading state on button\n\n\n      KTUtil.removeAttr(el, \"disabled\");\n\n      if (KTUtil.hasAttr(el, \"wait-class\")) {\n        KTUtil.removeClass(el, KTUtil.attr(el, \"wait-class\"));\n      }\n\n      var caption = KTUtil.find(el, '.btn-caption');\n\n      if (caption && KTUtil.data(caption).has('caption')) {\n        KTUtil.setHTML(caption, KTUtil.data(caption).get('caption'));\n      } else if (KTUtil.data(el).has('caption')) {\n        KTUtil.setHTML(el, KTUtil.data(el).get('caption'));\n      }\n    },\n    isOffscreen: function isOffscreen(el, direction, offset) {\n      offset = offset || 0;\n      var windowWidth = KTUtil.getViewPort().width;\n      var windowHeight = KTUtil.getViewPort().height;\n      var top = KTUtil.offset(el).top;\n      var height = KTUtil.outerHeight(el) + offset;\n      var left = KTUtil.offset(el).left;\n      var width = KTUtil.outerWidth(el) + offset;\n\n      if (direction == 'bottom') {\n        if (windowHeight < top + height) {\n          return true;\n        } else if (windowHeight > top + height * 1.5) {\n          return true;\n        }\n      }\n\n      if (direction == 'top') {\n        if (top < 0) {\n          return true;\n        } else if (top > height) {\n          return true;\n        }\n      }\n\n      if (direction == 'left') {\n        if (left < 0) {\n          return true;\n        } else if (left * 2 > width) {//console.log('left 2');\n          //return true;\n        }\n      }\n\n      if (direction == 'right') {\n        if (windowWidth < left + width) {\n          return true;\n        } else {//console.log('right 2');\n          //return true;\n        }\n      }\n\n      return false;\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTUtil;\n} // Initialize KTUtil class on document ready\n\n\nKTUtil.ready(function () {\n  if (typeof KTAppSettings !== 'undefined') {\n    KTUtil.init(KTAppSettings);\n  } else {\n    KTUtil.init();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lL2pzL2NvbXBvbmVudHMvdXRpbC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViO0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUF2QixFQUFnQztFQUMvQkYsT0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUFsQixHQUE0QkYsT0FBTyxDQUFDQyxTQUFSLENBQWtCRSxpQkFBbEIsSUFBdUNILE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkcscUJBQXJGO0FBQ0E7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsSUFBSSxDQUFDSixPQUFPLENBQUNDLFNBQVIsQ0FBa0JJLE9BQXZCLEVBQWdDO0VBQy9CLElBQUksQ0FBQ0wsT0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUF2QixFQUFnQztJQUMvQkYsT0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUFsQixHQUE0QkYsT0FBTyxDQUFDQyxTQUFSLENBQWtCRSxpQkFBbEIsSUFBdUNILE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkcscUJBQXJGO0VBQ0E7O0VBQ0RKLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkksT0FBbEIsR0FBNEIsVUFBVUMsQ0FBVixFQUFhO0lBQ3hDLElBQUlDLEVBQUUsR0FBRyxJQUFUO0lBQ0EsSUFBSUMsUUFBUSxHQUFHLElBQWY7SUFDQSxJQUFJLENBQUNDLFFBQVEsQ0FBQ0MsZUFBVCxDQUF5QkMsUUFBekIsQ0FBa0NKLEVBQWxDLENBQUwsRUFBNEMsT0FBTyxJQUFQOztJQUM1QyxHQUFHO01BQ0YsSUFBSUMsUUFBUSxDQUFDTixPQUFULENBQWlCSSxDQUFqQixDQUFKLEVBQXlCLE9BQU9FLFFBQVA7TUFDekJBLFFBQVEsR0FBR0EsUUFBUSxDQUFDSSxhQUFwQjtJQUNBLENBSEQsUUFHU0osUUFBUSxLQUFLLElBSHRCOztJQUlBLE9BQU8sSUFBUDtFQUNBLENBVEQ7QUFVQTtB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TUFDRDs7TUFFRCxJQUFJeVQsU0FBUyxJQUFJLEtBQWpCLEVBQXdCO1FBQ3ZCLElBQUl0TSxHQUFHLEdBQUcsQ0FBVixFQUFhO1VBQ1osT0FBTyxJQUFQO1FBQ0EsQ0FGRCxNQUVPLElBQUlBLEdBQUcsR0FBR25ILE1BQVYsRUFBa0I7VUFDeEIsT0FBTyxJQUFQO1FBQ0E7TUFDRDs7TUFFRCxJQUFJeVQsU0FBUyxJQUFJLE1BQWpCLEVBQXlCO1FBQ3hCLElBQUlyTSxJQUFJLEdBQUcsQ0FBWCxFQUFjO1VBQ2IsT0FBTyxJQUFQO1FBQ0EsQ0FGRCxNQUVPLElBQUlBLElBQUksR0FBRyxDQUFQLEdBQVc3SCxLQUFmLEVBQXNCLENBQzVCO1VBQ0E7UUFDQTtNQUNEOztNQUVELElBQUlrVSxTQUFTLElBQUksT0FBakIsRUFBMEI7UUFDekIsSUFBSUMsV0FBVyxHQUFHdE0sSUFBSSxHQUFHN0gsS0FBekIsRUFBZ0M7VUFDL0IsT0FBTyxJQUFQO1FBQ0EsQ0FGRCxNQUVPLENBQ047VUFDQTtRQUNBO01BQ0Q7O01BRUQsT0FBTyxLQUFQO0lBQ0E7RUFsbURLLENBQVA7QUFvbURBLENBcm9EYSxFQUFiLEMsQ0F1b0REOzs7QUFDQSxJQUFJLFNBQWlDLE9BQU9xVSxNQUFNLENBQUNDLE9BQWQsS0FBMEIsV0FBL0QsRUFBNEU7RUFDM0VELE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjVXLE1BQWpCO0FBQ0EsQyxDQUVEOzs7QUFDQUEsTUFBTSxDQUFDd1IsS0FBUCxDQUFhLFlBQVc7RUFDdkIsSUFBSSxPQUFPcUYsYUFBUCxLQUF5QixXQUE3QixFQUEwQztJQUN6QzdXLE1BQU0sQ0FBQ2EsSUFBUCxDQUFZZ1csYUFBWjtFQUNBLENBRkQsTUFFTztJQUNON1csTUFBTSxDQUFDYSxJQUFQO0VBQ0E7QUFDRCxDQU5EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy90aGVtZS9qcy9jb21wb25lbnRzL3V0aWwuanM/NjUwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgS1RVdGlsICBiYXNlIHV0aWxpemUgY2xhc3MgdGhhdCBwcml2aWRlcyBoZWxwZXIgZnVuY3Rpb25zXHJcbiAqL1xyXG5cclxuLy8gUG9seWZpbGxzXHJcbi8qKlxyXG4gKiBFbGVtZW50Lm1hdGNoZXMoKSBwb2x5ZmlsbCAoc2ltcGxlIHZlcnNpb24pXHJcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L21hdGNoZXMjUG9seWZpbGxcclxuICovXHJcbmlmICghRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xyXG5cdEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPSBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbGVtZW50LmNsb3Nlc3QoKSBwb2x5ZmlsbFxyXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudC9jbG9zZXN0I1BvbHlmaWxsXHJcbiAqL1xyXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QpIHtcclxuXHRpZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcclxuXHRcdEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPSBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XHJcblx0fVxyXG5cdEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPSBmdW5jdGlvbiAocykge1xyXG5cdFx0dmFyIGVsID0gdGhpcztcclxuXHRcdHZhciBhbmNlc3RvciA9IHRoaXM7XHJcblx0XHRpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhlbCkpIHJldHVybiBudWxsO1xyXG5cdFx0ZG8ge1xyXG5cdFx0XHRpZiAoYW5jZXN0b3IubWF0Y2hlcyhzKSkgcmV0dXJuIGFuY2VzdG9yO1xyXG5cdFx0XHRhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudEVsZW1lbnQ7XHJcblx0XHR9IHdoaWxlIChhbmNlc3RvciAhPT0gbnVsbCk7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogQ2hpbGROb2RlLnJlbW92ZSgpIHBvbHlmaWxsXHJcbiAqIGh0dHBzOi8vZ29tYWtldGhpbmdzLmNvbS9yZW1vdmluZy1hbi1lbGVtZW50LWZyb20tdGhlLWRvbS10aGUtZXM2LXdheS9cclxuICogQGF1dGhvciBDaHJpcyBGZXJkaW5hbmRpXHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuKGZ1bmN0aW9uIChlbGVtKSB7XHJcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZiAoIXdpbmRvd1tlbGVtW2ldXSB8fCAncmVtb3ZlJyBpbiB3aW5kb3dbZWxlbVtpXV0ucHJvdG90eXBlKSBjb250aW51ZTtcclxuXHRcdHdpbmRvd1tlbGVtW2ldXS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7XHJcblx0XHR9O1xyXG5cdH1cclxufSkoWydFbGVtZW50JywgJ0NoYXJhY3RlckRhdGEnLCAnRG9jdW1lbnRUeXBlJ10pO1xyXG5cclxuXHJcbi8vXHJcbi8vIHJlcXVlc3RBbmltYXRpb25GcmFtZSBwb2x5ZmlsbCBieSBFcmlrIE3DtmxsZXIuXHJcbi8vICBXaXRoIGZpeGVzIGZyb20gUGF1bCBJcmlzaCBhbmQgVGlubyBaaWpkZWxcclxuLy9cclxuLy8gIGh0dHA6Ly9wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXHJcbi8vICBodHRwOi8vbXkub3BlcmEuY29tL2Vtb2xsZXIvYmxvZy8yMDExLzEyLzIwL3JlcXVlc3RhbmltYXRpb25mcmFtZS1mb3Itc21hcnQtZXItYW5pbWF0aW5nXHJcbi8vXHJcbi8vICBNSVQgbGljZW5zZVxyXG4vL1xyXG4oZnVuY3Rpb24oKSB7XHJcblx0dmFyIGxhc3RUaW1lID0gMDtcclxuXHR2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xyXG5cdGZvciAodmFyIHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsreCkge1xyXG5cdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2ZW5kb3JzW3hdICsgJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddO1xyXG5cdFx0d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID1cclxuXHRcdFx0d2luZG93W3ZlbmRvcnNbeF0gKyAnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCB3aW5kb3dbdmVuZG9yc1t4XSArICdDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcclxuXHR9XHJcblxyXG5cdGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSlcclxuXHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xyXG5cdFx0XHR2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHRcdFx0dmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7XHJcblx0XHRcdHZhciBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7XHJcblx0XHRcdH0sIHRpbWVUb0NhbGwpO1xyXG5cdFx0XHRsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcclxuXHRcdFx0cmV0dXJuIGlkO1xyXG5cdFx0fTtcclxuXHJcblx0aWYgKCF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpXHJcblx0XHR3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihpZCkge1xyXG5cdFx0XHRjbGVhclRpbWVvdXQoaWQpO1xyXG5cdFx0fTtcclxufSgpKTtcclxuXHJcbi8vIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2pzZXJ6L2pzX3BpZWNlL2Jsb2IvbWFzdGVyL0RPTS9QYXJlbnROb2RlL3ByZXBlbmQoKS9wcmVwZW5kKCkubWRcclxuKGZ1bmN0aW9uKGFycikge1xyXG5cdGFyci5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHRcdGlmIChpdGVtLmhhc093blByb3BlcnR5KCdwcmVwZW5kJykpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGl0ZW0sICdwcmVwZW5kJywge1xyXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdHdyaXRhYmxlOiB0cnVlLFxyXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gcHJlcGVuZCgpIHtcclxuXHRcdFx0XHR2YXIgYXJnQXJyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxcclxuXHRcdFx0XHRcdGRvY0ZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblxyXG5cdFx0XHRcdGFyZ0Fyci5mb3JFYWNoKGZ1bmN0aW9uKGFyZ0l0ZW0pIHtcclxuXHRcdFx0XHRcdHZhciBpc05vZGUgPSBhcmdJdGVtIGluc3RhbmNlb2YgTm9kZTtcclxuXHRcdFx0XHRcdGRvY0ZyYWcuYXBwZW5kQ2hpbGQoaXNOb2RlID8gYXJnSXRlbSA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhhcmdJdGVtKSkpO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHR0aGlzLmluc2VydEJlZm9yZShkb2NGcmFnLCB0aGlzLmZpcnN0Q2hpbGQpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9KTtcclxufSkoW0VsZW1lbnQucHJvdG90eXBlLCBEb2N1bWVudC5wcm90b3R5cGUsIERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlXSk7XHJcblxyXG4vLyBnZXRBdHRyaWJ1dGVOYW1lc1xyXG5pZiAoRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTmFtZXMgPT0gdW5kZWZpbmVkKSB7XHJcbiAgRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTmFtZXMgPSBmdW5jdGlvbiAoKSB7XHJcblx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XHJcblx0dmFyIGxlbmd0aCA9IGF0dHJpYnV0ZXMubGVuZ3RoO1xyXG5cdHZhciByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKTtcclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblx0ICByZXN1bHRbaV0gPSBhdHRyaWJ1dGVzW2ldLm5hbWU7XHJcblx0fVxyXG5cdHJldHVybiByZXN1bHQ7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gR2xvYmFsIHZhcmlhYmxlc1xyXG5cdHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlID0ge307XHJcblx0d2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRCA9IDA7XHJcblx0d2luZG93LktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnMgPSB7fTtcclxuXHR3aW5kb3cuTWVtb3J5Q2FjaGVkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiB2YXIgS1RVdGlsID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIHJlc2l6ZUhhbmRsZXJzID0gW107XHJcblxyXG5cdC8qKiBAdHlwZSB7b2JqZWN0fSBicmVha3BvaW50cyBUaGUgZGV2aWNlIHdpZHRoIGJyZWFrcG9pbnRzICoqL1xyXG5cdHZhciBicmVha3BvaW50cyA9IHtcclxuXHRcdHNtOiA1NDQsIC8vIFNtYWxsIHNjcmVlbiAvIHBob25lXHJcblx0XHRtZDogNzY4LCAvLyBNZWRpdW0gc2NyZWVuIC8gdGFibGV0XHJcblx0XHRsZzogOTkyLCAvLyBMYXJnZSBzY3JlZW4gLyBkZXNrdG9wXHJcblx0XHR4bDogMTIwMCAvLyBFeHRyYSBsYXJnZSBzY3JlZW4gLyB3aWRlIGRlc2t0b3BcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGUgd2luZG93IHJlc2l6ZSBldmVudCB3aXRoIHNvbWVcclxuXHQgKiBkZWxheSB0byBhdHRhY2ggZXZlbnQgaGFuZGxlcnMgdXBvbiByZXNpemUgY29tcGxldGVcclxuXHQgKi9cclxuXHR2YXIgX3dpbmRvd1Jlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBfcnVuUmVzaXplSGFuZGxlcnMgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gcmVpbml0aWFsaXplIG90aGVyIHN1YnNjcmliZWQgZWxlbWVudHNcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZXNpemVIYW5kbGVycy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBlYWNoID0gcmVzaXplSGFuZGxlcnNbaV07XHJcblx0XHRcdFx0ZWFjaC5jYWxsKCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIHRpbWVyO1xyXG5cdFx0XHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdEtUVXRpbC50aHJvdHRsZSh0aW1lciwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0X3J1blJlc2l6ZUhhbmRsZXJzKCk7XHJcblx0XHRcdH0sIDIwMCk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBDbGFzcyBtYWluIGluaXRpYWxpemVyLlxyXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzLlxyXG5cdFx0ICogQHJldHVybnMgbnVsbFxyXG5cdFx0ICovXHJcblx0XHQvL21haW4gZnVuY3Rpb24gdG8gaW5pdGlhdGUgdGhlIHRoZW1lXHJcblx0XHRpbml0OiBmdW5jdGlvbihzZXR0aW5ncykge1xyXG5cdFx0XHRpZiAoc2V0dGluZ3MgJiYgc2V0dGluZ3MuYnJlYWtwb2ludHMpIHtcclxuXHRcdFx0XHRicmVha3BvaW50cyA9IHNldHRpbmdzLmJyZWFrcG9pbnRzO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRfd2luZG93UmVzaXplSGFuZGxlcigpO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFkZHMgd2luZG93IHJlc2l6ZSBldmVudCBoYW5kbGVyLlxyXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXHJcblx0XHQgKi9cclxuXHRcdGFkZFJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcblx0XHRcdHJlc2l6ZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJlbW92ZXMgd2luZG93IHJlc2l6ZSBldmVudCBoYW5kbGVyLlxyXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXHJcblx0XHQgKi9cclxuXHRcdHJlbW92ZVJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcmVzaXplSGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRpZiAoY2FsbGJhY2sgPT09IHJlc2l6ZUhhbmRsZXJzW2ldKSB7XHJcblx0XHRcdFx0XHRkZWxldGUgcmVzaXplSGFuZGxlcnNbaV07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVHJpZ2dlciB3aW5kb3cgcmVzaXplIGhhbmRsZXJzLlxyXG5cdFx0ICovXHJcblx0XHRydW5SZXNpemVIYW5kbGVyczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdF9ydW5SZXNpemVIYW5kbGVycygpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRyZXNpemU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAodHlwZW9mKEV2ZW50KSA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdC8vIG1vZGVybiBicm93c2Vyc1xyXG5cdFx0XHRcdHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIGZvciBJRSBhbmQgb3RoZXIgb2xkIGJyb3dzZXJzXHJcblx0XHRcdFx0Ly8gY2F1c2VzIGRlcHJlY2F0aW9uIHdhcm5pbmcgb24gbW9kZXJuIGJyb3dzZXJzXHJcblx0XHRcdFx0dmFyIGV2dCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudCgnVUlFdmVudHMnKTtcclxuXHRcdFx0XHRldnQuaW5pdFVJRXZlbnQoJ3Jlc2l6ZScsIHRydWUsIGZhbHNlLCB3aW5kb3csIDApO1xyXG5cdFx0XHRcdHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2dCk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgR0VUIHBhcmFtZXRlciB2YWx1ZSBmcm9tIFVSTC5cclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbU5hbWUgUGFyYW1ldGVyIG5hbWUuXHJcblx0XHQgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG5cdFx0ICovXHJcblx0XHRnZXRVUkxQYXJhbTogZnVuY3Rpb24ocGFyYW1OYW1lKSB7XHJcblx0XHRcdHZhciBzZWFyY2hTdHJpbmcgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSxcclxuXHRcdFx0XHRpLCB2YWwsIHBhcmFtcyA9IHNlYXJjaFN0cmluZy5zcGxpdChcIiZcIik7XHJcblxyXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFsID0gcGFyYW1zW2ldLnNwbGl0KFwiPVwiKTtcclxuXHRcdFx0XHRpZiAodmFsWzBdID09IHBhcmFtTmFtZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHVuZXNjYXBlKHZhbFsxXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDaGVja3Mgd2hldGhlciBjdXJyZW50IGRldmljZSBpcyBtb2JpbGUgdG91Y2guXHJcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuXHRcdCAqL1xyXG5cdFx0aXNNb2JpbGVEZXZpY2U6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgdGVzdCA9ICh0aGlzLmdldFZpZXdQb3J0KCkud2lkdGggPCB0aGlzLmdldEJyZWFrcG9pbnQoJ2xnJykgPyB0cnVlIDogZmFsc2UpO1xyXG5cclxuXHRcdFx0aWYgKHRlc3QgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0Ly8gRm9yIHVzZSB3aXRoaW4gbm9ybWFsIHdlYiBjbGllbnRzXHJcblx0XHRcdFx0dGVzdCA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQYWQvaSkgIT0gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRlc3Q7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ2hlY2tzIHdoZXRoZXIgY3VycmVudCBkZXZpY2UgaXMgZGVza3RvcC5cclxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxyXG5cdFx0ICovXHJcblx0XHRpc0Rlc2t0b3BEZXZpY2U6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gS1RVdGlsLmlzTW9iaWxlRGV2aWNlKCkgPyBmYWxzZSA6IHRydWU7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogR2V0cyBicm93c2VyIHdpbmRvdyB2aWV3cG9ydCBzaXplLiBSZWY6XHJcblx0XHQgKiBodHRwOi8vYW5keWxhbmd0b24uY28udWsvYXJ0aWNsZXMvamF2YXNjcmlwdC9nZXQtdmlld3BvcnQtc2l6ZS1qYXZhc2NyaXB0L1xyXG5cdFx0ICogQHJldHVybnMge29iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0Z2V0Vmlld1BvcnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgZSA9IHdpbmRvdyxcclxuXHRcdFx0XHRhID0gJ2lubmVyJztcclxuXHRcdFx0aWYgKCEoJ2lubmVyV2lkdGgnIGluIHdpbmRvdykpIHtcclxuXHRcdFx0XHRhID0gJ2NsaWVudCc7XHJcblx0XHRcdFx0ZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdHdpZHRoOiBlW2EgKyAnV2lkdGgnXSxcclxuXHRcdFx0XHRoZWlnaHQ6IGVbYSArICdIZWlnaHQnXVxyXG5cdFx0XHR9O1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIGRldmljZSBtb2RlIGlzIGN1cnJlbnRseSBhY3RpdmF0ZWQuXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSBSZXNwb25zaXZlIG1vZGUgbmFtZShlLmc6IGRlc2t0b3AsXHJcblx0XHQgKiAgICAgZGVza3RvcC1hbmQtdGFibGV0LCB0YWJsZXQsIHRhYmxldC1hbmQtbW9iaWxlLCBtb2JpbGUpXHJcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuXHRcdCAqL1xyXG5cdFx0aXNJblJlc3BvbnNpdmVSYW5nZTogZnVuY3Rpb24obW9kZSkge1xyXG5cdFx0XHR2YXIgYnJlYWtwb2ludCA9IHRoaXMuZ2V0Vmlld1BvcnQoKS53aWR0aDtcclxuXHJcblx0XHRcdGlmIChtb2RlID09ICdnZW5lcmFsJykge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9IGVsc2UgaWYgKG1vZGUgPT0gJ2Rlc2t0b3AnICYmIGJyZWFrcG9pbnQgPj0gKHRoaXMuZ2V0QnJlYWtwb2ludCgnbGcnKSArIDEpKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH0gZWxzZSBpZiAobW9kZSA9PSAndGFibGV0JyAmJiAoYnJlYWtwb2ludCA+PSAodGhpcy5nZXRCcmVha3BvaW50KCdtZCcpICsgMSkgJiYgYnJlYWtwb2ludCA8IHRoaXMuZ2V0QnJlYWtwb2ludCgnbGcnKSkpIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fSBlbHNlIGlmIChtb2RlID09ICdtb2JpbGUnICYmIGJyZWFrcG9pbnQgPD0gdGhpcy5nZXRCcmVha3BvaW50KCdtZCcpKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH0gZWxzZSBpZiAobW9kZSA9PSAnZGVza3RvcC1hbmQtdGFibGV0JyAmJiBicmVha3BvaW50ID49ICh0aGlzLmdldEJyZWFrcG9pbnQoJ21kJykgKyAxKSkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9IGVsc2UgaWYgKG1vZGUgPT0gJ3RhYmxldC1hbmQtbW9iaWxlJyAmJiBicmVha3BvaW50IDw9IHRoaXMuZ2V0QnJlYWtwb2ludCgnbGcnKSkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9IGVsc2UgaWYgKG1vZGUgPT0gJ21pbmltYWwtZGVza3RvcC1hbmQtYmVsb3cnICYmIGJyZWFrcG9pbnQgPD0gdGhpcy5nZXRCcmVha3BvaW50KCd4bCcpKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDaGVja3Mgd2hldGhlciBnaXZlbiBkZXZpY2UgbW9kZSBpcyBjdXJyZW50bHkgYWN0aXZhdGVkLlxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgUmVzcG9uc2l2ZSBtb2RlIG5hbWUoZS5nOiBkZXNrdG9wLFxyXG5cdFx0ICogICAgIGRlc2t0b3AtYW5kLXRhYmxldCwgdGFibGV0LCB0YWJsZXQtYW5kLW1vYmlsZSwgbW9iaWxlKVxyXG5cdFx0ICogQHJldHVybnMge2Jvb2xlYW59XHJcblx0XHQgKi9cclxuXHRcdGlzQnJlYWtwb2ludFVwOiBmdW5jdGlvbihtb2RlKSB7XHJcblx0XHRcdHZhciB3aWR0aCA9IHRoaXMuZ2V0Vmlld1BvcnQoKS53aWR0aDtcclxuXHRcdFx0dmFyIGJyZWFrcG9pbnQgPSB0aGlzLmdldEJyZWFrcG9pbnQobW9kZSk7XHJcblxyXG5cdFx0XHRyZXR1cm4gKHdpZHRoID49IGJyZWFrcG9pbnQpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRpc0JyZWFrcG9pbnREb3duOiBmdW5jdGlvbihtb2RlKSB7XHJcblx0XHRcdHZhciB3aWR0aCA9IHRoaXMuZ2V0Vmlld1BvcnQoKS53aWR0aDtcclxuXHRcdFx0dmFyIGJyZWFrcG9pbnQgPSB0aGlzLmdldEJyZWFrcG9pbnQobW9kZSk7XHJcblxyXG5cdFx0XHRyZXR1cm4gKHdpZHRoIDwgYnJlYWtwb2ludCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogR2VuZXJhdGVzIHVuaXF1ZSBJRCBmb3IgZ2l2ZSBwcmVmaXguXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IFByZWZpeCBmb3IgZ2VuZXJhdGVkIElEXHJcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuXHRcdCAqL1xyXG5cdFx0Z2V0VW5pcXVlSUQ6IGZ1bmN0aW9uKHByZWZpeCkge1xyXG5cdFx0XHRyZXR1cm4gcHJlZml4ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG5ldyBEYXRlKCkpLmdldFRpbWUoKSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogR2V0cyB3aW5kb3cgd2lkdGggZm9yIGdpdmUgYnJlYWtwb2ludCBtb2RlLlxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgUmVzcG9uc2l2ZSBtb2RlIG5hbWUoZS5nOiB4bCwgbGcsIG1kLCBzbSlcclxuXHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9XHJcblx0XHQgKi9cclxuXHRcdGdldEJyZWFrcG9pbnQ6IGZ1bmN0aW9uKG1vZGUpIHtcclxuXHRcdFx0cmV0dXJuIGJyZWFrcG9pbnRzW21vZGVdO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIENoZWNrcyB3aGV0aGVyIG9iamVjdCBoYXMgcHJvcGVydHkgbWF0Y2hzIGdpdmVuIGtleSBwYXRoLlxyXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IG9iaiBPYmplY3QgY29udGFpbnMgdmFsdWVzIHBhaXJlZCB3aXRoIGdpdmVuIGtleSBwYXRoXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30ga2V5cyBLZXlzIHBhdGggc2VwZXJhdGVkIHdpdGggZG90c1xyXG5cdFx0ICogQHJldHVybnMge29iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0aXNzZXQ6IGZ1bmN0aW9uKG9iaiwga2V5cykge1xyXG5cdFx0XHR2YXIgc3RvbmU7XHJcblxyXG5cdFx0XHRrZXlzID0ga2V5cyB8fCAnJztcclxuXHJcblx0XHRcdGlmIChrZXlzLmluZGV4T2YoJ1snKSAhPT0gLTEpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIG9iamVjdCBwYXRoIG5vdGF0aW9uLicpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRrZXlzID0ga2V5cy5zcGxpdCgnLicpO1xyXG5cclxuXHRcdFx0ZG8ge1xyXG5cdFx0XHRcdGlmIChvYmogPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c3RvbmUgPSBrZXlzLnNoaWZ0KCk7XHJcblxyXG5cdFx0XHRcdGlmICghb2JqLmhhc093blByb3BlcnR5KHN0b25lKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0b2JqID0gb2JqW3N0b25lXTtcclxuXHJcblx0XHRcdH0gd2hpbGUgKGtleXMubGVuZ3RoKTtcclxuXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEdldHMgaGlnaGVzdCB6LWluZGV4IG9mIHRoZSBnaXZlbiBlbGVtZW50IHBhcmVudHNcclxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBlbCBqUXVlcnkgZWxlbWVudCBvYmplY3RcclxuXHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9XHJcblx0XHQgKi9cclxuXHRcdGdldEhpZ2hlc3RaaW5kZXg6IGZ1bmN0aW9uKGVsKSB7XHJcblx0XHRcdHZhciBwb3NpdGlvbiwgdmFsdWU7XHJcblxyXG5cdFx0XHR3aGlsZSAoZWwgJiYgZWwgIT09IGRvY3VtZW50KSB7XHJcblx0XHRcdFx0Ly8gSWdub3JlIHotaW5kZXggaWYgcG9zaXRpb24gaXMgc2V0IHRvIGEgdmFsdWUgd2hlcmUgei1pbmRleCBpcyBpZ25vcmVkIGJ5IHRoZSBicm93c2VyXHJcblx0XHRcdFx0Ly8gVGhpcyBtYWtlcyBiZWhhdmlvciBvZiB0aGlzIGZ1bmN0aW9uIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzXHJcblx0XHRcdFx0Ly8gV2ViS2l0IGFsd2F5cyByZXR1cm5zIGF1dG8gaWYgdGhlIGVsZW1lbnQgaXMgcG9zaXRpb25lZFxyXG5cdFx0XHRcdHBvc2l0aW9uID0gS1RVdGlsLmNzcyhlbCwgJ3Bvc2l0aW9uJyk7XHJcblxyXG5cdFx0XHRcdGlmIChwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcInJlbGF0aXZlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIikge1xyXG5cdFx0XHRcdFx0Ly8gSUUgcmV0dXJucyAwIHdoZW4gekluZGV4IGlzIG5vdCBzcGVjaWZpZWRcclxuXHRcdFx0XHRcdC8vIG90aGVyIGJyb3dzZXJzIHJldHVybiBhIHN0cmluZ1xyXG5cdFx0XHRcdFx0Ly8gd2UgaWdub3JlIHRoZSBjYXNlIG9mIG5lc3RlZCBlbGVtZW50cyB3aXRoIGFuIGV4cGxpY2l0IHZhbHVlIG9mIDBcclxuXHRcdFx0XHRcdC8vIDxkaXYgc3R5bGU9XCJ6LWluZGV4OiAtMTA7XCI+PGRpdiBzdHlsZT1cInotaW5kZXg6IDA7XCI+PC9kaXY+PC9kaXY+XHJcblx0XHRcdFx0XHR2YWx1ZSA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWwsICd6LWluZGV4JykpO1xyXG5cclxuXHRcdFx0XHRcdGlmICghaXNOYU4odmFsdWUpICYmIHZhbHVlICE9PSAwKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGVsID0gZWwucGFyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ2hlY2tzIHdoZXRoZXIgdGhlIGVsZW1lbnQgaGFzIGFueSBwYXJlbnQgd2l0aCBmaXhlZCBwb3NpdGlvbmZyZWdcclxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBlbCBqUXVlcnkgZWxlbWVudCBvYmplY3RcclxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxyXG5cdFx0ICovXHJcblx0XHRoYXNGaXhlZFBvc2l0aW9uZWRQYXJlbnQ6IGZ1bmN0aW9uKGVsKSB7XHJcblx0XHRcdHZhciBwb3NpdGlvbjtcclxuXHJcblx0XHRcdHdoaWxlIChlbCAmJiBlbCAhPT0gZG9jdW1lbnQpIHtcclxuXHRcdFx0XHRwb3NpdGlvbiA9IEtUVXRpbC5jc3MoZWwsICdwb3NpdGlvbicpO1xyXG5cclxuXHRcdFx0XHRpZiAocG9zaXRpb24gPT09IFwiZml4ZWRcIikge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRlbCA9IGVsLnBhcmVudE5vZGU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTaW11bGF0ZXMgZGVsYXlcclxuXHRcdCAqL1xyXG5cdFx0c2xlZXA6IGZ1bmN0aW9uKG1pbGxpc2Vjb25kcykge1xyXG5cdFx0XHR2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxZTc7IGkrKykge1xyXG5cdFx0XHRcdGlmICgobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydCkgPiBtaWxsaXNlY29uZHMpIHtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEdldHMgcmFuZG9tbHkgZ2VuZXJhdGVkIGludGVnZXIgdmFsdWUgd2l0aGluIGdpdmVuIG1pbiBhbmQgbWF4IHJhbmdlXHJcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gbWluIFJhbmdlIHN0YXJ0IHZhbHVlXHJcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gbWF4IFJhbmdlIGVuZCB2YWx1ZVxyXG5cdFx0ICogQHJldHVybnMge251bWJlcn1cclxuXHRcdCAqL1xyXG5cdFx0Z2V0UmFuZG9tSW50OiBmdW5jdGlvbihtaW4sIG1heCkge1xyXG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDaGVja3Mgd2hldGhlciBBbmd1bGFyIGxpYnJhcnkgaXMgaW5jbHVkZWRcclxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxyXG5cdFx0ICovXHJcblx0XHRpc0FuZ3VsYXJWZXJzaW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHdpbmRvdy5ab25lICE9PSB1bmRlZmluZWQgPyB0cnVlIDogZmFsc2U7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIERlZXAgZXh0ZW5kOiAgJC5leHRlbmQodHJ1ZSwge30sIG9iakEsIG9iakIpO1xyXG5cdFx0ZGVlcEV4dGVuZDogZnVuY3Rpb24ob3V0KSB7XHJcblx0XHRcdG91dCA9IG91dCB8fCB7fTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIG9iaiA9IGFyZ3VtZW50c1tpXTtcclxuXHRcdFx0XHRpZiAoIW9iaikgY29udGludWU7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuXHRcdFx0XHRcdGlmICghb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuXHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gYmFzZWQgb24gaHR0cHM6Ly9qYXZhc2NyaXB0d2VibG9nLndvcmRwcmVzcy5jb20vMjAxMS8wOC8wOC9maXhpbmctdGhlLWphdmFzY3JpcHQtdHlwZW9mLW9wZXJhdG9yL1xyXG5cdFx0XHRcdFx0aWYgKCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqW2tleV0pID09PSAnW29iamVjdCBPYmplY3RdJyApIHtcclxuXHRcdFx0XHRcdFx0b3V0W2tleV0gPSBLVFV0aWwuZGVlcEV4dGVuZChvdXRba2V5XSwgb2JqW2tleV0pO1xyXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRvdXRba2V5XSA9IG9ialtrZXldO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG91dDtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gZXh0ZW5kOiAgJC5leHRlbmQoe30sIG9iakEsIG9iakIpO1xyXG5cdFx0ZXh0ZW5kOiBmdW5jdGlvbihvdXQpIHtcclxuXHRcdFx0b3V0ID0gb3V0IHx8IHt9O1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRpZiAoIWFyZ3VtZW50c1tpXSlcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XHJcblx0XHRcdFx0XHRpZiAoYXJndW1lbnRzW2ldLmhhc093blByb3BlcnR5KGtleSkpXHJcblx0XHRcdFx0XHRcdG91dFtrZXldID0gYXJndW1lbnRzW2ldW2tleV07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gb3V0O1xyXG5cdFx0fSxcclxuXHJcblx0XHRnZXRCeUlkOiBmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRcdHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuIGVsO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldEJ5VGFnOiBmdW5jdGlvbihxdWVyeSkge1xyXG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocXVlcnkpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRnZXRCeVRhZ05hbWU6IGZ1bmN0aW9uKHF1ZXJ5KSB7XHJcblx0XHRcdHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShxdWVyeSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldEJ5Q2xhc3M6IGZ1bmN0aW9uKHF1ZXJ5KSB7XHJcblx0XHRcdHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHF1ZXJ5KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0Qm9keTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIENoZWNrcyB3aGV0aGVyIHRoZSBlbGVtZW50IGhhcyBnaXZlbiBjbGFzc2VzXHJcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZWwgalF1ZXJ5IGVsZW1lbnQgb2JqZWN0XHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gQ2xhc3NlcyBzdHJpbmdcclxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxyXG5cdFx0ICovXHJcblx0XHRoYXNDbGFzc2VzOiBmdW5jdGlvbihlbCwgY2xhc3Nlcykge1xyXG5cdFx0XHRpZiAoIWVsKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgY2xhc3Nlc0FyciA9IGNsYXNzZXMuc3BsaXQoXCIgXCIpO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzQXJyLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0aWYgKEtUVXRpbC5oYXNDbGFzcyhlbCwgS1RVdGlsLnRyaW0oY2xhc3Nlc0FycltpXSkpID09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0aGFzQ2xhc3M6IGZ1bmN0aW9uKGVsLCBjbGFzc05hbWUpIHtcclxuXHRcdFx0aWYgKCFlbCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGVsLmNsYXNzTGlzdCA/IGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpIDogbmV3IFJlZ0V4cCgnXFxcXGInICsgY2xhc3NOYW1lICsgJ1xcXFxiJykudGVzdChlbC5jbGFzc05hbWUpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRhZGRDbGFzczogZnVuY3Rpb24oZWwsIGNsYXNzTmFtZSkge1xyXG5cdFx0XHRpZiAoIWVsIHx8IHR5cGVvZiBjbGFzc05hbWUgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgY2xhc3NOYW1lcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xyXG5cclxuXHRcdFx0aWYgKGVsLmNsYXNzTGlzdCkge1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0aWYgKGNsYXNzTmFtZXNbaV0gJiYgY2xhc3NOYW1lc1tpXS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoS1RVdGlsLnRyaW0oY2xhc3NOYW1lc1tpXSkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIGlmICghS1RVdGlsLmhhc0NsYXNzKGVsLCBjbGFzc05hbWUpKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgeCA9IDA7IHggPCBjbGFzc05hbWVzLmxlbmd0aDsgeCsrKSB7XHJcblx0XHRcdFx0XHRlbC5jbGFzc05hbWUgKz0gJyAnICsgS1RVdGlsLnRyaW0oY2xhc3NOYW1lc1t4XSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbCwgY2xhc3NOYW1lKSB7XHJcblx0XHQgIGlmICghZWwgfHwgdHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBjbGFzc05hbWVzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XHJcblxyXG5cdFx0XHRpZiAoZWwuY2xhc3NMaXN0KSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRlbC5jbGFzc0xpc3QucmVtb3ZlKEtUVXRpbC50cmltKGNsYXNzTmFtZXNbaV0pKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoS1RVdGlsLmhhc0NsYXNzKGVsLCBjbGFzc05hbWUpKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgeCA9IDA7IHggPCBjbGFzc05hbWVzLmxlbmd0aDsgeCsrKSB7XHJcblx0XHRcdFx0XHRlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcYicgKyBLVFV0aWwudHJpbShjbGFzc05hbWVzW3hdKSArICdcXFxcYicsICdnJyksICcnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0dHJpZ2dlckN1c3RvbUV2ZW50OiBmdW5jdGlvbihlbCwgZXZlbnROYW1lLCBkYXRhKSB7XHJcblx0XHRcdHZhciBldmVudDtcclxuXHRcdFx0aWYgKHdpbmRvdy5DdXN0b21FdmVudCkge1xyXG5cdFx0XHRcdGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwge1xyXG5cdFx0XHRcdFx0ZGV0YWlsOiBkYXRhXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcclxuXHRcdFx0XHRldmVudC5pbml0Q3VzdG9tRXZlbnQoZXZlbnROYW1lLCB0cnVlLCB0cnVlLCBkYXRhKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZWwuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdHRyaWdnZXJFdmVudDogZnVuY3Rpb24obm9kZSwgZXZlbnROYW1lKSB7XHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSB1c2UgdGhlIG93bmVyRG9jdW1lbnQgZnJvbSB0aGUgcHJvdmlkZWQgbm9kZSB0byBhdm9pZCBjcm9zcy13aW5kb3cgcHJvYmxlbXNcclxuXHRcdFx0dmFyIGRvYztcclxuXHRcdFx0aWYgKG5vZGUub3duZXJEb2N1bWVudCkge1xyXG5cdFx0XHRcdGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcclxuXHRcdFx0fSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09IDkpIHtcclxuXHRcdFx0XHQvLyB0aGUgbm9kZSBtYXkgYmUgdGhlIGRvY3VtZW50IGl0c2VsZiwgbm9kZVR5cGUgOSA9IERPQ1VNRU5UX05PREVcclxuXHRcdFx0XHRkb2MgPSBub2RlO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbm9kZSBwYXNzZWQgdG8gZmlyZUV2ZW50OiBcIiArIG5vZGUuaWQpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAobm9kZS5kaXNwYXRjaEV2ZW50KSB7XHJcblx0XHRcdFx0Ly8gR2Vja28tc3R5bGUgYXBwcm9hY2ggKG5vdyB0aGUgc3RhbmRhcmQpIHRha2VzIG1vcmUgd29ya1xyXG5cdFx0XHRcdHZhciBldmVudENsYXNzID0gXCJcIjtcclxuXHJcblx0XHRcdFx0Ly8gRGlmZmVyZW50IGV2ZW50cyBoYXZlIGRpZmZlcmVudCBldmVudCBjbGFzc2VzLlxyXG5cdFx0XHRcdC8vIElmIHRoaXMgc3dpdGNoIHN0YXRlbWVudCBjYW4ndCBtYXAgYW4gZXZlbnROYW1lIHRvIGFuIGV2ZW50Q2xhc3MsXHJcblx0XHRcdFx0Ly8gdGhlIGV2ZW50IGZpcmluZyBpcyBnb2luZyB0byBmYWlsLlxyXG5cdFx0XHRcdHN3aXRjaCAoZXZlbnROYW1lKSB7XHJcblx0XHRcdFx0Y2FzZSBcImNsaWNrXCI6IC8vIERpc3BhdGNoaW5nIG9mICdjbGljaycgYXBwZWFycyB0byBub3Qgd29yayBjb3JyZWN0bHkgaW4gU2FmYXJpLiBVc2UgJ21vdXNlZG93bicgb3IgJ21vdXNldXAnIGluc3RlYWQuXHJcblx0XHRcdFx0Y2FzZSBcIm1vdXNlZW50ZXJcIjpcclxuXHRcdFx0XHRjYXNlIFwibW91c2VsZWF2ZVwiOlxyXG5cdFx0XHRcdGNhc2UgXCJtb3VzZWRvd25cIjpcclxuXHRcdFx0XHRjYXNlIFwibW91c2V1cFwiOlxyXG5cdFx0XHRcdFx0ZXZlbnRDbGFzcyA9IFwiTW91c2VFdmVudHNcIjtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlIFwiZm9jdXNcIjpcclxuXHRcdFx0XHRjYXNlIFwiY2hhbmdlXCI6XHJcblx0XHRcdFx0Y2FzZSBcImJsdXJcIjpcclxuXHRcdFx0XHRjYXNlIFwic2VsZWN0XCI6XHJcblx0XHRcdFx0XHRldmVudENsYXNzID0gXCJIVE1MRXZlbnRzXCI7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdHRocm93IFwiZmlyZUV2ZW50OiBDb3VsZG4ndCBmaW5kIGFuIGV2ZW50IGNsYXNzIGZvciBldmVudCAnXCIgKyBldmVudE5hbWUgKyBcIicuXCI7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFyIGV2ZW50ID0gZG9jLmNyZWF0ZUV2ZW50KGV2ZW50Q2xhc3MpO1xyXG5cclxuXHRcdFx0XHR2YXIgYnViYmxlcyA9IGV2ZW50TmFtZSA9PSBcImNoYW5nZVwiID8gZmFsc2UgOiB0cnVlO1xyXG5cdFx0XHRcdGV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIGJ1YmJsZXMsIHRydWUpOyAvLyBBbGwgZXZlbnRzIGNyZWF0ZWQgYXMgYnViYmxpbmcgYW5kIGNhbmNlbGFibGUuXHJcblxyXG5cdFx0XHRcdGV2ZW50LnN5bnRoZXRpYyA9IHRydWU7IC8vIGFsbG93IGRldGVjdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzXHJcblx0XHRcdFx0Ly8gVGhlIHNlY29uZCBwYXJhbWV0ZXIgc2F5cyBnbyBhaGVhZCB3aXRoIHRoZSBkZWZhdWx0IGFjdGlvblxyXG5cdFx0XHRcdG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCwgdHJ1ZSk7XHJcblx0XHRcdH0gZWxzZSBpZiAobm9kZS5maXJlRXZlbnQpIHtcclxuXHRcdFx0XHQvLyBJRS1vbGQgc2Nob29sIHN0eWxlXHJcblx0XHRcdFx0dmFyIGV2ZW50ID0gZG9jLmNyZWF0ZUV2ZW50T2JqZWN0KCk7XHJcblx0XHRcdFx0ZXZlbnQuc3ludGhldGljID0gdHJ1ZTsgLy8gYWxsb3cgZGV0ZWN0aW9uIG9mIHN5bnRoZXRpYyBldmVudHNcclxuXHRcdFx0XHRub2RlLmZpcmVFdmVudChcIm9uXCIgKyBldmVudE5hbWUsIGV2ZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRpbmRleDogZnVuY3Rpb24oIGVsICl7XHJcblx0XHRcdHZhciBjID0gZWwucGFyZW50Tm9kZS5jaGlsZHJlbiwgaSA9IDA7XHJcblx0XHRcdGZvcig7IGkgPCBjLmxlbmd0aDsgaSsrIClcclxuXHRcdFx0XHRpZiggY1tpXSA9PSBlbCApIHJldHVybiBpO1xyXG5cdFx0fSxcclxuXHJcblx0XHR0cmltOiBmdW5jdGlvbihzdHJpbmcpIHtcclxuXHRcdFx0cmV0dXJuIHN0cmluZy50cmltKCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGV2ZW50VHJpZ2dlcmVkOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdGlmIChlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC50cmlnZ2VyZWQpIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC50cmlnZ2VyZWQgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0cmVtb3ZlOiBmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRpZiAoZWwgJiYgZWwucGFyZW50Tm9kZSkge1xyXG5cdFx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdGZpbmQ6IGZ1bmN0aW9uKHBhcmVudCwgcXVlcnkpIHtcclxuXHRcdFx0cGFyZW50ID0gS1RVdGlsLmdldEJ5SWQocGFyZW50KTtcclxuXHRcdFx0aWYgKHBhcmVudCkge1xyXG5cdFx0XHRcdHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3RvcihxdWVyeSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0ZmluZEFsbDogZnVuY3Rpb24ocGFyZW50LCBxdWVyeSkge1xyXG5cdFx0XHRwYXJlbnQgPSBLVFV0aWwuZ2V0QnlJZChwYXJlbnQpO1xyXG5cdFx0XHRpZiAocGFyZW50KSB7XHJcblx0XHRcdFx0cmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRpbnNlcnRBZnRlcjogZnVuY3Rpb24oZWwsIHJlZmVyZW5jZU5vZGUpIHtcclxuXHRcdFx0cmV0dXJuIHJlZmVyZW5jZU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWwsIHJlZmVyZW5jZU5vZGUubmV4dFNpYmxpbmcpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRwYXJlbnRzOiBmdW5jdGlvbihlbGVtLCBzZWxlY3Rvcikge1xyXG5cdFx0XHQvLyBFbGVtZW50Lm1hdGNoZXMoKSBwb2x5ZmlsbFxyXG5cdFx0XHRpZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcclxuXHRcdFx0XHRFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID1cclxuXHRcdFx0XHRcdEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0XHRcdFx0RWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRcdFx0XHRFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0XHRcdFx0RWxlbWVudC5wcm90b3R5cGUub01hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0XHRcdFx0RWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRcdFx0XHRmdW5jdGlvbihzKSB7XHJcblx0XHRcdFx0XHRcdHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxyXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVzLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+PSAwICYmIG1hdGNoZXMuaXRlbShpKSAhPT0gdGhpcykge31cclxuXHRcdFx0XHRcdFx0cmV0dXJuIGkgPiAtMTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNldCB1cCBhIHBhcmVudCBhcnJheVxyXG5cdFx0XHR2YXIgcGFyZW50cyA9IFtdO1xyXG5cclxuXHRcdFx0Ly8gUHVzaCBlYWNoIHBhcmVudCBlbGVtZW50IHRvIHRoZSBhcnJheVxyXG5cdFx0XHRmb3IgKCA7IGVsZW0gJiYgZWxlbSAhPT0gZG9jdW1lbnQ7IGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0aWYgKHNlbGVjdG9yKSB7XHJcblx0XHRcdFx0XHRpZiAoZWxlbS5tYXRjaGVzKHNlbGVjdG9yKSkge1xyXG5cdFx0XHRcdFx0XHRwYXJlbnRzLnB1c2goZWxlbSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cGFyZW50cy5wdXNoKGVsZW0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gb3VyIHBhcmVudCBhcnJheVxyXG5cdFx0XHRyZXR1cm4gcGFyZW50cztcclxuXHRcdH0sXHJcblxyXG5cdFx0Y2hpbGRyZW46IGZ1bmN0aW9uKGVsLCBzZWxlY3RvciwgbG9nKSB7XHJcblx0XHRcdGlmICghZWwgfHwgIWVsLmNoaWxkTm9kZXMpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciByZXN1bHQgPSBbXSxcclxuXHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHRsID0gZWwuY2hpbGROb2Rlcy5sZW5ndGg7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpOyBpIDwgbDsgKytpKSB7XHJcblx0XHRcdFx0aWYgKGVsLmNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT0gMSAmJiBLVFV0aWwubWF0Y2hlcyhlbC5jaGlsZE5vZGVzW2ldLCBzZWxlY3RvciwgbG9nKSkge1xyXG5cdFx0XHRcdFx0cmVzdWx0LnB1c2goZWwuY2hpbGROb2Rlc1tpXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0fSxcclxuXHJcblx0XHRjaGlsZDogZnVuY3Rpb24oZWwsIHNlbGVjdG9yLCBsb2cpIHtcclxuXHRcdFx0dmFyIGNoaWxkcmVuID0gS1RVdGlsLmNoaWxkcmVuKGVsLCBzZWxlY3RvciwgbG9nKTtcclxuXHJcblx0XHRcdHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuWzBdIDogbnVsbDtcclxuXHRcdH0sXHJcblxyXG5cdFx0bWF0Y2hlczogZnVuY3Rpb24oZWwsIHNlbGVjdG9yLCBsb2cpIHtcclxuXHRcdFx0dmFyIHAgPSBFbGVtZW50LnByb3RvdHlwZTtcclxuXHRcdFx0dmFyIGYgPSBwLm1hdGNoZXMgfHwgcC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgcC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgcC5tc01hdGNoZXNTZWxlY3RvciB8fCBmdW5jdGlvbihzKSB7XHJcblx0XHRcdFx0cmV0dXJuIFtdLmluZGV4T2YuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpLCB0aGlzKSAhPT0gLTE7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRpZiAoZWwgJiYgZWwudGFnTmFtZSkge1xyXG5cdFx0XHRcdHJldHVybiBmLmNhbGwoZWwsIHNlbGVjdG9yKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0ZGF0YTogZnVuY3Rpb24oZWwpIHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcclxuXHRcdFx0XHRcdGlmICghZWwpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChlbC5jdXN0b21EYXRhVGFnID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdFx0d2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRCsrO1xyXG5cdFx0XHRcdFx0XHRlbC5jdXN0b21EYXRhVGFnID0gd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAod2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVbZWwuY3VzdG9tRGF0YVRhZ10gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0XHR3aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZVtlbC5jdXN0b21EYXRhVGFnXSA9IHt9O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsLmN1c3RvbURhdGFUYWddW25hbWVdID0gZGF0YTtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKG5hbWUpIHtcclxuXHRcdFx0XHRcdGlmICghZWwpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChlbC5jdXN0b21EYXRhVGFnID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVbZWwuY3VzdG9tRGF0YVRhZ11bbmFtZV0gOiBudWxsO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdGhhczogZnVuY3Rpb24obmFtZSkge1xyXG5cdFx0XHRcdFx0aWYgKCFlbCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKGVsLmN1c3RvbURhdGFUYWcgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuICh3aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZVtlbC5jdXN0b21EYXRhVGFnXSAmJiB3aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZVtlbC5jdXN0b21EYXRhVGFnXVtuYW1lXSkgPyB0cnVlIDogZmFsc2U7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0cmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XHJcblx0XHRcdFx0XHRpZiAoZWwgJiYgdGhpcy5oYXMobmFtZSkpIHtcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsLmN1c3RvbURhdGFUYWddW25hbWVdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0b3V0ZXJXaWR0aDogZnVuY3Rpb24oZWwsIG1hcmdpbikge1xyXG5cdFx0XHR2YXIgd2lkdGg7XHJcblxyXG5cdFx0XHRpZiAobWFyZ2luID09PSB0cnVlKSB7XHJcblx0XHRcdFx0d2lkdGggPSBwYXJzZUZsb2F0KGVsLm9mZnNldFdpZHRoKTtcclxuXHRcdFx0XHR3aWR0aCArPSBwYXJzZUZsb2F0KEtUVXRpbC5jc3MoZWwsICdtYXJnaW4tbGVmdCcpKSArIHBhcnNlRmxvYXQoS1RVdGlsLmNzcyhlbCwgJ21hcmdpbi1yaWdodCcpKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHBhcnNlRmxvYXQod2lkdGgpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHdpZHRoID0gcGFyc2VGbG9hdChlbC5vZmZzZXRXaWR0aCk7XHJcblxyXG5cdFx0XHRcdHJldHVybiB3aWR0aDtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRvZmZzZXQ6IGZ1bmN0aW9uKGVsKSB7XHJcblx0XHRcdHZhciByZWN0LCB3aW47XHJcblxyXG5cdFx0XHRpZiAoICFlbCApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcclxuXHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxyXG5cdFx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3JcclxuXHJcblx0XHRcdGlmICggIWVsLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXHJcblx0XHRcdHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdFx0d2luID0gZWwub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuXHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcclxuXHRcdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0aGVpZ2h0OiBmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRyZXR1cm4gS1RVdGlsLmNzcyhlbCwgJ2hlaWdodCcpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRvdXRlckhlaWdodDogZnVuY3Rpb24oZWwsIHdpdGhNYXJnaW4pIHtcclxuXHRcdFx0dmFyIGhlaWdodCA9IGVsLm9mZnNldEhlaWdodDtcclxuXHRcdFx0dmFyIHN0eWxlO1xyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiB3aXRoTWFyZ2luICE9PSAndW5kZWZpbmVkJyAmJiB3aXRoTWFyZ2luID09PSB0cnVlKSB7XHJcblx0XHRcdFx0c3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcclxuXHRcdFx0XHRoZWlnaHQgKz0gcGFyc2VJbnQoc3R5bGUubWFyZ2luVG9wKSArIHBhcnNlSW50KHN0eWxlLm1hcmdpbkJvdHRvbSk7XHJcblxyXG5cdFx0XHRcdHJldHVybiBoZWlnaHQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuIGhlaWdodDtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHR2aXNpYmxlOiBmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRyZXR1cm4gIShlbC5vZmZzZXRXaWR0aCA9PT0gMCAmJiBlbC5vZmZzZXRIZWlnaHQgPT09IDApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRhdHRyOiBmdW5jdGlvbihlbCwgbmFtZSwgdmFsdWUpIHtcclxuXHRcdFx0aWYgKGVsID09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRlbC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUobmFtZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0aGFzQXR0cjogZnVuY3Rpb24oZWwsIG5hbWUpIHtcclxuXHRcdFx0aWYgKGVsID09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShuYW1lKSA/IHRydWUgOiBmYWxzZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oZWwsIG5hbWUpIHtcclxuXHRcdFx0aWYgKGVsID09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZWwucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRhbmltYXRlOiBmdW5jdGlvbihmcm9tLCB0bywgZHVyYXRpb24sIHVwZGF0ZSwgZWFzaW5nLCBkb25lKSB7XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBUaW55QW5pbWF0ZS5lYXNpbmdzXHJcblx0XHRcdCAqICBBZGFwdGVkIGZyb20galF1ZXJ5IEVhc2luZ1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0dmFyIGVhc2luZ3MgPSB7fTtcclxuXHRcdFx0dmFyIGVhc2luZztcclxuXHJcblx0XHRcdGVhc2luZ3MubGluZWFyID0gZnVuY3Rpb24odCwgYiwgYywgZCkge1xyXG5cdFx0XHRcdHJldHVybiBjICogdCAvIGQgKyBiO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0ZWFzaW5nID0gZWFzaW5ncy5saW5lYXI7XHJcblxyXG5cdFx0XHQvLyBFYXJseSBiYWlsIG91dCBpZiBjYWxsZWQgaW5jb3JyZWN0bHlcclxuXHRcdFx0aWYgKHR5cGVvZiBmcm9tICE9PSAnbnVtYmVyJyB8fFxyXG5cdFx0XHRcdHR5cGVvZiB0byAhPT0gJ251bWJlcicgfHxcclxuXHRcdFx0XHR0eXBlb2YgZHVyYXRpb24gIT09ICdudW1iZXInIHx8XHJcblx0XHRcdFx0dHlwZW9mIHVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ3JlYXRlIG1vY2sgZG9uZSgpIGZ1bmN0aW9uIGlmIG5lY2Vzc2FyeVxyXG5cdFx0XHRpZiAodHlwZW9mIGRvbmUgIT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRkb25lID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUGljayBpbXBsZW1lbnRhdGlvbiAocmVxdWVzdEFuaW1hdGlvbkZyYW1lIHwgc2V0VGltZW91dClcclxuXHRcdFx0dmFyIHJBRiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuXHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDUwKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8vIEFuaW1hdGlvbiBsb29wXHJcblx0XHRcdHZhciBjYW5jZWxlZCA9IGZhbHNlO1xyXG5cdFx0XHR2YXIgY2hhbmdlID0gdG8gLSBmcm9tO1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gbG9vcCh0aW1lc3RhbXApIHtcclxuXHRcdFx0XHR2YXIgdGltZSA9ICh0aW1lc3RhbXAgfHwgK25ldyBEYXRlKCkpIC0gc3RhcnQ7XHJcblxyXG5cdFx0XHRcdGlmICh0aW1lID49IDApIHtcclxuXHRcdFx0XHRcdHVwZGF0ZShlYXNpbmcodGltZSwgZnJvbSwgY2hhbmdlLCBkdXJhdGlvbikpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAodGltZSA+PSAwICYmIHRpbWUgPj0gZHVyYXRpb24pIHtcclxuXHRcdFx0XHRcdHVwZGF0ZSh0byk7XHJcblx0XHRcdFx0XHRkb25lKCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHJBRihsb29wKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHVwZGF0ZShmcm9tKTtcclxuXHJcblx0XHRcdC8vIFN0YXJ0IGFuaW1hdGlvbiBsb29wXHJcblx0XHRcdHZhciBzdGFydCA9IHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93ID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogK25ldyBEYXRlKCk7XHJcblxyXG5cdFx0XHRyQUYobG9vcCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGFjdHVhbENzczogZnVuY3Rpb24oZWwsIHByb3AsIGNhY2hlKSB7XHJcblx0XHRcdHZhciBjc3MgPSAnJztcclxuXHJcblx0XHRcdGlmIChlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCFlbC5nZXRBdHRyaWJ1dGUoJ2t0LWhpZGRlbi0nICsgcHJvcCkgfHwgY2FjaGUgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0dmFyIHZhbHVlO1xyXG5cclxuXHRcdFx0XHQvLyB0aGUgZWxlbWVudCBpcyBoaWRkZW4gc286XHJcblx0XHRcdFx0Ly8gbWFraW5nIHRoZSBlbCBibG9jayBzbyB3ZSBjYW4gbWVhc3N1cmUgaXRzIGhlaWdodCBidXQgc3RpbGwgYmUgaGlkZGVuXHJcblx0XHRcdFx0Y3NzID0gZWwuc3R5bGUuY3NzVGV4dDtcclxuXHRcdFx0XHRlbC5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsgdmlzaWJpbGl0eTogaGlkZGVuOyBkaXNwbGF5OiBibG9jazsnO1xyXG5cclxuXHRcdFx0XHRpZiAocHJvcCA9PSAnd2lkdGgnKSB7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGVsLm9mZnNldFdpZHRoO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAocHJvcCA9PSAnaGVpZ2h0Jykge1xyXG5cdFx0XHRcdFx0dmFsdWUgPSBlbC5vZmZzZXRIZWlnaHQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRlbC5zdHlsZS5jc3NUZXh0ID0gY3NzO1xyXG5cclxuXHRcdFx0XHQvLyBzdG9yZSBpdCBpbiBjYWNoZVxyXG5cdFx0XHRcdGVsLnNldEF0dHJpYnV0ZSgna3QtaGlkZGVuLScgKyBwcm9wLCB2YWx1ZSk7XHJcblxyXG5cdFx0XHRcdHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBzdG9yZSBpdCBpbiBjYWNoZVxyXG5cdFx0XHRcdHJldHVybiBwYXJzZUZsb2F0KGVsLmdldEF0dHJpYnV0ZSgna3QtaGlkZGVuLScgKyBwcm9wKSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0YWN0dWFsSGVpZ2h0OiBmdW5jdGlvbihlbCwgY2FjaGUpIHtcclxuXHRcdFx0cmV0dXJuIEtUVXRpbC5hY3R1YWxDc3MoZWwsICdoZWlnaHQnLCBjYWNoZSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGFjdHVhbFdpZHRoOiBmdW5jdGlvbihlbCwgY2FjaGUpIHtcclxuXHRcdFx0cmV0dXJuIEtUVXRpbC5hY3R1YWxDc3MoZWwsICd3aWR0aCcsIGNhY2hlKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0U2Nyb2xsOiBmdW5jdGlvbihlbGVtZW50LCBtZXRob2QpIHtcclxuXHRcdFx0Ly8gVGhlIHBhc3NlZCBpbiBgbWV0aG9kYCB2YWx1ZSBzaG91bGQgYmUgJ1RvcCcgb3IgJ0xlZnQnXHJcblx0XHRcdG1ldGhvZCA9ICdzY3JvbGwnICsgbWV0aG9kO1xyXG5cdFx0XHRyZXR1cm4gKGVsZW1lbnQgPT0gd2luZG93IHx8IGVsZW1lbnQgPT0gZG9jdW1lbnQpID8gKFxyXG5cdFx0XHRcdHNlbGZbKG1ldGhvZCA9PSAnc2Nyb2xsVG9wJykgPyAncGFnZVlPZmZzZXQnIDogJ3BhZ2VYT2Zmc2V0J10gfHxcclxuXHRcdFx0XHQoYnJvd3NlclN1cHBvcnRzQm94TW9kZWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W21ldGhvZF0pIHx8XHJcblx0XHRcdFx0ZG9jdW1lbnQuYm9keVttZXRob2RdXHJcblx0XHRcdCkgOiBlbGVtZW50W21ldGhvZF07XHJcblx0XHR9LFxyXG5cclxuXHRcdGNzczogZnVuY3Rpb24oZWwsIHN0eWxlUHJvcCwgdmFsdWUpIHtcclxuXHRcdFx0aWYgKCFlbCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRlbC5zdHlsZVtzdHlsZVByb3BdID0gdmFsdWU7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFyIGRlZmF1bHRWaWV3ID0gKGVsLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpLmRlZmF1bHRWaWV3O1xyXG5cdFx0XHRcdC8vIFczQyBzdGFuZGFyZCB3YXk6XHJcblx0XHRcdFx0aWYgKGRlZmF1bHRWaWV3ICYmIGRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcclxuXHRcdFx0XHRcdC8vIHNhbml0aXplIHByb3BlcnR5IG5hbWUgdG8gY3NzIG5vdGF0aW9uXHJcblx0XHRcdFx0XHQvLyAoaHlwaGVuIHNlcGFyYXRlZCB3b3JkcyBlZy4gZm9udC1TaXplKVxyXG5cdFx0XHRcdFx0c3R5bGVQcm9wID0gc3R5bGVQcm9wLnJlcGxhY2UoLyhbQS1aXSkvZywgXCItJDFcIikudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdHJldHVybiBkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHN0eWxlUHJvcCk7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChlbC5jdXJyZW50U3R5bGUpIHsgLy8gSUVcclxuXHRcdFx0XHRcdC8vIHNhbml0aXplIHByb3BlcnR5IG5hbWUgdG8gY2FtZWxDYXNlXHJcblx0XHRcdFx0XHRzdHlsZVByb3AgPSBzdHlsZVByb3AucmVwbGFjZSgvXFwtKFxcdykvZywgZnVuY3Rpb24oc3RyLCBsZXR0ZXIpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGVsLmN1cnJlbnRTdHlsZVtzdHlsZVByb3BdO1xyXG5cdFx0XHRcdFx0Ly8gY29udmVydCBvdGhlciB1bml0cyB0byBwaXhlbHMgb24gSUVcclxuXHRcdFx0XHRcdGlmICgvXlxcZCsoZW18cHR8JXxleCk/JC9pLnRlc3QodmFsdWUpKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiAoZnVuY3Rpb24odmFsdWUpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgb2xkTGVmdCA9IGVsLnN0eWxlLmxlZnQsXHJcblx0XHRcdFx0XHRcdFx0XHRvbGRSc0xlZnQgPSBlbC5ydW50aW1lU3R5bGUubGVmdDtcclxuXHRcdFx0XHRcdFx0XHRlbC5ydW50aW1lU3R5bGUubGVmdCA9IGVsLmN1cnJlbnRTdHlsZS5sZWZ0O1xyXG5cdFx0XHRcdFx0XHRcdGVsLnN0eWxlLmxlZnQgPSB2YWx1ZSB8fCAwO1xyXG5cdFx0XHRcdFx0XHRcdHZhbHVlID0gZWwuc3R5bGUucGl4ZWxMZWZ0ICsgXCJweFwiO1xyXG5cdFx0XHRcdFx0XHRcdGVsLnN0eWxlLmxlZnQgPSBvbGRMZWZ0O1xyXG5cdFx0XHRcdFx0XHRcdGVsLnJ1bnRpbWVTdHlsZS5sZWZ0ID0gb2xkUnNMZWZ0O1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0fSkodmFsdWUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzbGlkZTogZnVuY3Rpb24oZWwsIGRpciwgc3BlZWQsIGNhbGxiYWNrLCByZWNhbGNNYXhIZWlnaHQpIHtcclxuXHRcdFx0aWYgKCFlbCB8fCAoZGlyID09ICd1cCcgJiYgS1RVdGlsLnZpc2libGUoZWwpID09PSBmYWxzZSkgfHwgKGRpciA9PSAnZG93bicgJiYgS1RVdGlsLnZpc2libGUoZWwpID09PSB0cnVlKSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3BlZWQgPSAoc3BlZWQgPyBzcGVlZCA6IDYwMCk7XHJcblx0XHRcdHZhciBjYWxjSGVpZ2h0ID0gS1RVdGlsLmFjdHVhbEhlaWdodChlbCk7XHJcblx0XHRcdHZhciBjYWxjUGFkZGluZ1RvcCA9IGZhbHNlO1xyXG5cdFx0XHR2YXIgY2FsY1BhZGRpbmdCb3R0b20gPSBmYWxzZTtcclxuXHJcblx0XHRcdGlmIChLVFV0aWwuY3NzKGVsLCAncGFkZGluZy10b3AnKSAmJiBLVFV0aWwuZGF0YShlbCkuaGFzKCdzbGlkZS1wYWRkaW5nLXRvcCcpICE9PSB0cnVlKSB7XHJcblx0XHRcdFx0S1RVdGlsLmRhdGEoZWwpLnNldCgnc2xpZGUtcGFkZGluZy10b3AnLCBLVFV0aWwuY3NzKGVsLCAncGFkZGluZy10b3AnKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChLVFV0aWwuY3NzKGVsLCAncGFkZGluZy1ib3R0b20nKSAmJiBLVFV0aWwuZGF0YShlbCkuaGFzKCdzbGlkZS1wYWRkaW5nLWJvdHRvbScpICE9PSB0cnVlKSB7XHJcblx0XHRcdFx0S1RVdGlsLmRhdGEoZWwpLnNldCgnc2xpZGUtcGFkZGluZy1ib3R0b20nLCBLVFV0aWwuY3NzKGVsLCAncGFkZGluZy1ib3R0b20nKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChLVFV0aWwuZGF0YShlbCkuaGFzKCdzbGlkZS1wYWRkaW5nLXRvcCcpKSB7XHJcblx0XHRcdFx0Y2FsY1BhZGRpbmdUb3AgPSBwYXJzZUludChLVFV0aWwuZGF0YShlbCkuZ2V0KCdzbGlkZS1wYWRkaW5nLXRvcCcpKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKEtUVXRpbC5kYXRhKGVsKS5oYXMoJ3NsaWRlLXBhZGRpbmctYm90dG9tJykpIHtcclxuXHRcdFx0XHRjYWxjUGFkZGluZ0JvdHRvbSA9IHBhcnNlSW50KEtUVXRpbC5kYXRhKGVsKS5nZXQoJ3NsaWRlLXBhZGRpbmctYm90dG9tJykpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoZGlyID09ICd1cCcpIHsgLy8gdXBcclxuXHRcdFx0XHRlbC5zdHlsZS5jc3NUZXh0ID0gJ2Rpc3BsYXk6IGJsb2NrOyBvdmVyZmxvdzogaGlkZGVuOyc7XHJcblxyXG5cdFx0XHRcdGlmIChjYWxjUGFkZGluZ1RvcCkge1xyXG5cdFx0XHRcdFx0S1RVdGlsLmFuaW1hdGUoMCwgY2FsY1BhZGRpbmdUb3AsIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xyXG5cdFx0XHRcdFx0XHRlbC5zdHlsZS5wYWRkaW5nVG9wID0gKGNhbGNQYWRkaW5nVG9wIC0gdmFsdWUpICsgJ3B4JztcclxuXHRcdFx0XHRcdH0sICdsaW5lYXInKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChjYWxjUGFkZGluZ0JvdHRvbSkge1xyXG5cdFx0XHRcdFx0S1RVdGlsLmFuaW1hdGUoMCwgY2FsY1BhZGRpbmdCb3R0b20sIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xyXG5cdFx0XHRcdFx0XHRlbC5zdHlsZS5wYWRkaW5nQm90dG9tID0gKGNhbGNQYWRkaW5nQm90dG9tIC0gdmFsdWUpICsgJ3B4JztcclxuXHRcdFx0XHRcdH0sICdsaW5lYXInKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdEtUVXRpbC5hbmltYXRlKDAsIGNhbGNIZWlnaHQsIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xyXG5cdFx0XHRcdFx0ZWwuc3R5bGUuaGVpZ2h0ID0gKGNhbGNIZWlnaHQgLSB2YWx1ZSkgKyAncHgnO1xyXG5cdFx0XHRcdH0sICdsaW5lYXInLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGVsLnN0eWxlLmhlaWdodCA9ICcnO1xyXG5cdFx0XHRcdFx0ZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cclxuXHRcdFx0fSBlbHNlIGlmIChkaXIgPT0gJ2Rvd24nKSB7IC8vIGRvd25cclxuXHRcdFx0XHRlbC5zdHlsZS5jc3NUZXh0ID0gJ2Rpc3BsYXk6IGJsb2NrOyBvdmVyZmxvdzogaGlkZGVuOyc7XHJcblxyXG5cdFx0XHRcdGlmIChjYWxjUGFkZGluZ1RvcCkge1xyXG5cdFx0XHRcdFx0S1RVdGlsLmFuaW1hdGUoMCwgY2FsY1BhZGRpbmdUb3AsIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkgey8vXHJcblx0XHRcdFx0XHRcdGVsLnN0eWxlLnBhZGRpbmdUb3AgPSB2YWx1ZSArICdweCc7XHJcblx0XHRcdFx0XHR9LCAnbGluZWFyJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdGVsLnN0eWxlLnBhZGRpbmdUb3AgPSAnJztcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKGNhbGNQYWRkaW5nQm90dG9tKSB7XHJcblx0XHRcdFx0XHRLVFV0aWwuYW5pbWF0ZSgwLCBjYWxjUGFkZGluZ0JvdHRvbSwgc3BlZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcblx0XHRcdFx0XHRcdGVsLnN0eWxlLnBhZGRpbmdCb3R0b20gPSB2YWx1ZSArICdweCc7XHJcblx0XHRcdFx0XHR9LCAnbGluZWFyJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdGVsLnN0eWxlLnBhZGRpbmdCb3R0b20gPSAnJztcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0S1RVdGlsLmFuaW1hdGUoMCwgY2FsY0hlaWdodCwgc3BlZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcblx0XHRcdFx0XHRlbC5zdHlsZS5oZWlnaHQgPSB2YWx1ZSArICdweCc7XHJcblx0XHRcdFx0fSwgJ2xpbmVhcicsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0ZWwuc3R5bGUuaGVpZ2h0ID0gJyc7XHJcblx0XHRcdFx0XHRlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcblx0XHRcdFx0XHRlbC5zdHlsZS5vdmVyZmxvdyA9ICcnO1xyXG5cclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdFx0Y2FsbGJhY2soKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzbGlkZVVwOiBmdW5jdGlvbihlbCwgc3BlZWQsIGNhbGxiYWNrKSB7XHJcblx0XHRcdEtUVXRpbC5zbGlkZShlbCwgJ3VwJywgc3BlZWQsIGNhbGxiYWNrKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0c2xpZGVEb3duOiBmdW5jdGlvbihlbCwgc3BlZWQsIGNhbGxiYWNrKSB7XHJcblx0XHRcdEtUVXRpbC5zbGlkZShlbCwgJ2Rvd24nLCBzcGVlZCwgY2FsbGJhY2spO1xyXG5cdFx0fSxcclxuXHJcblx0XHRzaG93OiBmdW5jdGlvbihlbCwgZGlzcGxheSkge1xyXG5cdFx0XHRpZiAodHlwZW9mIGVsICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdGVsLnN0eWxlLmRpc3BsYXkgPSAoZGlzcGxheSA/IGRpc3BsYXkgOiAnYmxvY2snKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRoaWRlOiBmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRpZiAodHlwZW9mIGVsICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0YWRkRXZlbnQ6IGZ1bmN0aW9uKGVsLCB0eXBlLCBoYW5kbGVyLCBvbmUpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBlbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZWwgIT09IG51bGwpIHtcclxuXHRcdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHJlbW92ZUV2ZW50OiBmdW5jdGlvbihlbCwgdHlwZSwgaGFuZGxlcikge1xyXG5cdFx0XHRpZiAoZWwgIT09IG51bGwpIHtcclxuXHRcdFx0XHRlbC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdG9uOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3RvciwgZXZlbnQsIGhhbmRsZXIpIHtcclxuXHRcdFx0aWYgKCFzZWxlY3Rvcikge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGV2ZW50SWQgPSBLVFV0aWwuZ2V0VW5pcXVlSUQoJ2V2ZW50Jyk7XHJcblxyXG5cdFx0XHR3aW5kb3cuS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVyc1tldmVudElkXSA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcblx0XHRcdFx0dmFyIHRhcmdldCA9IGUudGFyZ2V0O1xyXG5cclxuXHRcdFx0XHR3aGlsZSAodGFyZ2V0ICYmIHRhcmdldCAhPT0gZWxlbWVudCkge1xyXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGogPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xyXG5cdFx0XHRcdFx0XHRpZiAodGFyZ2V0ID09PSB0YXJnZXRzW2ldKSB7XHJcblx0XHRcdFx0XHRcdFx0aGFuZGxlci5jYWxsKHRhcmdldCwgZSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdEtUVXRpbC5hZGRFdmVudChlbGVtZW50LCBldmVudCwgd2luZG93LktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnNbZXZlbnRJZF0pO1xyXG5cclxuXHRcdFx0cmV0dXJuIGV2ZW50SWQ7XHJcblx0XHR9LFxyXG5cclxuXHRcdG9mZjogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGV2ZW50SWQpIHtcclxuXHRcdFx0aWYgKCFlbGVtZW50IHx8ICF3aW5kb3cuS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVyc1tldmVudElkXSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0S1RVdGlsLnJlbW92ZUV2ZW50KGVsZW1lbnQsIGV2ZW50LCB3aW5kb3cuS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVyc1tldmVudElkXSk7XHJcblxyXG5cdFx0XHRkZWxldGUgd2luZG93LktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnNbZXZlbnRJZF07XHJcblx0XHR9LFxyXG5cclxuXHRcdG9uZTogZnVuY3Rpb24gb25ldGltZShlbCwgdHlwZSwgY2FsbGJhY2spIHtcclxuXHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jdGlvbiBjYWxsZWUoZSkge1xyXG5cdFx0XHRcdC8vIHJlbW92ZSBldmVudFxyXG5cdFx0XHRcdGlmIChlLnRhcmdldCAmJiBlLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcblx0XHRcdFx0XHRlLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGUudHlwZSwgY2FsbGVlKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIG5lZWQgdG8gdmVyaWZ5IGZyb20gaHR0cHM6Ly90aGVtZWZvcmVzdC5uZXQvYXV0aG9yX2Rhc2hib2FyZCNjb21tZW50XzIzNjE1NTg4XHJcblx0XHRcdFx0aWYgKGVsICYmIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcclxuXHRcdFx0XHRcdGUuY3VycmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGUudHlwZSwgY2FsbGVlKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGNhbGwgaGFuZGxlclxyXG5cdFx0XHRcdHJldHVybiBjYWxsYmFjayhlKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGhhc2g6IGZ1bmN0aW9uKHN0cikge1xyXG5cdFx0XHR2YXIgaGFzaCA9IDAsXHJcblx0XHRcdFx0aSwgY2hyO1xyXG5cclxuXHRcdFx0aWYgKHN0ci5sZW5ndGggPT09IDApIHJldHVybiBoYXNoO1xyXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0Y2hyID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcblx0XHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hyO1xyXG5cdFx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBoYXNoO1xyXG5cdFx0fSxcclxuXHJcblx0XHRhbmltYXRlQ2xhc3M6IGZ1bmN0aW9uKGVsLCBhbmltYXRpb25OYW1lLCBjYWxsYmFjaykge1xyXG5cdFx0XHR2YXIgYW5pbWF0aW9uO1xyXG5cdFx0XHR2YXIgYW5pbWF0aW9ucyA9IHtcclxuXHRcdFx0XHRhbmltYXRpb246ICdhbmltYXRpb25lbmQnLFxyXG5cdFx0XHRcdE9BbmltYXRpb246ICdvQW5pbWF0aW9uRW5kJyxcclxuXHRcdFx0XHRNb3pBbmltYXRpb246ICdtb3pBbmltYXRpb25FbmQnLFxyXG5cdFx0XHRcdFdlYmtpdEFuaW1hdGlvbjogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXHJcblx0XHRcdFx0bXNBbmltYXRpb246ICdtc0FuaW1hdGlvbkVuZCcsXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRmb3IgKHZhciB0IGluIGFuaW1hdGlvbnMpIHtcclxuXHRcdFx0XHRpZiAoZWwuc3R5bGVbdF0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uc1t0XTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdEtUVXRpbC5hZGRDbGFzcyhlbCwgJ2FuaW1hdGVkICcgKyBhbmltYXRpb25OYW1lKTtcclxuXHJcblx0XHRcdEtUVXRpbC5vbmUoZWwsIGFuaW1hdGlvbiwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0S1RVdGlsLnJlbW92ZUNsYXNzKGVsLCAnYW5pbWF0ZWQgJyArIGFuaW1hdGlvbk5hbWUpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGlmIChjYWxsYmFjaykge1xyXG5cdFx0XHRcdEtUVXRpbC5vbmUoZWwsIGFuaW1hdGlvbiwgY2FsbGJhY2spO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uKGVsLCBjYWxsYmFjaykge1xyXG5cdFx0XHR2YXIgdHJhbnNpdGlvbjtcclxuXHRcdFx0dmFyIHRyYW5zaXRpb25zID0ge1xyXG5cdFx0XHRcdHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJyxcclxuXHRcdFx0XHRPVHJhbnNpdGlvbjogJ29UcmFuc2l0aW9uRW5kJyxcclxuXHRcdFx0XHRNb3pUcmFuc2l0aW9uOiAnbW96VHJhbnNpdGlvbkVuZCcsXHJcblx0XHRcdFx0V2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxyXG5cdFx0XHRcdG1zVHJhbnNpdGlvbjogJ21zVHJhbnNpdGlvbkVuZCdcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGZvciAodmFyIHQgaW4gdHJhbnNpdGlvbnMpIHtcclxuXHRcdFx0XHRpZiAoZWwuc3R5bGVbdF0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0dHJhbnNpdGlvbiA9IHRyYW5zaXRpb25zW3RdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0S1RVdGlsLm9uZShlbCwgdHJhbnNpdGlvbiwgY2FsbGJhY2spO1xyXG5cdFx0fSxcclxuXHJcblx0XHRhbmltYXRpb25FbmQ6IGZ1bmN0aW9uKGVsLCBjYWxsYmFjaykge1xyXG5cdFx0XHR2YXIgYW5pbWF0aW9uO1xyXG5cdFx0XHR2YXIgYW5pbWF0aW9ucyA9IHtcclxuXHRcdFx0XHRhbmltYXRpb246ICdhbmltYXRpb25lbmQnLFxyXG5cdFx0XHRcdE9BbmltYXRpb246ICdvQW5pbWF0aW9uRW5kJyxcclxuXHRcdFx0XHRNb3pBbmltYXRpb246ICdtb3pBbmltYXRpb25FbmQnLFxyXG5cdFx0XHRcdFdlYmtpdEFuaW1hdGlvbjogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXHJcblx0XHRcdFx0bXNBbmltYXRpb246ICdtc0FuaW1hdGlvbkVuZCdcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGZvciAodmFyIHQgaW4gYW5pbWF0aW9ucykge1xyXG5cdFx0XHRcdGlmIChlbC5zdHlsZVt0XSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRhbmltYXRpb24gPSBhbmltYXRpb25zW3RdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0S1RVdGlsLm9uZShlbCwgYW5pbWF0aW9uLCBjYWxsYmFjayk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGFuaW1hdGVEZWxheTogZnVuY3Rpb24oZWwsIHZhbHVlKSB7XHJcblx0XHRcdHZhciB2ZW5kb3JzID0gWyd3ZWJraXQtJywgJ21vei0nLCAnbXMtJywgJ28tJywgJyddO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRLVFV0aWwuY3NzKGVsLCB2ZW5kb3JzW2ldICsgJ2FuaW1hdGlvbi1kZWxheScsIHZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRhbmltYXRlRHVyYXRpb246IGZ1bmN0aW9uKGVsLCB2YWx1ZSkge1xyXG5cdFx0XHR2YXIgdmVuZG9ycyA9IFsnd2Via2l0LScsICdtb3otJywgJ21zLScsICdvLScsICcnXTtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0S1RVdGlsLmNzcyhlbCwgdmVuZG9yc1tpXSArICdhbmltYXRpb24tZHVyYXRpb24nLCB2YWx1ZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0c2Nyb2xsVG86IGZ1bmN0aW9uKHRhcmdldCwgb2Zmc2V0LCBkdXJhdGlvbikge1xyXG5cdFx0XHR2YXIgZHVyYXRpb24gPSBkdXJhdGlvbiA/IGR1cmF0aW9uIDogNTAwO1xyXG5cdFx0XHR2YXIgdGFyZ2V0UG9zID0gdGFyZ2V0ID8gS1RVdGlsLm9mZnNldCh0YXJnZXQpLnRvcCA6IDA7XHJcblx0XHRcdHZhciBzY3JvbGxQb3MgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwO1xyXG5cdFx0XHR2YXIgZnJvbSwgdG87XHJcblxyXG5cdFx0XHRpZiAob2Zmc2V0KSB7XHJcblx0XHRcdFx0c2Nyb2xsUG9zICs9IG9mZnNldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnJvbSA9IHNjcm9sbFBvcztcclxuXHRcdFx0dG8gPSB0YXJnZXRQb3M7XHJcblxyXG5cdFx0XHRLVFV0aWwuYW5pbWF0ZShmcm9tLCB0bywgZHVyYXRpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XHJcblx0XHRcdFx0ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IHZhbHVlO1xyXG5cdFx0XHRcdGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxUb3AgPSB2YWx1ZTtcclxuXHRcdFx0XHRkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IHZhbHVlO1xyXG5cdFx0XHR9KTsgLy8sIGVhc2luZywgZG9uZVxyXG5cdFx0fSxcclxuXHJcblx0XHRzY3JvbGxUb3A6IGZ1bmN0aW9uKG9mZnNldCwgZHVyYXRpb24pIHtcclxuXHRcdFx0S1RVdGlsLnNjcm9sbFRvKG51bGwsIG9mZnNldCwgZHVyYXRpb24pO1xyXG5cdFx0fSxcclxuXHJcblx0XHRpc0FycmF5OiBmdW5jdGlvbihvYmopIHtcclxuXHRcdFx0cmV0dXJuIG9iaiAmJiBBcnJheS5pc0FycmF5KG9iaik7XHJcblx0XHR9LFxyXG5cclxuXHRcdHJlYWR5OiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG5cdFx0XHRpZiAoZG9jdW1lbnQuYXR0YWNoRXZlbnQgPyBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgOiBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xyXG5cdFx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGNhbGxiYWNrKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRpc0VtcHR5OiBmdW5jdGlvbihvYmopIHtcclxuXHRcdFx0Zm9yICh2YXIgcHJvcCBpbiBvYmopIHtcclxuXHRcdFx0XHRpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0bnVtYmVyU3RyaW5nOiBmdW5jdGlvbihuU3RyKSB7XHJcblx0XHRcdG5TdHIgKz0gJyc7XHJcblx0XHRcdHZhciB4ID0gblN0ci5zcGxpdCgnLicpO1xyXG5cdFx0XHR2YXIgeDEgPSB4WzBdO1xyXG5cdFx0XHR2YXIgeDIgPSB4Lmxlbmd0aCA+IDEgPyAnLicgKyB4WzFdIDogJyc7XHJcblx0XHRcdHZhciByZ3ggPSAvKFxcZCspKFxcZHszfSkvO1xyXG5cdFx0XHR3aGlsZSAocmd4LnRlc3QoeDEpKSB7XHJcblx0XHRcdFx0eDEgPSB4MS5yZXBsYWNlKHJneCwgJyQxJyArICcsJyArICckMicpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB4MSArIHgyO1xyXG5cdFx0fSxcclxuXHJcblx0XHRkZXRlY3RJRTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xyXG5cclxuXHRcdFx0Ly8gVGVzdCB2YWx1ZXM7IFVuY29tbWVudCB0byBjaGVjayByZXN1bHQg4oCmXHJcblxyXG5cdFx0XHQvLyBJRSAxMFxyXG5cdFx0XHQvLyB1YSA9ICdNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSAxMC4wOyBXaW5kb3dzIE5UIDYuMjsgVHJpZGVudC82LjApJztcclxuXHJcblx0XHRcdC8vIElFIDExXHJcblx0XHRcdC8vIHVhID0gJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMzsgVHJpZGVudC83LjA7IHJ2OjExLjApIGxpa2UgR2Vja28nO1xyXG5cclxuXHRcdFx0Ly8gRWRnZSAxMiAoU3BhcnRhbilcclxuXHRcdFx0Ly8gdWEgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8zOS4wLjIxNzEuNzEgU2FmYXJpLzUzNy4zNiBFZGdlLzEyLjAnO1xyXG5cclxuXHRcdFx0Ly8gRWRnZSAxM1xyXG5cdFx0XHQvLyB1YSA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNDYuMC4yNDg2LjAgU2FmYXJpLzUzNy4zNiBFZGdlLzEzLjEwNTg2JztcclxuXHJcblx0XHRcdHZhciBtc2llID0gdWEuaW5kZXhPZignTVNJRSAnKTtcclxuXHRcdFx0aWYgKG1zaWUgPiAwKSB7XHJcblx0XHRcdFx0Ly8gSUUgMTAgb3Igb2xkZXIgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXHJcblx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KHVhLnN1YnN0cmluZyhtc2llICsgNSwgdWEuaW5kZXhPZignLicsIG1zaWUpKSwgMTApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgdHJpZGVudCA9IHVhLmluZGV4T2YoJ1RyaWRlbnQvJyk7XHJcblx0XHRcdGlmICh0cmlkZW50ID4gMCkge1xyXG5cdFx0XHRcdC8vIElFIDExID0+IHJldHVybiB2ZXJzaW9uIG51bWJlclxyXG5cdFx0XHRcdHZhciBydiA9IHVhLmluZGV4T2YoJ3J2OicpO1xyXG5cdFx0XHRcdHJldHVybiBwYXJzZUludCh1YS5zdWJzdHJpbmcocnYgKyAzLCB1YS5pbmRleE9mKCcuJywgcnYpKSwgMTApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgZWRnZSA9IHVhLmluZGV4T2YoJ0VkZ2UvJyk7XHJcblx0XHRcdGlmIChlZGdlID4gMCkge1xyXG5cdFx0XHRcdC8vIEVkZ2UgKElFIDEyKykgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXHJcblx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KHVhLnN1YnN0cmluZyhlZGdlICsgNSwgdWEuaW5kZXhPZignLicsIGVkZ2UpKSwgMTApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBvdGhlciBicm93c2VyXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0aXNSVEw6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgaHRtbCA9IEtUVXRpbC5nZXRCeVRhZ05hbWUoJ2h0bWwnKVswXTtcclxuXHJcblx0XHRcdGlmIChodG1sKSB7XHJcblx0XHRcdFx0cmV0dXJuIChLVFV0aWwuYXR0cihodG1sLCAnZGlyZWN0aW9uJykgPT0gJ3J0bCcpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIFNjcm9sbGVyXHJcblx0XHRzY3JvbGxJbml0OiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XHJcblx0XHRcdGlmICghZWxlbWVudCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTGVhcm4gbW9yZTogaHR0cHM6Ly9naXRodWIuY29tL21kYm9vdHN0cmFwL3BlcmZlY3Qtc2Nyb2xsYmFyI29wdGlvbnNcclxuXHRcdFx0dmFyIHBsdWdpbkRlZk9wdGlvbnMgPSB7XHJcblx0XHRcdFx0d2hlZWxTcGVlZDogMC41LFxyXG5cdFx0XHRcdHN3aXBlRWFzaW5nOiB0cnVlLFxyXG5cdFx0XHRcdHdoZWVsUHJvcGFnYXRpb246IGZhbHNlLFxyXG5cdFx0XHRcdG1pblNjcm9sbGJhckxlbmd0aDogNDAsXHJcblx0XHRcdFx0bWF4U2Nyb2xsYmFyTGVuZ3RoOiAzMDAsXHJcblx0XHRcdFx0c3VwcHJlc3NTY3JvbGxYOiB0cnVlXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRvcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIHBsdWdpbkRlZk9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuXHRcdFx0Ly8gRGVmaW5lIGluaXQgZnVuY3Rpb25cclxuXHRcdFx0ZnVuY3Rpb24gaW5pdCgpIHtcclxuXHRcdFx0XHR2YXIgcHM7XHJcblx0XHRcdFx0dmFyIGhlaWdodDtcclxuXHJcblx0XHRcdFx0Ly8gR2V0IGV4dHJhIG9wdGlvbnMgdmlhIGRhdGEgYXR0cmlidXRlc1xyXG5cdFx0XHRcdHZhciBhdHRycyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlTmFtZXMoKTtcclxuXHRcdFx0XHRpZiAoYXR0cnMubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0YXR0cnMuZm9yRWFjaChmdW5jdGlvbihhdHRyTmFtZSkge1xyXG5cdFx0XHRcdFx0XHQvLyBtb3JlIG9wdGlvbnM7IGh0dHBzOi8vZ2l0aHViLmNvbS9nYW5sYW55dWFuL3Rpbnktc2xpZGVyI29wdGlvbnNcclxuXHRcdFx0XHRcdFx0aWYgKCgvXmRhdGEtLiovZykudGVzdChhdHRyTmFtZSkpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoWydzY3JvbGwnLCAnaGVpZ2h0JywgJ21vYmlsZS1oZWlnaHQnXS5pbmNsdWRlcyhvcHRpb25OYW1lKSA9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIG9wdGlvbk5hbWUgPSBhdHRyTmFtZS5yZXBsYWNlKCdkYXRhLScsICcnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyg/OltcXHMtXSlcXHcvZywgZnVuY3Rpb24obWF0Y2gpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG1hdGNoLnJlcGxhY2UoJy0nLCAnJykudG9VcHBlckNhc2UoKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnNbb3B0aW9uTmFtZV0gPSBLVFV0aWwuZmlsdGVyQm9vbGVhbihlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyTmFtZSkpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAob3B0aW9ucy5oZWlnaHQgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG5cdFx0XHRcdFx0aGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQuY2FsbCgpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZiAoS1RVdGlsLmlzTW9iaWxlRGV2aWNlKCkgPT09IHRydWUgJiYgb3B0aW9ucy5tb2JpbGVIZWlnaHQpIHtcclxuXHRcdFx0XHRcdFx0aGVpZ2h0ID0gcGFyc2VJbnQob3B0aW9ucy5tb2JpbGVIZWlnaHQpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChvcHRpb25zLmhlaWdodCkge1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBwYXJzZUludChvcHRpb25zLmhlaWdodCk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoaGVpZ2h0ID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0S1RVdGlsLnNjcm9sbERlc3Ryb3koZWxlbWVudCwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aGVpZ2h0ID0gcGFyc2VJbnQoaGVpZ2h0KTtcclxuXHJcblx0XHRcdFx0Ly8gRGVzdHJveSBzY3JvbGwgb24gdGFibGUgYW5kIG1vYmlsZSBtb2Rlc1xyXG5cdFx0XHRcdGlmICgob3B0aW9ucy5tb2JpbGVOYXRpdmVTY3JvbGwgfHwgb3B0aW9ucy5kaXNhYmxlRm9yTW9iaWxlKSAmJiBLVFV0aWwuaXNNb2JpbGVEZXZpY2UoKSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0cHMgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3BzJyk7XHJcblx0XHRcdFx0XHRpZiAocHMpIHtcclxuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMucmVzZXRIZWlnaHRPbkRlc3Ryb3kpIHtcclxuXHRcdFx0XHRcdFx0XHRLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnLCAnYXV0bycpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdEtUVXRpbC5jc3MoZWxlbWVudCwgJ292ZXJmbG93JywgJ2F1dG8nKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoaGVpZ2h0ID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0S1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JywgaGVpZ2h0ICsgJ3B4Jyk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRwcy5kZXN0cm95KCk7XHJcblx0XHRcdFx0XHRcdHBzID0gS1RVdGlsLmRhdGEoZWxlbWVudCkucmVtb3ZlKCdwcycpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChoZWlnaHQgPiAwKXtcclxuXHRcdFx0XHRcdFx0S1RVdGlsLmNzcyhlbGVtZW50LCAnb3ZlcmZsb3cnLCAnYXV0bycpO1xyXG5cdFx0XHRcdFx0XHRLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnLCBoZWlnaHQgKyAncHgnKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoaGVpZ2h0ID4gMCkge1xyXG5cdFx0XHRcdFx0S1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JywgaGVpZ2h0ICsgJ3B4Jyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAob3B0aW9ucy5kZXNrdG9wTmF0aXZlU2Nyb2xsKSB7XHJcblx0XHRcdFx0XHRLVFV0aWwuY3NzKGVsZW1lbnQsICdvdmVyZmxvdycsICdhdXRvJyk7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBQYXNzIG9wdGlvbnMgdmlhIEhUTUwgQXR0cmlidXRlc1xyXG5cdFx0XHRcdGlmIChLVFV0aWwuYXR0cihlbGVtZW50LCAnZGF0YS13aW5kb3ctc2Nyb2xsJykgPT0gJ3RydWUnKSB7XHJcblx0XHRcdFx0XHQgb3B0aW9ucy53aW5kb3dTY3JvbGwgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gSW5pdCBzY3JvbGxcclxuXHRcdFx0XHRwcyA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgncHMnKTtcclxuXHJcblx0XHRcdFx0aWYgKHBzKSB7XHJcblx0XHRcdFx0XHRwcy51cGRhdGUoKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0S1RVdGlsLmNzcyhlbGVtZW50LCAnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XHJcblx0XHRcdFx0XHRLVFV0aWwuYWRkQ2xhc3MoZWxlbWVudCwgJ3Njcm9sbCcpO1xyXG5cclxuXHRcdFx0XHRcdHBzID0gbmV3IFBlcmZlY3RTY3JvbGxiYXIoZWxlbWVudCwgb3B0aW9ucyk7XHJcblxyXG5cdFx0XHRcdFx0S1RVdGlsLmRhdGEoZWxlbWVudCkuc2V0KCdwcycsIHBzKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHNjcm9sbCBwb3NpdGlvbiBpbiBjb29raWVcclxuXHRcdFx0XHR2YXIgdWlkID0gS1RVdGlsLmF0dHIoZWxlbWVudCwgJ2lkJyk7XHJcblxyXG5cdFx0XHRcdC8vIFRvZG86Q29uc2lkZXIgdXNpbmcgTG9jYWxzdG9yYWdlXHJcblx0XHRcdFx0aWYgKG9wdGlvbnMucmVtZW1iZXJQb3NpdGlvbiA9PT0gdHJ1ZSAmJiBLVENvb2tpZSAmJiB1aWQpIHtcclxuXHRcdFx0XHRcdGlmIChLVENvb2tpZS5nZXRDb29raWUodWlkKSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgcG9zID0gcGFyc2VJbnQoS1RDb29raWUuZ2V0Q29va2llKHVpZCkpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHBvcyA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRlbGVtZW50LnNjcm9sbFRvcCA9IHBvcztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncHMtc2Nyb2xsLXknLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0S1RDb29raWUuc2V0Q29va2llKHVpZCwgZWxlbWVudC5zY3JvbGxUb3ApO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJbml0XHJcblx0XHRcdGluaXQoKTtcclxuXHJcblx0XHRcdC8vIEhhbmRsZSB3aW5kb3cgcmVzaXplXHJcblx0XHRcdGlmIChvcHRpb25zLmhhbmRsZVdpbmRvd1Jlc2l6ZSkge1xyXG5cdFx0XHRcdEtUVXRpbC5hZGRSZXNpemVIYW5kbGVyKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aW5pdCgpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHNjcm9sbFVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCkge1xyXG5cdFx0XHR2YXIgcHMgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3BzJyk7XHJcblx0XHRcdGlmIChwcykge1xyXG5cdFx0XHRcdHBzLnVwZGF0ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHNjcm9sbFVwZGF0ZUFsbDogZnVuY3Rpb24ocGFyZW50KSB7XHJcblx0XHRcdHZhciBzY3JvbGxlcnMgPSBLVFV0aWwuZmluZEFsbChwYXJlbnQsICcucHMnKTtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGxlbiA9IHNjcm9sbGVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG5cdFx0XHRcdEtUVXRpbC5zY3JvbGxVcGRhdGUoc2Nyb2xsZXJzW2ldKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzY3JvbGxEZXN0cm95OiBmdW5jdGlvbihlbGVtZW50LCByZXNldEFsbCkge1xyXG5cdFx0XHR2YXIgcHMgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3BzJyk7XHJcblxyXG5cdFx0XHRpZiAocHMpIHtcclxuXHRcdFx0XHRwcy5kZXN0cm95KCk7XHJcblx0XHRcdFx0cHMgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5yZW1vdmUoJ3BzJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChlbGVtZW50ICYmIHJlc2V0QWxsKSB7XHJcblx0XHRcdFx0ZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cnLCAnJyk7XHJcblx0XHRcdFx0ZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnaGVpZ2h0JywgJycpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdGZpbHRlckJvb2xlYW46IGZ1bmN0aW9uKHZhbCkge1xyXG5cdFx0XHQvLyBDb252ZXJ0IHN0cmluZyBib29sZWFuXHJcblx0XHRcdGlmICh2YWwgPT09IHRydWUgfHwgdmFsID09PSAndHJ1ZScpIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHZhbCA9PT0gZmFsc2UgfHwgdmFsID09PSAnZmFsc2UnKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0fSxcclxuXHJcblx0XHRzZXRIVE1MOiBmdW5jdGlvbihlbCwgaHRtbCkge1xyXG5cdFx0XHRlbC5pbm5lckhUTUwgPSBodG1sO1xyXG5cdFx0fSxcclxuXHJcblx0XHRnZXRIVE1MOiBmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRpZiAoZWwpIHtcclxuXHRcdFx0XHRyZXR1cm4gZWwuaW5uZXJIVE1MO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldERvY3VtZW50SGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5cdFx0XHR2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcblx0XHRcdHJldHVybiBNYXRoLm1heCggYm9keS5zY3JvbGxIZWlnaHQsIGJvZHkub2Zmc2V0SGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwub2Zmc2V0SGVpZ2h0ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldFNjcm9sbFRvcDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiAgKGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5zY3JvbGxUb3A7XHJcblx0XHR9LFxyXG5cclxuXHRcdGNoYW5nZUNvbG9yOiBmdW5jdGlvbihjb2wsIGFtdCkge1xyXG5cclxuXHRcdFx0dmFyIHVzZVBvdW5kID0gZmFsc2U7XHJcblxyXG5cdFx0XHRpZiAoY29sWzBdID09IFwiI1wiKSB7XHJcblx0XHRcdFx0Y29sID0gY29sLnNsaWNlKDEpO1xyXG5cdFx0XHRcdHVzZVBvdW5kID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIG51bSA9IHBhcnNlSW50KGNvbCwxNik7XHJcblxyXG5cdFx0XHR2YXIgciA9IChudW0gPj4gMTYpICsgYW10O1xyXG5cclxuXHRcdFx0aWYgKHIgPiAyNTUpIHIgPSAyNTU7XHJcblx0XHRcdGVsc2UgaWYgIChyIDwgMCkgciA9IDA7XHJcblxyXG5cdFx0XHR2YXIgYiA9ICgobnVtID4+IDgpICYgMHgwMEZGKSArIGFtdDtcclxuXHJcblx0XHRcdGlmIChiID4gMjU1KSBiID0gMjU1O1xyXG5cdFx0XHRlbHNlIGlmICAoYiA8IDApIGIgPSAwO1xyXG5cclxuXHRcdFx0dmFyIGcgPSAobnVtICYgMHgwMDAwRkYpICsgYW10O1xyXG5cclxuXHRcdFx0aWYgKGcgPiAyNTUpIGcgPSAyNTU7XHJcblx0XHRcdGVsc2UgaWYgKGcgPCAwKSBnID0gMDtcclxuXHJcblx0XHRcdHJldHVybiAodXNlUG91bmQ/XCIjXCI6XCJcIikgKyAoZyB8IChiIDw8IDgpIHwgKHIgPDwgMTYpKS50b1N0cmluZygxNik7XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBUaHJvdHRsZSBmdW5jdGlvbjogSW5wdXQgYXMgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gYmUgdGhyb3R0bGVkIGFuZCBkZWxheSBpcyB0aGUgdGltZSBpbnRlcnZhbCBpbiBtaWxsaXNlY29uZHNcclxuXHRcdHRocm90dGxlOiAgZnVuY3Rpb24gKHRpbWVyLCBmdW5jLCBkZWxheSkge1xyXG5cdFx0XHQvLyBJZiBzZXRUaW1lb3V0IGlzIGFscmVhZHkgc2NoZWR1bGVkLCBubyBuZWVkIHRvIGRvIGFueXRoaW5nXHJcblx0XHRcdGlmICh0aW1lcikge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2NoZWR1bGUgYSBzZXRUaW1lb3V0IGFmdGVyIGRlbGF5IHNlY29uZHNcclxuXHRcdFx0dGltZXIgID0gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGZ1bmMoKTtcclxuXHJcblx0XHRcdFx0Ly8gT25jZSBzZXRUaW1lb3V0IGZ1bmN0aW9uIGV4ZWN1dGlvbiBpcyBmaW5pc2hlZCwgdGltZXJJZCA9IHVuZGVmaW5lZCBzbyB0aGF0IGluIDxicj5cclxuXHRcdFx0XHQvLyB0aGUgbmV4dCBzY3JvbGwgZXZlbnQgZnVuY3Rpb24gZXhlY3V0aW9uIGNhbiBiZSBzY2hlZHVsZWQgYnkgdGhlIHNldFRpbWVvdXRcclxuXHRcdFx0XHR0aW1lciAgPSAgdW5kZWZpbmVkO1xyXG5cdFx0XHR9LCBkZWxheSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIERlYm91bmNlIGZ1bmN0aW9uOiBJbnB1dCBhcyBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBiZSBkZWJvdW5jZWQgYW5kIGRlbGF5IGlzIHRoZSBkZWJvdW5jZWQgdGltZSBpbiBtaWxsaXNlY29uZHNcclxuXHRcdGRlYm91bmNlOiBmdW5jdGlvbiAodGltZXIsIGZ1bmMsIGRlbGF5KSB7XHJcblx0XHRcdC8vIENhbmNlbHMgdGhlIHNldFRpbWVvdXQgbWV0aG9kIGV4ZWN1dGlvblxyXG5cdFx0XHRjbGVhclRpbWVvdXQodGltZXIpXHJcblxyXG5cdFx0XHQvLyBFeGVjdXRlcyB0aGUgZnVuYyBhZnRlciBkZWxheSB0aW1lLlxyXG5cdFx0XHR0aW1lciAgPSAgc2V0VGltZW91dChmdW5jLCBkZWxheSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGJ0bldhaXQ6IGZ1bmN0aW9uKGVsLCBjbHMsIG1lc3NhZ2UsIGRpc2FibGUpIHtcclxuXHRcdFx0aWYgKCFlbCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBkaXNhYmxlICE9PSAndW5kZWZpbmVkJyAmJiBkaXNhYmxlID09PSB0cnVlKSB7XHJcblx0XHRcdFx0S1RVdGlsLmF0dHIoZWwsIFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChjbHMpIHtcclxuXHRcdFx0XHRLVFV0aWwuYWRkQ2xhc3MoZWwsIGNscyk7XHJcblx0XHRcdFx0S1RVdGlsLmF0dHIoZWwsIFwid2FpdC1jbGFzc1wiLCBjbHMpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAobWVzc2FnZSkge1xyXG5cdFx0XHRcdHZhciBjYXB0aW9uID0gS1RVdGlsLmZpbmQoZWwsICcuYnRuLWNhcHRpb24nKTtcclxuXHJcblx0XHRcdFx0aWYgKGNhcHRpb24pIHtcclxuXHRcdFx0XHRcdEtUVXRpbC5kYXRhKGNhcHRpb24pLnNldCgnY2FwdGlvbicsIEtUVXRpbC5nZXRIVE1MKGNhcHRpb24pKTtcclxuXHRcdFx0XHRcdEtUVXRpbC5zZXRIVE1MKGNhcHRpb24sIG1lc3NhZ2UpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRLVFV0aWwuZGF0YShlbCkuc2V0KCdjYXB0aW9uJywgS1RVdGlsLmdldEhUTUwoZWwpKTtcclxuXHRcdFx0XHRcdEtUVXRpbC5zZXRIVE1MKGVsLCBtZXNzYWdlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0YnRuUmVsZWFzZTogZnVuY3Rpb24oZWwpIHtcclxuXHRcdFx0aWYgKCFlbCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8vIFNob3cgbG9hZGluZyBzdGF0ZSBvbiBidXR0b25cclxuXHRcdFx0S1RVdGlsLnJlbW92ZUF0dHIoZWwsIFwiZGlzYWJsZWRcIik7XHJcblxyXG5cdFx0XHRpZiAoS1RVdGlsLmhhc0F0dHIoZWwsIFwid2FpdC1jbGFzc1wiKSkge1xyXG5cdFx0XHRcdEtUVXRpbC5yZW1vdmVDbGFzcyhlbCwgS1RVdGlsLmF0dHIoZWwsIFwid2FpdC1jbGFzc1wiKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBjYXB0aW9uID0gS1RVdGlsLmZpbmQoZWwsICcuYnRuLWNhcHRpb24nKTtcclxuXHJcblx0XHRcdGlmIChjYXB0aW9uICYmIEtUVXRpbC5kYXRhKGNhcHRpb24pLmhhcygnY2FwdGlvbicpKSB7XHJcblx0XHRcdFx0S1RVdGlsLnNldEhUTUwoY2FwdGlvbiwgS1RVdGlsLmRhdGEoY2FwdGlvbikuZ2V0KCdjYXB0aW9uJykpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKEtUVXRpbC5kYXRhKGVsKS5oYXMoJ2NhcHRpb24nKSkge1xyXG5cdFx0XHRcdEtUVXRpbC5zZXRIVE1MKGVsLCBLVFV0aWwuZGF0YShlbCkuZ2V0KCdjYXB0aW9uJykpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdGlzT2Zmc2NyZWVuOiBmdW5jdGlvbihlbCwgZGlyZWN0aW9uLCBvZmZzZXQpIHtcclxuXHRcdFx0b2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XHJcblxyXG5cdFx0XHR2YXIgd2luZG93V2lkdGggPSBLVFV0aWwuZ2V0Vmlld1BvcnQoKS53aWR0aDtcclxuXHRcdFx0dmFyIHdpbmRvd0hlaWdodCA9IEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodDtcclxuXHJcblx0XHRcdHZhciB0b3AgPSBLVFV0aWwub2Zmc2V0KGVsKS50b3A7XHJcblx0XHRcdHZhciBoZWlnaHQgPSBLVFV0aWwub3V0ZXJIZWlnaHQoZWwpICsgb2Zmc2V0O1xyXG5cdFx0XHR2YXIgbGVmdCA9IEtUVXRpbC5vZmZzZXQoZWwpLmxlZnQ7XHJcblx0XHRcdHZhciB3aWR0aCA9IEtUVXRpbC5vdXRlcldpZHRoKGVsKSArIG9mZnNldDtcclxuXHJcblx0XHRcdGlmIChkaXJlY3Rpb24gPT0gJ2JvdHRvbScpIHtcclxuXHRcdFx0XHRpZiAod2luZG93SGVpZ2h0IDwgdG9wICsgaGVpZ2h0KSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHdpbmRvd0hlaWdodCA+IHRvcCArIGhlaWdodCAqIDEuNSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoZGlyZWN0aW9uID09ICd0b3AnKSB7XHJcblx0XHRcdFx0aWYgKHRvcCA8IDApIHtcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAodG9wID4gaGVpZ2h0KSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChkaXJlY3Rpb24gPT0gJ2xlZnQnKSB7XHJcblx0XHRcdFx0aWYgKGxlZnQgPCAwKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKGxlZnQgKiAyID4gd2lkdGgpIHtcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ2xlZnQgMicpO1xyXG5cdFx0XHRcdFx0Ly9yZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChkaXJlY3Rpb24gPT0gJ3JpZ2h0Jykge1xyXG5cdFx0XHRcdGlmICh3aW5kb3dXaWR0aCA8IGxlZnQgKyB3aWR0aCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ3JpZ2h0IDInKTtcclxuXHRcdFx0XHRcdC8vcmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0fVxyXG59KCk7XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUVXRpbDtcclxufVxyXG5cclxuLy8gSW5pdGlhbGl6ZSBLVFV0aWwgY2xhc3Mgb24gZG9jdW1lbnQgcmVhZHlcclxuS1RVdGlsLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdGlmICh0eXBlb2YgS1RBcHBTZXR0aW5ncyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdEtUVXRpbC5pbml0KEtUQXBwU2V0dGluZ3MpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRLVFV0aWwuaW5pdCgpO1xyXG5cdH1cclxufSk7XHJcbiJdLCJuYW1lcyI6WyJFbGVtZW50IiwicHJvdG90eXBlIiwibWF0Y2hlcyIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwiY2xvc2VzdCIsInMiLCJlbCIsImFuY2VzdG9yIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjb250YWlucyIsInBhcmVudEVsZW1lbnQiLCJlbGVtIiwiaSIsImxlbmd0aCIsIndpbmRvdyIsInJlbW92ZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImxhc3RUaW1lIiwidmVuZG9ycyIsIngiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY3VyclRpbWUiLCJEYXRlIiwiZ2V0VGltZSIsInRpbWVUb0NhbGwiLCJNYXRoIiwibWF4IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiYXJyIiwiZm9yRWFjaCIsIml0ZW0iLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJwcmVwZW5kIiwiYXJnQXJyIiwiQXJyYXkiLCJzbGljZSIsImNhbGwiLCJhcmd1bWVudHMiLCJkb2NGcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImFyZ0l0ZW0iLCJpc05vZGUiLCJOb2RlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIlN0cmluZyIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJEb2N1bWVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsInVuZGVmaW5lZCIsImF0dHJpYnV0ZXMiLCJyZXN1bHQiLCJuYW1lIiwiS1RVdGlsRWxlbWVudERhdGFTdG9yZSIsIktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRCIsIktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnMiLCJNZW1vcnlDYWNoZWQiLCJLVFV0aWwiLCJyZXNpemVIYW5kbGVycyIsImJyZWFrcG9pbnRzIiwic20iLCJtZCIsImxnIiwieGwiLCJfd2luZG93UmVzaXplSGFuZGxlciIsIl9ydW5SZXNpemVIYW5kbGVycyIsImVhY2giLCJ0aW1lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aHJvdHRsZSIsImluaXQiLCJzZXR0aW5ncyIsImFkZFJlc2l6ZUhhbmRsZXIiLCJwdXNoIiwicmVtb3ZlUmVzaXplSGFuZGxlciIsInJ1blJlc2l6ZUhhbmRsZXJzIiwicmVzaXplIiwiRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZXZ0IiwiY3JlYXRlRXZlbnQiLCJpbml0VUlFdmVudCIsImdldFVSTFBhcmFtIiwicGFyYW1OYW1lIiwic2VhcmNoU3RyaW5nIiwibG9jYXRpb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJ2YWwiLCJwYXJhbXMiLCJzcGxpdCIsInVuZXNjYXBlIiwiaXNNb2JpbGVEZXZpY2UiLCJ0ZXN0IiwiZ2V0Vmlld1BvcnQiLCJ3aWR0aCIsImdldEJyZWFrcG9pbnQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsImlzRGVza3RvcERldmljZSIsImUiLCJhIiwiYm9keSIsImhlaWdodCIsImlzSW5SZXNwb25zaXZlUmFuZ2UiLCJtb2RlIiwiYnJlYWtwb2ludCIsImlzQnJlYWtwb2ludFVwIiwiaXNCcmVha3BvaW50RG93biIsImdldFVuaXF1ZUlEIiwicHJlZml4IiwiZmxvb3IiLCJyYW5kb20iLCJpc3NldCIsIm9iaiIsImtleXMiLCJzdG9uZSIsImluZGV4T2YiLCJFcnJvciIsInNoaWZ0IiwiZ2V0SGlnaGVzdFppbmRleCIsInBvc2l0aW9uIiwiY3NzIiwicGFyc2VJbnQiLCJpc05hTiIsImhhc0ZpeGVkUG9zaXRpb25lZFBhcmVudCIsInNsZWVwIiwibWlsbGlzZWNvbmRzIiwic3RhcnQiLCJnZXRSYW5kb21JbnQiLCJtaW4iLCJpc0FuZ3VsYXJWZXJzaW9uIiwiWm9uZSIsImRlZXBFeHRlbmQiLCJvdXQiLCJrZXkiLCJ0b1N0cmluZyIsImV4dGVuZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50QnlJZCIsImdldEJ5VGFnIiwicXVlcnkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEJ5VGFnTmFtZSIsImdldEJ5Q2xhc3MiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZ2V0Qm9keSIsImhhc0NsYXNzZXMiLCJjbGFzc2VzIiwiY2xhc3Nlc0FyciIsImhhc0NsYXNzIiwidHJpbSIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsIlJlZ0V4cCIsImFkZENsYXNzIiwiY2xhc3NOYW1lcyIsImFkZCIsInJlbW92ZUNsYXNzIiwicmVwbGFjZSIsInRyaWdnZXJDdXN0b21FdmVudCIsImV2ZW50TmFtZSIsImRhdGEiLCJldmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiaW5pdEN1c3RvbUV2ZW50IiwidHJpZ2dlckV2ZW50Iiwibm9kZSIsImRvYyIsIm93bmVyRG9jdW1lbnQiLCJub2RlVHlwZSIsImV2ZW50Q2xhc3MiLCJidWJibGVzIiwiaW5pdEV2ZW50Iiwic3ludGhldGljIiwiZmlyZUV2ZW50IiwiY3JlYXRlRXZlbnRPYmplY3QiLCJpbmRleCIsImMiLCJjaGlsZHJlbiIsInN0cmluZyIsImV2ZW50VHJpZ2dlcmVkIiwiY3VycmVudFRhcmdldCIsImRhdGFzZXQiLCJ0cmlnZ2VyZWQiLCJmaW5kIiwicGFyZW50IiwicXVlcnlTZWxlY3RvciIsImZpbmRBbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5zZXJ0QWZ0ZXIiLCJyZWZlcmVuY2VOb2RlIiwibmV4dFNpYmxpbmciLCJwYXJlbnRzIiwic2VsZWN0b3IiLCJtYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibG9nIiwiY2hpbGROb2RlcyIsImwiLCJjaGlsZCIsInAiLCJmIiwidGFnTmFtZSIsInNldCIsImN1c3RvbURhdGFUYWciLCJnZXQiLCJoYXMiLCJvdXRlcldpZHRoIiwibWFyZ2luIiwicGFyc2VGbG9hdCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0IiwicmVjdCIsIndpbiIsImdldENsaWVudFJlY3RzIiwidG9wIiwibGVmdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRlZmF1bHRWaWV3IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm91dGVySGVpZ2h0Iiwid2l0aE1hcmdpbiIsIm9mZnNldEhlaWdodCIsInN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsInZpc2libGUiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwiaGFzQXR0ciIsInJlbW92ZUF0dHIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhbmltYXRlIiwiZnJvbSIsInRvIiwiZHVyYXRpb24iLCJ1cGRhdGUiLCJlYXNpbmciLCJkb25lIiwiZWFzaW5ncyIsImxpbmVhciIsInQiLCJiIiwiZCIsInJBRiIsImNhbmNlbGVkIiwiY2hhbmdlIiwibG9vcCIsInRpbWVzdGFtcCIsInRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImFjdHVhbENzcyIsInByb3AiLCJjYWNoZSIsIkhUTUxFbGVtZW50IiwiY3NzVGV4dCIsImFjdHVhbEhlaWdodCIsImFjdHVhbFdpZHRoIiwiZ2V0U2Nyb2xsIiwiZWxlbWVudCIsIm1ldGhvZCIsInNlbGYiLCJicm93c2VyU3VwcG9ydHNCb3hNb2RlbCIsInN0eWxlUHJvcCIsInRvTG93ZXJDYXNlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImN1cnJlbnRTdHlsZSIsInN0ciIsImxldHRlciIsInRvVXBwZXJDYXNlIiwib2xkTGVmdCIsIm9sZFJzTGVmdCIsInJ1bnRpbWVTdHlsZSIsInBpeGVsTGVmdCIsInNsaWRlIiwiZGlyIiwic3BlZWQiLCJyZWNhbGNNYXhIZWlnaHQiLCJjYWxjSGVpZ2h0IiwiY2FsY1BhZGRpbmdUb3AiLCJjYWxjUGFkZGluZ0JvdHRvbSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiZGlzcGxheSIsIm92ZXJmbG93Iiwic2xpZGVVcCIsInNsaWRlRG93biIsInNob3ciLCJoaWRlIiwiYWRkRXZlbnQiLCJ0eXBlIiwiaGFuZGxlciIsIm9uZSIsInJlbW92ZUV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uIiwiZXZlbnRJZCIsInRhcmdldHMiLCJ0YXJnZXQiLCJqIiwib2ZmIiwib25ldGltZSIsImNhbGxlZSIsImhhc2giLCJjaHIiLCJjaGFyQ29kZUF0IiwiYW5pbWF0ZUNsYXNzIiwiYW5pbWF0aW9uTmFtZSIsImFuaW1hdGlvbiIsImFuaW1hdGlvbnMiLCJPQW5pbWF0aW9uIiwiTW96QW5pbWF0aW9uIiwiV2Via2l0QW5pbWF0aW9uIiwibXNBbmltYXRpb24iLCJ0cmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiT1RyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsImFuaW1hdGlvbkVuZCIsImFuaW1hdGVEZWxheSIsImFuaW1hdGVEdXJhdGlvbiIsInNjcm9sbFRvIiwidGFyZ2V0UG9zIiwic2Nyb2xsUG9zIiwic2Nyb2xsVG9wIiwiaXNBcnJheSIsInJlYWR5IiwiYXR0YWNoRXZlbnQiLCJyZWFkeVN0YXRlIiwiaXNFbXB0eSIsIm51bWJlclN0cmluZyIsIm5TdHIiLCJ4MSIsIngyIiwicmd4IiwiZGV0ZWN0SUUiLCJ1YSIsIm1zaWUiLCJ0cmlkZW50IiwicnYiLCJlZGdlIiwiaXNSVEwiLCJodG1sIiwic2Nyb2xsSW5pdCIsIm9wdGlvbnMiLCJwbHVnaW5EZWZPcHRpb25zIiwid2hlZWxTcGVlZCIsInN3aXBlRWFzaW5nIiwid2hlZWxQcm9wYWdhdGlvbiIsIm1pblNjcm9sbGJhckxlbmd0aCIsIm1heFNjcm9sbGJhckxlbmd0aCIsInN1cHByZXNzU2Nyb2xsWCIsInBzIiwiYXR0cnMiLCJhdHRyTmFtZSIsImluY2x1ZGVzIiwib3B0aW9uTmFtZSIsImZpbHRlckJvb2xlYW4iLCJGdW5jdGlvbiIsIm1vYmlsZUhlaWdodCIsInNjcm9sbERlc3Ryb3kiLCJtb2JpbGVOYXRpdmVTY3JvbGwiLCJkaXNhYmxlRm9yTW9iaWxlIiwicmVzZXRIZWlnaHRPbkRlc3Ryb3kiLCJkZXN0cm95IiwiZGVza3RvcE5hdGl2ZVNjcm9sbCIsIndpbmRvd1Njcm9sbCIsIlBlcmZlY3RTY3JvbGxiYXIiLCJ1aWQiLCJyZW1lbWJlclBvc2l0aW9uIiwiS1RDb29raWUiLCJnZXRDb29raWUiLCJwb3MiLCJzZXRDb29raWUiLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJzY3JvbGxVcGRhdGUiLCJzY3JvbGxVcGRhdGVBbGwiLCJzY3JvbGxlcnMiLCJsZW4iLCJyZXNldEFsbCIsInNldFByb3BlcnR5Iiwic2V0SFRNTCIsImlubmVySFRNTCIsImdldEhUTUwiLCJnZXREb2N1bWVudEhlaWdodCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsImdldFNjcm9sbFRvcCIsInNjcm9sbGluZ0VsZW1lbnQiLCJjaGFuZ2VDb2xvciIsImNvbCIsImFtdCIsInVzZVBvdW5kIiwibnVtIiwiciIsImciLCJmdW5jIiwiZGVsYXkiLCJkZWJvdW5jZSIsImJ0bldhaXQiLCJjbHMiLCJtZXNzYWdlIiwiZGlzYWJsZSIsImNhcHRpb24iLCJidG5SZWxlYXNlIiwiaXNPZmZzY3JlZW4iLCJkaXJlY3Rpb24iLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsIm1vZHVsZSIsImV4cG9ydHMiLCJLVEFwcFNldHRpbmdzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/components/util.js\n");

  /***/ }),

  /***/ "./resources/assets/theme/js/config.js":
  /*!*********************************************!*\
    !*** ./resources/assets/theme/js/config.js ***!
    \*********************************************/
  /***/ ((module) => {

  "use strict";
  eval("\n\nvar KTAppSettings = {\n  \"breakpoints\": {\n    \"sm\": 576,\n    \"md\": 768,\n    \"lg\": 992,\n    \"xl\": 1200,\n    \"xxl\": 1200\n  },\n  \"colors\": {\n    \"theme\": {\n      \"base\": {\n        \"white\": \"#ffffff\",\n        \"primary\": \"#3699FF\",\n        \"secondary\": \"#E5EAEE\",\n        \"success\": \"#28C76F\",\n        \"info\": \"#8950FC\",\n        \"warning\": \"#FFA800\",\n        \"danger\": \"#F64E60\",\n        \"light\": \"#F3F6F9\",\n        \"dark\": \"#212121\"\n      },\n      \"light\": {\n        \"white\": \"#ffffff\",\n        \"primary\": \"#E1F0FF\",\n        \"secondary\": \"#ECF0F3\",\n        \"success\": \"#D4FDE6\",\n        \"info\": \"#EEE5FF\",\n        \"warning\": \"#FFF4DE\",\n        \"danger\": \"#FFE2E5\",\n        \"light\": \"#F3F6F9\",\n        \"dark\": \"#D6D6E0\"\n      },\n      \"inverse\": {\n        \"white\": \"#ffffff\",\n        \"primary\": \"#ffffff\",\n        \"secondary\": \"#212121\",\n        \"success\": \"#ffffff\",\n        \"info\": \"#ffffff\",\n        \"warning\": \"#ffffff\",\n        \"danger\": \"#ffffff\",\n        \"light\": \"#464E5F\",\n        \"dark\": \"#ffffff\"\n      }\n    },\n    \"gray\": {\n      \"gray-100\": \"#F3F6F9\",\n      \"gray-200\": \"#ECF0F3\",\n      \"gray-300\": \"#E5EAEE\",\n      \"gray-400\": \"#D6D6E0\",\n      \"gray-500\": \"#B5B5C3\",\n      \"gray-600\": \"#80808F\",\n      \"gray-700\": \"#464E5F\",\n      \"gray-800\": \"#1B283F\",\n      \"gray-900\": \"#212121\"\n    }\n  },\n  \"font-family\": \"Poppins\"\n}; // webpack support\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTAppSettings;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lL2pzL2NvbmZpZy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxhQUFhLEdBQUc7RUFDaEIsZUFBZTtJQUNYLE1BQU0sR0FESztJQUVYLE1BQU0sR0FGSztJQUdYLE1BQU0sR0FISztJQUlYLE1BQU0sSUFKSztJQUtYLE9BQU87RUFMSSxDQURDO0VBUWhCLFVBQVU7SUFDTixTQUFTO01BQ0wsUUFBUTtRQUNKLFNBQVMsU0FETDtRQUVKLFdBQVcsU0FGUDtRQUdKLGFBQWEsU0FIVDtRQUlKLFdBQVcsU0FKUDtRQUtKLFFBQVEsU0FMSjtRQU1KLFdBQVcsU0FOUDtRQU9KLFVBQVUsU0FQTjtRQVFKLFNBQVMsU0FSTDtRQVNKLFFBQVE7TUFUSixDQURIO01BWUwsU0FBUztRQUNMLFNBQVMsU0FESjtRQUVMLFdBQVcsU0FGTjtRQUdMLGFBQWEsU0FIUjtRQUlMLFdBQVcsU0FKTjtRQUtMLFFBQVEsU0FMSDtRQU1MLFdBQVcsU0FOTjtRQU9MLFVBQVUsU0FQTDtRQVFMLFNBQVMsU0FSSjtRQVNMLFFBQVE7TUFUSCxDQVpKO01BdUJMLFdBQVc7UUFDUCxTQUFTLFNBREY7UUFFUCxXQUFXLFNBRko7UUFHUCxhQUFhLFNBSE47UUFJUCxXQUFXLFNBSko7UUFLUCxRQUFRLFNBTEQ7UUFNUCxXQUFXLFNBTko7UUFPUCxVQUFVLFNBUEg7UUFRUCxTQUFTLFNBUkY7UUFTUCxRQUFRO01BVEQ7SUF2Qk4sQ0FESDtJQW9DTixRQUFRO01BQ0osWUFBWSxTQURSO01BRUosWUFBWSxTQUZSO01BR0osWUFBWSxTQUhSO01BSUosWUFBWSxTQUpSO01BS0osWUFBWSxTQUxSO01BTUosWUFBWSxTQU5SO01BT0osWUFBWSxTQVBSO01BUUosWUFBWSxTQVJSO01BU0osWUFBWTtJQVRSO0VBcENGLENBUk07RUF3RGhCLGVBQWU7QUF4REMsQ0FBcEIsQyxDQTJEQTs7QUFDQSxJQUFJLFNBQWlDLE9BQU9DLE1BQU0sQ0FBQ0MsT0FBZCxLQUEwQixXQUEvRCxFQUE0RTtFQUN4RUQsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixhQUFqQjtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy90aGVtZS9qcy9jb25maWcuanM/ZDdlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVEFwcFNldHRpbmdzID0ge1xyXG4gICAgXCJicmVha3BvaW50c1wiOiB7XHJcbiAgICAgICAgXCJzbVwiOiA1NzYsXHJcbiAgICAgICAgXCJtZFwiOiA3NjgsXHJcbiAgICAgICAgXCJsZ1wiOiA5OTIsXHJcbiAgICAgICAgXCJ4bFwiOiAxMjAwLFxyXG4gICAgICAgIFwieHhsXCI6IDEyMDBcclxuICAgIH0sXHJcbiAgICBcImNvbG9yc1wiOiB7XHJcbiAgICAgICAgXCJ0aGVtZVwiOiB7XHJcbiAgICAgICAgICAgIFwiYmFzZVwiOiB7XHJcbiAgICAgICAgICAgICAgICBcIndoaXRlXCI6IFwiI2ZmZmZmZlwiLFxyXG4gICAgICAgICAgICAgICAgXCJwcmltYXJ5XCI6IFwiIzM2OTlGRlwiLFxyXG4gICAgICAgICAgICAgICAgXCJzZWNvbmRhcnlcIjogXCIjRTVFQUVFXCIsXHJcbiAgICAgICAgICAgICAgICBcInN1Y2Nlc3NcIjogXCIjMjhDNzZGXCIsXHJcbiAgICAgICAgICAgICAgICBcImluZm9cIjogXCIjODk1MEZDXCIsXHJcbiAgICAgICAgICAgICAgICBcIndhcm5pbmdcIjogXCIjRkZBODAwXCIsXHJcbiAgICAgICAgICAgICAgICBcImRhbmdlclwiOiBcIiNGNjRFNjBcIixcclxuICAgICAgICAgICAgICAgIFwibGlnaHRcIjogXCIjRjNGNkY5XCIsXHJcbiAgICAgICAgICAgICAgICBcImRhcmtcIjogXCIjMjEyMTIxXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJsaWdodFwiOiB7XHJcbiAgICAgICAgICAgICAgICBcIndoaXRlXCI6IFwiI2ZmZmZmZlwiLFxyXG4gICAgICAgICAgICAgICAgXCJwcmltYXJ5XCI6IFwiI0UxRjBGRlwiLFxyXG4gICAgICAgICAgICAgICAgXCJzZWNvbmRhcnlcIjogXCIjRUNGMEYzXCIsXHJcbiAgICAgICAgICAgICAgICBcInN1Y2Nlc3NcIjogXCIjRDRGREU2XCIsXHJcbiAgICAgICAgICAgICAgICBcImluZm9cIjogXCIjRUVFNUZGXCIsXHJcbiAgICAgICAgICAgICAgICBcIndhcm5pbmdcIjogXCIjRkZGNERFXCIsXHJcbiAgICAgICAgICAgICAgICBcImRhbmdlclwiOiBcIiNGRkUyRTVcIixcclxuICAgICAgICAgICAgICAgIFwibGlnaHRcIjogXCIjRjNGNkY5XCIsXHJcbiAgICAgICAgICAgICAgICBcImRhcmtcIjogXCIjRDZENkUwXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJpbnZlcnNlXCI6IHtcclxuICAgICAgICAgICAgICAgIFwid2hpdGVcIjogXCIjZmZmZmZmXCIsXHJcbiAgICAgICAgICAgICAgICBcInByaW1hcnlcIjogXCIjZmZmZmZmXCIsXHJcbiAgICAgICAgICAgICAgICBcInNlY29uZGFyeVwiOiBcIiMyMTIxMjFcIixcclxuICAgICAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBcIiNmZmZmZmZcIixcclxuICAgICAgICAgICAgICAgIFwiaW5mb1wiOiBcIiNmZmZmZmZcIixcclxuICAgICAgICAgICAgICAgIFwid2FybmluZ1wiOiBcIiNmZmZmZmZcIixcclxuICAgICAgICAgICAgICAgIFwiZGFuZ2VyXCI6IFwiI2ZmZmZmZlwiLFxyXG4gICAgICAgICAgICAgICAgXCJsaWdodFwiOiBcIiM0NjRFNUZcIixcclxuICAgICAgICAgICAgICAgIFwiZGFya1wiOiBcIiNmZmZmZmZcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImdyYXlcIjoge1xyXG4gICAgICAgICAgICBcImdyYXktMTAwXCI6IFwiI0YzRjZGOVwiLFxyXG4gICAgICAgICAgICBcImdyYXktMjAwXCI6IFwiI0VDRjBGM1wiLFxyXG4gICAgICAgICAgICBcImdyYXktMzAwXCI6IFwiI0U1RUFFRVwiLFxyXG4gICAgICAgICAgICBcImdyYXktNDAwXCI6IFwiI0Q2RDZFMFwiLFxyXG4gICAgICAgICAgICBcImdyYXktNTAwXCI6IFwiI0I1QjVDM1wiLFxyXG4gICAgICAgICAgICBcImdyYXktNjAwXCI6IFwiIzgwODA4RlwiLFxyXG4gICAgICAgICAgICBcImdyYXktNzAwXCI6IFwiIzQ2NEU1RlwiLFxyXG4gICAgICAgICAgICBcImdyYXktODAwXCI6IFwiIzFCMjgzRlwiLFxyXG4gICAgICAgICAgICBcImdyYXktOTAwXCI6IFwiIzIxMjEyMVwiXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFwiZm9udC1mYW1pbHlcIjogXCJQb3BwaW5zXCJcclxufTtcclxuXHJcbi8vIHdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBLVEFwcFNldHRpbmdzO1xyXG59Il0sIm5hbWVzIjpbIktUQXBwU2V0dGluZ3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/config.js\n");

  /***/ }),

  /***/ "./resources/assets/theme/js/layout/base/content.js":
  /*!**********************************************************!*\
    !*** ./resources/assets/theme/js/layout/base/content.js ***!
    \**********************************************************/
  /***/ ((module) => {

  "use strict";
  eval("\n\nvar KTLayoutContent = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _getHeight = function _getHeight() {\n    var height;\n    height = KTUtil.getViewPort().height;\n\n    if (_element) {\n      height = height - parseInt(KTUtil.css(_element, 'paddingTop')) - parseInt(KTUtil.css(_element, 'paddingBottom'));\n    }\n\n    height = height - KTLayoutHeader.getHeight();\n    height = height - KTLayoutSubheader.getHeight();\n    height = height - KTLayoutFooter.getHeight();\n    return height;\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutContent;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lL2pzL2xheW91dC9iYXNlL2NvbnRlbnQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsZUFBZSxHQUFHLFlBQVc7RUFDN0I7RUFDQSxJQUFJQyxRQUFKLENBRjZCLENBSWhDOzs7RUFDQSxJQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQUFXO0lBQzNCLElBQUlDLE1BQUo7SUFFQUEsTUFBTSxHQUFHQyxNQUFNLENBQUNDLFdBQVAsR0FBcUJGLE1BQTlCOztJQUVNLElBQUlGLFFBQUosRUFBYztNQUNWRSxNQUFNLEdBQUdBLE1BQU0sR0FBR0csUUFBUSxDQUFDRixNQUFNLENBQUNHLEdBQVAsQ0FBV04sUUFBWCxFQUFxQixZQUFyQixDQUFELENBQWpCLEdBQXdESyxRQUFRLENBQUNGLE1BQU0sQ0FBQ0csR0FBUCxDQUFXTixRQUFYLEVBQXFCLGVBQXJCLENBQUQsQ0FBekU7SUFDSDs7SUFFREUsTUFBTSxHQUFHQSxNQUFNLEdBQUdLLGNBQWMsQ0FBQ0MsU0FBZixFQUFsQjtJQUNBTixNQUFNLEdBQUdBLE1BQU0sR0FBR08saUJBQWlCLENBQUNELFNBQWxCLEVBQWxCO0lBQ0FOLE1BQU0sR0FBR0EsTUFBTSxHQUFHUSxjQUFjLENBQUNGLFNBQWYsRUFBbEI7SUFFTixPQUFPTixNQUFQO0VBQ0EsQ0FkRCxDQUxnQyxDQXFCN0I7OztFQUNILE9BQU87SUFDTlMsSUFBSSxFQUFFLGNBQVNDLEVBQVQsRUFBYTtNQUNUWixRQUFRLEdBQUdHLE1BQU0sQ0FBQ1UsT0FBUCxDQUFlRCxFQUFmLENBQVg7SUFDVCxDQUhLO0lBS05KLFNBQVMsRUFBRSxxQkFBVztNQUNyQixPQUFPUCxVQUFVLEVBQWpCO0lBQ0EsQ0FQSztJQVNBYSxVQUFVLEVBQUUsc0JBQVc7TUFDbkIsT0FBT2QsUUFBUDtJQUNIO0VBWEQsQ0FBUDtBQWFBLENBbkNxQixFQUF0QixDLENBcUNBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7RUFDbENlLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLGVBQWpCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lL2pzL2xheW91dC9iYXNlL2NvbnRlbnQuanM/ZjcyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dENvbnRlbnQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG5cclxuXHQvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGVpZ2h0O1xyXG5cclxuXHRcdGhlaWdodCA9IEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKF9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBLVExheW91dEhlYWRlci5nZXRIZWlnaHQoKTtcclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBLVExheW91dFN1YmhlYWRlci5nZXRIZWlnaHQoKTtcclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBLVExheW91dEZvb3Rlci5nZXRIZWlnaHQoKTtcclxuXHJcblx0XHRyZXR1cm4gaGVpZ2h0O1xyXG5cdH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0SGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF9nZXRIZWlnaHQoKTtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0Q29udGVudDtcclxufVxyXG4iXSwibmFtZXMiOlsiS1RMYXlvdXRDb250ZW50IiwiX2VsZW1lbnQiLCJfZ2V0SGVpZ2h0IiwiaGVpZ2h0IiwiS1RVdGlsIiwiZ2V0Vmlld1BvcnQiLCJwYXJzZUludCIsImNzcyIsIktUTGF5b3V0SGVhZGVyIiwiZ2V0SGVpZ2h0IiwiS1RMYXlvdXRTdWJoZWFkZXIiLCJLVExheW91dEZvb3RlciIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/layout/base/content.js\n");

  /***/ }),

  /***/ "./resources/assets/theme/js/layout/initialize.js":
  /*!********************************************************!*\
    !*** ./resources/assets/theme/js/layout/initialize.js ***!
    \********************************************************/
  /***/ (() => {

  "use strict";
  eval(" // Initialization\n\nKTUtil.ready(function () {\n  ////////////////////////////////////////////////////\n  // Layout Base Partials(mandatory for core layout)//\n  ////////////////////////////////////////////////////\n  // Init Desktop & Mobile Headers\n  if (typeof KTLayoutHeader !== 'undefined') {\n    KTLayoutHeader.init('kt_header', 'kt_header_mobile');\n  } // Init Header Menu\n\n\n  if (typeof KTLayoutHeaderMenu !== 'undefined') {\n    KTLayoutHeaderMenu.init('kt_header_menu', 'kt_header_menu_wrapper');\n  } // Init Header Topbar For Mobile Mode\n\n\n  if (typeof KTLayoutHeaderTopbar !== 'undefined') {\n    KTLayoutHeaderTopbar.init('kt_header_mobile_topbar_toggle');\n  } // Init Brand Panel For Logo\n\n\n  if (typeof KTLayoutBrand !== 'undefined') {\n    KTLayoutBrand.init('kt_brand');\n  } // Init Aside\n\n\n  if (typeof KTLayoutAside !== 'undefined') {\n    KTLayoutAside.init('kt_aside');\n  } // Init Aside Menu Toggle\n\n\n  if (typeof KTLayoutAsideToggle !== 'undefined') {\n    KTLayoutAsideToggle.init('kt_aside_toggle');\n  } // Init Aside Menu\n\n\n  if (typeof KTLayoutAsideMenu !== 'undefined') {\n    KTLayoutAsideMenu.init('kt_aside_menu');\n  } // Init Subheader\n\n\n  if (typeof KTLayoutSubheader !== 'undefined') {\n    KTLayoutSubheader.init('kt_subheader');\n  } // Init Content\n\n\n  if (typeof KTLayoutContent !== 'undefined') {\n    KTLayoutContent.init('kt_content');\n  } // Init Footer\n\n\n  if (typeof KTLayoutFooter !== 'undefined') {\n    KTLayoutFooter.init('kt_footer');\n  } //////////////////////////////////////////////\n  // Layout Extended Partials(optional to use)//\n  //////////////////////////////////////////////\n  // Init Scrolltop\n\n\n  if (typeof KTLayoutScrolltop !== 'undefined') {\n    KTLayoutScrolltop.init('kt_scrolltop');\n  } // Init Sticky Card\n\n\n  if (typeof KTLayoutStickyCard !== 'undefined') {\n    KTLayoutStickyCard.init('kt_page_sticky_card');\n  } // Init Stretched Card\n\n\n  if (typeof KTLayoutStretchedCard !== 'undefined') {\n    KTLayoutStretchedCard.init('kt_page_stretched_card');\n  } // Init Code Highlighter & Preview Blocks(used to demonstrate the theme features)\n\n\n  if (typeof KTLayoutExamples !== 'undefined') {\n    KTLayoutExamples.init();\n  } // Init Demo Selection Panel\n\n\n  if (typeof KTLayoutDemoPanel !== 'undefined') {\n    KTLayoutDemoPanel.init('kt_demo_panel');\n  } // Init Chat App(quick modal chat)\n\n\n  if (typeof KTLayoutChat !== 'undefined') {\n    KTLayoutChat.init('kt_chat_modal');\n  } // Init Quick Actions Offcanvas Panel\n\n\n  if (typeof KTLayoutQuickActions !== 'undefined') {\n    KTLayoutQuickActions.init('kt_quick_actions');\n  } // Init Quick Notifications Offcanvas Panel\n\n\n  if (typeof KTLayoutQuickNotifications !== 'undefined') {\n    KTLayoutQuickNotifications.init('kt_quick_notifications');\n  } // Init Quick Offcanvas Panel\n\n\n  if (typeof KTLayoutQuickPanel !== 'undefined') {\n    KTLayoutQuickPanel.init('kt_quick_panel');\n  } // Init Quick User Panel\n\n\n  if (typeof KTLayoutQuickUser !== 'undefined') {\n    KTLayoutQuickUser.init('kt_quick_user');\n  } // Init Quick Search Panel\n\n\n  if (typeof KTLayoutQuickSearch !== 'undefined') {\n    KTLayoutQuickSearch.init('kt_quick_search');\n  } // Init Quick Cart Panel\n\n\n  if (typeof KTLayoutQuickCartPanel !== 'undefined') {\n    KTLayoutQuickCartPanel.init('kt_quick_cart');\n  } // Init Search For Quick Search Dropdown\n\n\n  if (typeof KTLayoutSearch !== 'undefined') {\n    KTLayoutSearch().init('kt_quick_search_dropdown');\n  } // Init Search For Quick Search Offcanvas Panel\n\n\n  if (typeof KTLayoutSearchOffcanvas !== 'undefined') {\n    KTLayoutSearchOffcanvas().init('kt_quick_search_offcanvas');\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/layout/initialize.js\n");

  /***/ }),

  /***/ "./resources/assets/theme/js/theme.js":
  /*!********************************************!*\
    !*** ./resources/assets/theme/js/theme.js ***!
    \********************************************/
  /***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

  eval("// Keenthemes' KTAppSettings\nwindow.KTAppSettings = __webpack_require__(/*! ./config.js */ \"./resources/assets/theme/js/config.js\"); // Keenthemes' plugins\n\nwindow.KTUtil = __webpack_require__(/*! ./components/util.js */ \"./resources/assets/theme/js/components/util.js\");\nwindow.KTApp = __webpack_require__(/*! ./components/app.js */ \"./resources/assets/theme/js/components/app.js\");\nwindow.KTCard = __webpack_require__(/*! ./components/card.js */ \"./resources/assets/theme/js/components/card.js\");\nwindow.KTCookie = __webpack_require__(/*! ./components/cookie.js */ \"./resources/assets/theme/js/components/cookie.js\");\nwindow.KTDialog = __webpack_require__(/*! ./components/dialog.js */ \"./resources/assets/theme/js/components/dialog.js\");\nwindow.KTHeader = __webpack_require__(/*! ./components/header.js */ \"./resources/assets/theme/js/components/header.js\");\nwindow.KTImageInput = __webpack_require__(/*! ./components/image-input.js */ \"./resources/assets/theme/js/components/image-input.js\");\nwindow.KTMenu = __webpack_require__(/*! ./components/menu.js */ \"./resources/assets/theme/js/components/menu.js\");\nwindow.KTOffcanvas = __webpack_require__(/*! ./components/offcanvas.js */ \"./resources/assets/theme/js/components/offcanvas.js\");\nwindow.KTScrolltop = __webpack_require__(/*! ./components/scrolltop.js */ \"./resources/assets/theme/js/components/scrolltop.js\");\nwindow.KTToggle = __webpack_require__(/*! ./components/toggle.js */ \"./resources/assets/theme/js/components/toggle.js\");\nwindow.KTWizard = __webpack_require__(/*! ./components/wizard.js */ \"./resources/assets/theme/js/components/wizard.js\");\n\n__webpack_require__(/*! ./components/datatable/core.datatable.js */ \"./resources/assets/theme/js/components/datatable/core.datatable.js\");\n\n__webpack_require__(/*! ./components/datatable/datatable.checkbox.js */ \"./resources/assets/theme/js/components/datatable/datatable.checkbox.js\");\n\n__webpack_require__(/*! ./components/datatable/datatable.rtl.js */ \"./resources/assets/theme/js/components/datatable/datatable.rtl.js\"); // Metronic layout base js\n\n\nwindow.KTLayoutAside = __webpack_require__(/*! ./layout/base/aside.js */ \"./resources/assets/theme/js/layout/base/aside.js\");\nwindow.KTLayoutAsideMenu = __webpack_require__(/*! ./layout/base/aside-menu.js */ \"./resources/assets/theme/js/layout/base/aside-menu.js\");\nwindow.KTLayoutAsideToggle = __webpack_require__(/*! ./layout/base/aside-toggle.js */ \"./resources/assets/theme/js/layout/base/aside-toggle.js\");\nwindow.KTLayoutBrand = __webpack_require__(/*! ./layout/base/brand.js */ \"./resources/assets/theme/js/layout/base/brand.js\");\nwindow.KTLayoutContent = __webpack_require__(/*! ./layout/base/content.js */ \"./resources/assets/theme/js/layout/base/content.js\");\nwindow.KTLayoutFooter = __webpack_require__(/*! ./layout/base/footer.js */ \"./resources/assets/theme/js/layout/base/footer.js\");\nwindow.KTLayoutHeader = __webpack_require__(/*! ./layout/base/header.js */ \"./resources/assets/theme/js/layout/base/header.js\");\nwindow.KTLayoutHeaderMenu = __webpack_require__(/*! ./layout/base/header-menu.js */ \"./resources/assets/theme/js/layout/base/header-menu.js\");\nwindow.KTLayoutHeaderTopbar = __webpack_require__(/*! ./layout/base/header-topbar.js */ \"./resources/assets/theme/js/layout/base/header-topbar.js\");\nwindow.KTLayoutStickyCard = __webpack_require__(/*! ./layout/base/sticky-card.js */ \"./resources/assets/theme/js/layout/base/sticky-card.js\");\nwindow.KTLayoutStretchedCard = __webpack_require__(/*! ./layout/base/stretched-card.js */ \"./resources/assets/theme/js/layout/base/stretched-card.js\");\nwindow.KTLayoutSubheader = __webpack_require__(/*! ./layout/base/subheader.js */ \"./resources/assets/theme/js/layout/base/subheader.js\"); // Metronic layout extended js\n\nwindow.KTLayoutChat = __webpack_require__(/*! ./layout/extended/chat.js */ \"./resources/assets/theme/js/layout/extended/chat.js\");\nwindow.KTLayoutDemoPanel = __webpack_require__(/*! ./layout/extended/demo-panel.js */ \"./resources/assets/theme/js/layout/extended/demo-panel.js\");\nwindow.KTLayoutExamples = __webpack_require__(/*! ./layout/extended/examples.js */ \"./resources/assets/theme/js/layout/extended/examples.js\");\nwindow.KTLayoutQuickActions = __webpack_require__(/*! ./layout/extended/quick-actions.js */ \"./resources/assets/theme/js/layout/extended/quick-actions.js\");\nwindow.KTLayoutQuickCartPanel = __webpack_require__(/*! ./layout/extended/quick-cart.js */ \"./resources/assets/theme/js/layout/extended/quick-cart.js\");\nwindow.KTLayoutQuickNotifications = __webpack_require__(/*! ./layout/extended/quick-notifications.js */ \"./resources/assets/theme/js/layout/extended/quick-notifications.js\");\nwindow.KTLayoutQuickPanel = __webpack_require__(/*! ./layout/extended/quick-panel.js */ \"./resources/assets/theme/js/layout/extended/quick-panel.js\");\nwindow.KTLayoutQuickSearch = __webpack_require__(/*! ./layout/extended/quick-search.js */ \"./resources/assets/theme/js/layout/extended/quick-search.js\");\nwindow.KTLayoutQuickUser = __webpack_require__(/*! ./layout/extended/quick-user.js */ \"./resources/assets/theme/js/layout/extended/quick-user.js\");\nwindow.KTLayoutScrolltop = __webpack_require__(/*! ./layout/extended/scrolltop.js */ \"./resources/assets/theme/js/layout/extended/scrolltop.js\");\nwindow.KTLayoutSearch = window.KTLayoutSearchOffcanvas = __webpack_require__(/*! ./layout/extended/search.js */ \"./resources/assets/theme/js/layout/extended/search.js\");\n\n__webpack_require__(/*! ./layout/initialize.js */ \"./resources/assets/theme/js/layout/initialize.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lL2pzL3RoZW1lLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLE1BQU0sQ0FBQ0MsYUFBUCxHQUF1QkMsbUJBQU8sQ0FBQywwREFBRCxDQUE5QixDLENBRUE7O0FBQ0FGLE1BQU0sQ0FBQ0csTUFBUCxHQUFnQkQsbUJBQU8sQ0FBQyw0RUFBRCxDQUF2QjtBQUNBRixNQUFNLENBQUNJLEtBQVAsR0FBZUYsbUJBQU8sQ0FBQywwRUFBRCxDQUF0QjtBQUNBRixNQUFNLENBQUNLLE1BQVAsR0FBZ0JILG1CQUFPLENBQUMsNEVBQUQsQ0FBdkI7QUFDQUYsTUFBTSxDQUFDTSxRQUFQLEdBQWtCSixtQkFBTyxDQUFDLGdGQUFELENBQXpCO0FBQ0FGLE1BQU0sQ0FBQ08sUUFBUCxHQUFrQkwsbUJBQU8sQ0FBQyxnRkFBRCxDQUF6QjtBQUNBRixNQUFNLENBQUNRLFFBQVAsR0FBa0JOLG1CQUFPLENBQUMsZ0ZBQUQsQ0FBekI7QUFDQUYsTUFBTSxDQUFDUyxZQUFQLEdBQXNCUCxtQkFBTyxDQUFDLDBGQUFELENBQTdCO0FBQ0FGLE1BQU0sQ0FBQ1UsTUFBUCxHQUFnQlIsbUJBQU8sQ0FBQyw0RUFBRCxDQUF2QjtBQUNBRixNQUFNLENBQUNXLFdBQVAsR0FBcUJULG1CQUFPLENBQUMsc0ZBQUQsQ0FBNUI7QUFDQUYsTUFBTSxDQUFDWSxXQUFQLEdBQXFCVixtQkFBTyxDQUFDLHNGQUFELENBQTVCO0FBQ0FGLE1BQU0sQ0FBQ2EsUUFBUCxHQUFrQlgsbUJBQU8sQ0FBQyxnRkFBRCxDQUF6QjtBQUNBRixNQUFNLENBQUNjLFFBQVAsR0FBa0JaLG1CQUFPLENBQUMsZ0ZBQUQsQ0FBekI7O0FBQ0FBLG1CQUFPLENBQUMsb0hBQUQsQ0FBUDs7QUFDQUEsbUJBQU8sQ0FBQyw0SEFBRCxDQUFQOztBQUNBQSxtQkFBTyxDQUFDLGtIQUFELENBQVAsQyxDQUVBOzs7QUFDQUYsTUFBTSxDQUFDZSxhQUFQLEdBQXVCYixtQkFBTyxDQUFDLGdGQUFELENBQTlCO0FBQ0FGLE1BQU0sQ0FBQ2dCLGlCQUFQLEdBQTJCZCxtQkFBTyxDQUFDLDBGQUFELENBQWxDO0FBQ0FGLE1BQU0sQ0FBQ2lCLG1CQUFQLEdBQTZCZixtQkFBTyxDQUFDLDhGQUFELENBQXBDO0FBQ0FGLE1BQU0sQ0FBQ2tCLGFBQVAsR0FBdUJoQixtQkFBTyxDQUFDLGdGQUFELENBQTlCO0FBQ0FGLE1BQU0sQ0FBQ21CLGVBQVAsR0FBeUJqQixtQkFBTyxDQUFDLG9GQUFELENBQWhDO0FBQ0FGLE1BQU0sQ0FBQ29CLGNBQVAsR0FBd0JsQixtQkFBTyxDQUFDLGtGQUFELENBQS9CO0FBQ0FGLE1BQU0sQ0FBQ3FCLGNBQVAsR0FBd0JuQixtQkFBTyxDQUFDLGtGQUFELENBQS9CO0FBQ0FGLE1BQU0sQ0FBQ3NCLGtCQUFQLEdBQTRCcEIsbUJBQU8sQ0FBQyw0RkFBRCxDQUFuQztBQUNBRixNQUFNLENBQUN1QixvQkFBUCxHQUE4QnJCLG1CQUFPLENBQUMsZ0dBQUQsQ0FBckM7QUFDQUYsTUFBTSxDQUFDd0Isa0JBQVAsR0FBNEJ0QixtQkFBTyxDQUFDLDRGQUFELENBQW5DO0FBQ0FGLE1BQU0sQ0FBQ3lCLHFCQUFQLEdBQStCdkIsbUJBQU8sQ0FBQyxrR0FBRCxDQUF0QztBQUNBRixNQUFNLENBQUMwQixpQkFBUCxHQUEyQnhCLG1CQUFPLENBQUMsd0ZBQUQsQ0FBbEMsQyxDQUVBOztBQUNBRixNQUFNLENBQUMyQixZQUFQLEdBQXNCekIsbUJBQU8sQ0FBQyxzRkFBRCxDQUE3QjtBQUNBRixNQUFNLENBQUM0QixpQkFBUCxHQUEyQjFCLG1CQUFPLENBQUMsa0dBQUQsQ0FBbEM7QUFDQUYsTUFBTSxDQUFDNkIsZ0JBQVAsR0FBMEIzQixtQkFBTyxDQUFDLDhGQUFELENBQWpDO0FBQ0FGLE1BQU0sQ0FBQzhCLG9CQUFQLEdBQThCNUIsbUJBQU8sQ0FBQyx3R0FBRCxDQUFyQztBQUNBRixNQUFNLENBQUMrQixzQkFBUCxHQUFnQzdCLG1CQUFPLENBQUMsa0dBQUQsQ0FBdkM7QUFDQUYsTUFBTSxDQUFDZ0MsMEJBQVAsR0FBb0M5QixtQkFBTyxDQUFDLG9IQUFELENBQTNDO0FBQ0FGLE1BQU0sQ0FBQ2lDLGtCQUFQLEdBQTRCL0IsbUJBQU8sQ0FBQyxvR0FBRCxDQUFuQztBQUNBRixNQUFNLENBQUNrQyxtQkFBUCxHQUE2QmhDLG1CQUFPLENBQUMsc0dBQUQsQ0FBcEM7QUFDQUYsTUFBTSxDQUFDbUMsaUJBQVAsR0FBMkJqQyxtQkFBTyxDQUFDLGtHQUFELENBQWxDO0FBQ0FGLE1BQU0sQ0FBQ29DLGlCQUFQLEdBQTJCbEMsbUJBQU8sQ0FBQyxnR0FBRCxDQUFsQztBQUNBRixNQUFNLENBQUNxQyxjQUFQLEdBQXdCckMsTUFBTSxDQUFDc0MsdUJBQVAsR0FBaUNwQyxtQkFBTyxDQUFDLDBGQUFELENBQWhFOztBQUVBQSxtQkFBTyxDQUFDLGdGQUFELENBQVAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL3RoZW1lL2pzL3RoZW1lLmpzP2I0OTAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gS2VlbnRoZW1lcycgS1RBcHBTZXR0aW5nc1xyXG53aW5kb3cuS1RBcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4vY29uZmlnLmpzJyk7XHJcblxyXG4vLyBLZWVudGhlbWVzJyBwbHVnaW5zXHJcbndpbmRvdy5LVFV0aWwgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvdXRpbC5qcycpO1xyXG53aW5kb3cuS1RBcHAgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvYXBwLmpzJyk7XHJcbndpbmRvdy5LVENhcmQgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvY2FyZC5qcycpO1xyXG53aW5kb3cuS1RDb29raWUgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvY29va2llLmpzJyk7XHJcbndpbmRvdy5LVERpYWxvZyA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9kaWFsb2cuanMnKTtcclxud2luZG93LktUSGVhZGVyID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2hlYWRlci5qcycpO1xyXG53aW5kb3cuS1RJbWFnZUlucHV0ID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2ltYWdlLWlucHV0LmpzJyk7XHJcbndpbmRvdy5LVE1lbnUgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvbWVudS5qcycpO1xyXG53aW5kb3cuS1RPZmZjYW52YXMgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvb2ZmY2FudmFzLmpzJyk7XHJcbndpbmRvdy5LVFNjcm9sbHRvcCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9zY3JvbGx0b3AuanMnKTtcclxud2luZG93LktUVG9nZ2xlID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL3RvZ2dsZS5qcycpO1xyXG53aW5kb3cuS1RXaXphcmQgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvd2l6YXJkLmpzJyk7XHJcbnJlcXVpcmUoJy4vY29tcG9uZW50cy9kYXRhdGFibGUvY29yZS5kYXRhdGFibGUuanMnKTtcclxucmVxdWlyZSgnLi9jb21wb25lbnRzL2RhdGF0YWJsZS9kYXRhdGFibGUuY2hlY2tib3guanMnKTtcclxucmVxdWlyZSgnLi9jb21wb25lbnRzL2RhdGF0YWJsZS9kYXRhdGFibGUucnRsLmpzJyk7XHJcblxyXG4vLyBNZXRyb25pYyBsYXlvdXQgYmFzZSBqc1xyXG53aW5kb3cuS1RMYXlvdXRBc2lkZSA9IHJlcXVpcmUoJy4vbGF5b3V0L2Jhc2UvYXNpZGUuanMnKTtcclxud2luZG93LktUTGF5b3V0QXNpZGVNZW51ID0gcmVxdWlyZSgnLi9sYXlvdXQvYmFzZS9hc2lkZS1tZW51LmpzJyk7XHJcbndpbmRvdy5LVExheW91dEFzaWRlVG9nZ2xlID0gcmVxdWlyZSgnLi9sYXlvdXQvYmFzZS9hc2lkZS10b2dnbGUuanMnKTtcclxud2luZG93LktUTGF5b3V0QnJhbmQgPSByZXF1aXJlKCcuL2xheW91dC9iYXNlL2JyYW5kLmpzJyk7XHJcbndpbmRvdy5LVExheW91dENvbnRlbnQgPSByZXF1aXJlKCcuL2xheW91dC9iYXNlL2NvbnRlbnQuanMnKTtcclxud2luZG93LktUTGF5b3V0Rm9vdGVyID0gcmVxdWlyZSgnLi9sYXlvdXQvYmFzZS9mb290ZXIuanMnKTtcclxud2luZG93LktUTGF5b3V0SGVhZGVyID0gcmVxdWlyZSgnLi9sYXlvdXQvYmFzZS9oZWFkZXIuanMnKTtcclxud2luZG93LktUTGF5b3V0SGVhZGVyTWVudSA9IHJlcXVpcmUoJy4vbGF5b3V0L2Jhc2UvaGVhZGVyLW1lbnUuanMnKTtcclxud2luZG93LktUTGF5b3V0SGVhZGVyVG9wYmFyID0gcmVxdWlyZSgnLi9sYXlvdXQvYmFzZS9oZWFkZXItdG9wYmFyLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFN0aWNreUNhcmQgPSByZXF1aXJlKCcuL2xheW91dC9iYXNlL3N0aWNreS1jYXJkLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFN0cmV0Y2hlZENhcmQgPSByZXF1aXJlKCcuL2xheW91dC9iYXNlL3N0cmV0Y2hlZC1jYXJkLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFN1YmhlYWRlciA9IHJlcXVpcmUoJy4vbGF5b3V0L2Jhc2Uvc3ViaGVhZGVyLmpzJyk7XHJcblxyXG4vLyBNZXRyb25pYyBsYXlvdXQgZXh0ZW5kZWQganNcclxud2luZG93LktUTGF5b3V0Q2hhdCA9IHJlcXVpcmUoJy4vbGF5b3V0L2V4dGVuZGVkL2NoYXQuanMnKTtcclxud2luZG93LktUTGF5b3V0RGVtb1BhbmVsID0gcmVxdWlyZSgnLi9sYXlvdXQvZXh0ZW5kZWQvZGVtby1wYW5lbC5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRFeGFtcGxlcyA9IHJlcXVpcmUoJy4vbGF5b3V0L2V4dGVuZGVkL2V4YW1wbGVzLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrQWN0aW9ucyA9IHJlcXVpcmUoJy4vbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWFjdGlvbnMuanMnKTtcclxud2luZG93LktUTGF5b3V0UXVpY2tDYXJ0UGFuZWwgPSByZXF1aXJlKCcuL2xheW91dC9leHRlbmRlZC9xdWljay1jYXJ0LmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrTm90aWZpY2F0aW9ucyA9IHJlcXVpcmUoJy4vbGF5b3V0L2V4dGVuZGVkL3F1aWNrLW5vdGlmaWNhdGlvbnMuanMnKTtcclxud2luZG93LktUTGF5b3V0UXVpY2tQYW5lbCA9IHJlcXVpcmUoJy4vbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXBhbmVsLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrU2VhcmNoID0gcmVxdWlyZSgnLi9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stc2VhcmNoLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrVXNlciA9IHJlcXVpcmUoJy4vbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXVzZXIuanMnKTtcclxud2luZG93LktUTGF5b3V0U2Nyb2xsdG9wID0gcmVxdWlyZSgnLi9sYXlvdXQvZXh0ZW5kZWQvc2Nyb2xsdG9wLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFNlYXJjaCA9IHdpbmRvdy5LVExheW91dFNlYXJjaE9mZmNhbnZhcyA9IHJlcXVpcmUoJy4vbGF5b3V0L2V4dGVuZGVkL3NlYXJjaC5qcycpO1xyXG5cclxucmVxdWlyZSgnLi9sYXlvdXQvaW5pdGlhbGl6ZS5qcycpO1xyXG4iXSwibmFtZXMiOlsid2luZG93IiwiS1RBcHBTZXR0aW5ncyIsInJlcXVpcmUiLCJLVFV0aWwiLCJLVEFwcCIsIktUQ2FyZCIsIktUQ29va2llIiwiS1REaWFsb2ciLCJLVEhlYWRlciIsIktUSW1hZ2VJbnB1dCIsIktUTWVudSIsIktUT2ZmY2FudmFzIiwiS1RTY3JvbGx0b3AiLCJLVFRvZ2dsZSIsIktUV2l6YXJkIiwiS1RMYXlvdXRBc2lkZSIsIktUTGF5b3V0QXNpZGVNZW51IiwiS1RMYXlvdXRBc2lkZVRvZ2dsZSIsIktUTGF5b3V0QnJhbmQiLCJLVExheW91dENvbnRlbnQiLCJLVExheW91dEZvb3RlciIsIktUTGF5b3V0SGVhZGVyIiwiS1RMYXlvdXRIZWFkZXJNZW51IiwiS1RMYXlvdXRIZWFkZXJUb3BiYXIiLCJLVExheW91dFN0aWNreUNhcmQiLCJLVExheW91dFN0cmV0Y2hlZENhcmQiLCJLVExheW91dFN1YmhlYWRlciIsIktUTGF5b3V0Q2hhdCIsIktUTGF5b3V0RGVtb1BhbmVsIiwiS1RMYXlvdXRFeGFtcGxlcyIsIktUTGF5b3V0UXVpY2tBY3Rpb25zIiwiS1RMYXlvdXRRdWlja0NhcnRQYW5lbCIsIktUTGF5b3V0UXVpY2tOb3RpZmljYXRpb25zIiwiS1RMYXlvdXRRdWlja1BhbmVsIiwiS1RMYXlvdXRRdWlja1NlYXJjaCIsIktUTGF5b3V0UXVpY2tVc2VyIiwiS1RMYXlvdXRTY3JvbGx0b3AiLCJLVExheW91dFNlYXJjaCIsIktUTGF5b3V0U2VhcmNoT2ZmY2FudmFzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/theme/js/theme.js\n");

  /***/ })

  /******/ 	});
  /************************************************************************/
  /******/ 	// The module cache
  /******/ 	var __webpack_module_cache__ = {};
  /******/
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/ 		// Check if module is in cache
  /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
  /******/ 		if (cachedModule !== undefined) {
  /******/ 			return cachedModule.exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = __webpack_module_cache__[moduleId] = {
  /******/ 			// no module.id needed
  /******/ 			// no module.loaded needed
  /******/ 			exports: {}
  /******/ 		};
  /******/
  /******/ 		// Execute the module function
  /******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
  /******/
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/
  /************************************************************************/
  /******/
  /******/ 	// startup
  /******/ 	// Load entry module and return exports
  /******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
  /******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/theme/js/theme.js");
  /******/
  /******/ })()
  ;
